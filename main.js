!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=17)}([function(e,t,n){"use strict";(function(e){function r(e,t){const n=Object.create(null),r=e.split(",");for(let e=0;e<r.length;e++)n[r[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.d(t,"a",(function(){return y})),n.d(t,"b",(function(){return v})),n.d(t,"c",(function(){return w})),n.d(t,"d",(function(){return O})),n.d(t,"e",(function(){return H})),n.d(t,"f",(function(){return q})),n.d(t,"g",(function(){return Z})),n.d(t,"h",(function(){return j})),n.d(t,"i",(function(){return J})),n.d(t,"j",(function(){return C})),n.d(t,"k",(function(){return Y})),n.d(t,"l",(function(){return Q})),n.d(t,"m",(function(){return R})),n.d(t,"n",(function(){return k})),n.d(t,"o",(function(){return o})),n.d(t,"p",(function(){return f})),n.d(t,"q",(function(){return X})),n.d(t,"r",(function(){return S})),n.d(t,"s",(function(){return x})),n.d(t,"t",(function(){return B})),n.d(t,"u",(function(){return _})),n.d(t,"v",(function(){return V})),n.d(t,"w",(function(){return U})),n.d(t,"x",(function(){return G})),n.d(t,"y",(function(){return d})),n.d(t,"z",(function(){return F})),n.d(t,"A",(function(){return s})),n.d(t,"B",(function(){return M})),n.d(t,"C",(function(){return D})),n.d(t,"D",(function(){return p})),n.d(t,"E",(function(){return m})),n.d(t,"F",(function(){return r})),n.d(t,"G",(function(){return h})),n.d(t,"H",(function(){return a})),n.d(t,"I",(function(){return T})),n.d(t,"J",(function(){return b})),n.d(t,"K",(function(){return K})),n.d(t,"L",(function(){return ee})),n.d(t,"M",(function(){return N}));const o=r("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");const i="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",s=r(i);function a(e){if(R(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],o=a(M(r)?u(r):r);if(o)for(const e in o)t[e]=o[e]}return t}if(B(e))return e}const c=/;(?![^(]*\))/g,l=/:(.+)/;function u(e){const t={};return e.split(c).forEach(e=>{if(e){const n=e.split(l);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function h(e){let t="";if(M(e))t=e;else if(R(e))for(let n=0;n<e.length;n++){const r=h(e[n]);r&&(t+=r+" ")}else if(B(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const f=r("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),d=r("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view");function p(e,t){if(e===t)return!0;let n=L(e),r=L(t);if(n||r)return!(!n||!r)&&e.getTime()===t.getTime();if(n=R(e),r=R(t),n||r)return!(!n||!r)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=p(e[r],t[r]);return n}(e,t);if(n=B(e),r=B(t),n||r){if(!n||!r)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const r=e.hasOwnProperty(n),o=t.hasOwnProperty(n);if(r&&!o||!r&&o||!p(e[n],t[n]))return!1}}return String(e)===String(t)}function m(e,t){return e.findIndex(e=>p(e,t))}const b=e=>null==e?"":B(e)?JSON.stringify(e,g,2):String(e),g=(e,t)=>S(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((e,[t,n])=>(e[t+" =>"]=n,e),{})}:F(t)?{[`Set(${t.size})`]:[...t.values()]}:!B(t)||R(t)||V(t)?t:String(t),v={},y=[],O=()=>{},w=()=>!1,E=/^on[^a-z]/,_=e=>E.test(e),x=e=>e.startsWith("onUpdate:"),j=Object.assign,T=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},A=Object.prototype.hasOwnProperty,C=(e,t)=>A.call(e,t),R=Array.isArray,S=e=>"[object Map]"===P(e),F=e=>"[object Set]"===P(e),L=e=>e instanceof Date,k=e=>"function"==typeof e,M=e=>"string"==typeof e,D=e=>"symbol"==typeof e,B=e=>null!==e&&"object"==typeof e,U=e=>B(e)&&k(e.then)&&k(e.catch),I=Object.prototype.toString,P=e=>I.call(e),N=e=>P(e).slice(8,-1),V=e=>"[object Object]"===P(e),X=e=>M(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,G=r(",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),z=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},W=/-(\w)/g,H=z(e=>e.replace(W,(e,t)=>t?t.toUpperCase():"")),$=/\B([A-Z])/g,Y=z(e=>e.replace($,"-$1").toLowerCase()),q=z(e=>e.charAt(0).toUpperCase()+e.slice(1)),K=z(e=>e?"on"+q(e):""),J=(e,t)=>e!==t&&(e==e||t==t),Q=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Z=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},ee=e=>{const t=parseFloat(e);return isNaN(t)?e:t}}).call(this,n(7))},function(e,t,n){"use strict";n.d(t,"a",(function(){return je})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return he})),n.d(t,"d",(function(){return le})),n.d(t,"e",(function(){return ue})),n.d(t,"f",(function(){return pe})),n.d(t,"g",(function(){return m})),n.d(t,"h",(function(){return we})),n.d(t,"i",(function(){return ie})),n.d(t,"j",(function(){return me})),n.d(t,"k",(function(){return b})),n.d(t,"l",(function(){return se})),n.d(t,"m",(function(){return be})),n.d(t,"n",(function(){return u})),n.d(t,"o",(function(){return fe})),n.d(t,"p",(function(){return _e})),n.d(t,"q",(function(){return g})),n.d(t,"r",(function(){return v})),n.d(t,"s",(function(){return ye}));var r=n(0);const o=new WeakMap,i=[];let s;const a=Symbol(""),c=Symbol("");function l(e,t=r.b){(function(e){return e&&!0===e._isEffect})(e)&&(e=e.raw);const n=function(e,t){const n=function(){if(!n.active)return e();if(!i.includes(n)){f(n);try{return p.push(d),d=!0,i.push(n),s=n,e()}finally{i.pop(),b(),s=i[i.length-1]}}};return n.id=h++,n.allowRecurse=!!t.allowRecurse,n._isEffect=!0,n.active=!0,n.raw=e,n.deps=[],n.options=t,n}(e,t);return t.lazy||n(),n}function u(e){e.active&&(f(e),e.options.onStop&&e.options.onStop(),e.active=!1)}let h=0;function f(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let d=!0;const p=[];function m(){p.push(d),d=!1}function b(){const e=p.pop();d=void 0===e||e}function g(e,t,n){if(!d||void 0===s)return;let r=o.get(e);r||o.set(e,r=new Map);let i=r.get(n);i||r.set(n,i=new Set),i.has(s)||(i.add(s),s.deps.push(i))}function v(e,t,n,i,l,u){const h=o.get(e);if(!h)return;const f=new Set,d=e=>{e&&e.forEach(e=>{(e!==s||e.allowRecurse)&&f.add(e)})};if("clear"===t)h.forEach(d);else if("length"===n&&Object(r.m)(e))h.forEach((e,t)=>{("length"===t||t>=i)&&d(e)});else switch(void 0!==n&&d(h.get(n)),t){case"add":Object(r.m)(e)?Object(r.q)(n)&&d(h.get("length")):(d(h.get(a)),Object(r.r)(e)&&d(h.get(c)));break;case"delete":Object(r.m)(e)||(d(h.get(a)),Object(r.r)(e)&&d(h.get(c)));break;case"set":Object(r.r)(e)&&d(h.get(a))}f.forEach(e=>{e.options.scheduler?e.options.scheduler(e):e()})}const y=Object(r.F)("__proto__,__v_isRef,__isVue"),O=new Set(Object.getOwnPropertyNames(Symbol).map(e=>Symbol[e]).filter(r.C)),w=T(),E=T(!1,!0),_=T(!0),x=T(!0,!0),j={};function T(e=!1,t=!1){return function(n,o,i){if("__v_isReactive"===o)return!e;if("__v_isReadonly"===o)return e;if("__v_raw"===o&&i===(e?t?oe:re:t?ne:te).get(n))return n;const s=Object(r.m)(n);if(!e&&s&&Object(r.j)(j,o))return Reflect.get(j,o,i);const a=Reflect.get(n,o,i);if(Object(r.C)(o)?O.has(o):y(o))return a;if(e||g(n,0,o),t)return a;if(pe(a)){return!s||!Object(r.q)(o)?a.value:a}return Object(r.t)(a)?e?ae(a):ie(a):a}}["includes","indexOf","lastIndexOf"].forEach(e=>{const t=Array.prototype[e];j[e]=function(...e){const n=fe(this);for(let e=0,t=this.length;e<t;e++)g(n,0,e+"");const r=t.apply(n,e);return-1===r||!1===r?t.apply(n,e.map(fe)):r}}),["push","pop","shift","unshift","splice"].forEach(e=>{const t=Array.prototype[e];j[e]=function(...e){m();const n=t.apply(this,e);return b(),n}});const A=R(),C=R(!0);function R(e=!1){return function(t,n,o,i){let s=t[n];if(!e&&(o=fe(o),s=fe(s),!Object(r.m)(t)&&pe(s)&&!pe(o)))return s.value=o,!0;const a=Object(r.m)(t)&&Object(r.q)(n)?Number(n)<t.length:Object(r.j)(t,n),c=Reflect.set(t,n,o,i);return t===fe(i)&&(a?Object(r.i)(o,s)&&v(t,"set",n,o):v(t,"add",n,o)),c}}const S={get:w,set:A,deleteProperty:function(e,t){const n=Object(r.j)(e,t),o=(e[t],Reflect.deleteProperty(e,t));return o&&n&&v(e,"delete",t,void 0),o},has:function(e,t){const n=Reflect.has(e,t);return Object(r.C)(t)&&O.has(t)||g(e,0,t),n},ownKeys:function(e){return g(e,0,Object(r.m)(e)?"length":a),Reflect.ownKeys(e)}},F={get:_,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},L=Object(r.h)({},S,{get:E,set:C}),k=(Object(r.h)({},F,{get:x}),e=>Object(r.t)(e)?ie(e):e),M=e=>Object(r.t)(e)?ae(e):e,D=e=>e,B=e=>Reflect.getPrototypeOf(e);function U(e,t,n=!1,r=!1){const o=fe(e=e.__v_raw),i=fe(t);t!==i&&!n&&g(o,0,t),!n&&g(o,0,i);const{has:s}=B(o),a=r?D:n?M:k;return s.call(o,t)?a(e.get(t)):s.call(o,i)?a(e.get(i)):void(e!==o&&e.get(t))}function I(e,t=!1){const n=this.__v_raw,r=fe(n),o=fe(e);return e!==o&&!t&&g(r,0,e),!t&&g(r,0,o),e===o?n.has(e):n.has(e)||n.has(o)}function P(e,t=!1){return e=e.__v_raw,!t&&g(fe(e),0,a),Reflect.get(e,"size",e)}function N(e){e=fe(e);const t=fe(this);return B(t).has.call(t,e)||(t.add(e),v(t,"add",e,e)),this}function V(e,t){t=fe(t);const n=fe(this),{has:o,get:i}=B(n);let s=o.call(n,e);s||(e=fe(e),s=o.call(n,e));const a=i.call(n,e);return n.set(e,t),s?Object(r.i)(t,a)&&v(n,"set",e,t):v(n,"add",e,t),this}function X(e){const t=fe(this),{has:n,get:r}=B(t);let o=n.call(t,e);o||(e=fe(e),o=n.call(t,e));r&&r.call(t,e);const i=t.delete(e);return o&&v(t,"delete",e,void 0),i}function G(){const e=fe(this),t=0!==e.size,n=e.clear();return t&&v(e,"clear",void 0,void 0),n}function z(e,t){return function(n,r){const o=this,i=o.__v_raw,s=fe(i),c=t?D:e?M:k;return!e&&g(s,0,a),i.forEach((e,t)=>n.call(r,c(e),c(t),o))}}function W(e,t,n){return function(...o){const i=this.__v_raw,s=fe(i),l=Object(r.r)(s),u="entries"===e||e===Symbol.iterator&&l,h="keys"===e&&l,f=i[e](...o),d=n?D:t?M:k;return!t&&g(s,0,h?c:a),{next(){const{value:e,done:t}=f.next();return t?{value:e,done:t}:{value:u?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function H(e){return function(...t){return"delete"!==e&&this}}const $={get(e){return U(this,e)},get size(){return P(this)},has:I,add:N,set:V,delete:X,clear:G,forEach:z(!1,!1)},Y={get(e){return U(this,e,!1,!0)},get size(){return P(this)},has:I,add:N,set:V,delete:X,clear:G,forEach:z(!1,!0)},q={get(e){return U(this,e,!0)},get size(){return P(this,!0)},has(e){return I.call(this,e,!0)},add:H("add"),set:H("set"),delete:H("delete"),clear:H("clear"),forEach:z(!0,!1)},K={get(e){return U(this,e,!0,!0)},get size(){return P(this,!0)},has(e){return I.call(this,e,!0)},add:H("add"),set:H("set"),delete:H("delete"),clear:H("clear"),forEach:z(!0,!0)};function J(e,t){const n=t?e?K:Y:e?q:$;return(t,o,i)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get(Object(r.j)(n,o)&&o in t?n:t,o,i)}["keys","values","entries",Symbol.iterator].forEach(e=>{$[e]=W(e,!1,!1),q[e]=W(e,!0,!1),Y[e]=W(e,!1,!0),K[e]=W(e,!0,!0)});const Q={get:J(!1,!1)},Z={get:J(!1,!0)},ee={get:J(!0,!1)};J(!0,!0);const te=new WeakMap,ne=new WeakMap,re=new WeakMap,oe=new WeakMap;function ie(e){return e&&e.__v_isReadonly?e:ce(e,!1,S,Q,te)}function se(e){return ce(e,!1,L,Z,ne)}function ae(e){return ce(e,!0,F,ee,re)}function ce(e,t,n,o,i){if(!Object(r.t)(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=i.get(e);if(s)return s;const a=(c=e).__v_skip||!Object.isExtensible(c)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(Object(r.M)(c));var c;if(0===a)return e;const l=new Proxy(e,2===a?o:n);return i.set(e,l),l}function le(e){return ue(e)?le(e.__v_raw):!(!e||!e.__v_isReactive)}function ue(e){return!(!e||!e.__v_isReadonly)}function he(e){return le(e)||ue(e)}function fe(e){return e&&fe(e.__v_raw)||e}const de=e=>Object(r.t)(e)?ie(e):e;function pe(e){return Boolean(e&&!0===e.__v_isRef)}function me(e){return ve(e)}function be(e){return ve(e,!0)}class ge{constructor(e,t=!1){this._rawValue=e,this._shallow=t,this.__v_isRef=!0,this._value=t?e:de(e)}get value(){return g(fe(this),0,"value"),this._value}set value(e){Object(r.i)(fe(e),this._rawValue)&&(this._rawValue=e,this._value=this._shallow?e:de(e),v(fe(this),"set","value",e))}}function ve(e,t=!1){return pe(e)?e:new ge(e,t)}function ye(e){return pe(e)?e.value:e}const Oe={get:(e,t,n)=>ye(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const o=e[t];return pe(o)&&!pe(n)?(o.value=n,!0):Reflect.set(e,t,n,r)}};function we(e){return le(e)?e:new Proxy(e,Oe)}class Ee{constructor(e,t){this._object=e,this._key=t,this.__v_isRef=!0}get value(){return this._object[this._key]}set value(e){this._object[this._key]=e}}function _e(e,t){return pe(e[t])?e[t]:new Ee(e,t)}class xe{constructor(e,t,n){this._setter=t,this._dirty=!0,this.__v_isRef=!0,this.effect=l(e,{lazy:!0,scheduler:()=>{this._dirty||(this._dirty=!0,v(fe(this),"set","value"))}}),this.__v_isReadonly=n}get value(){const e=fe(this);return e._dirty&&(e._value=this.effect(),e._dirty=!1),g(e,0,"value"),e._value}set value(e){this._setter(e)}}function je(e){let t,n;return Object(r.n)(e)?(t=e,n=r.d):(t=e.get,n=e.set),new xe(t,n,Object(r.n)(e)||!e.set)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return se})),n.d(t,"b",(function(){return xt})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return bn})),n.d(t,"e",(function(){return Mt})),n.d(t,"f",(function(){return zt})),n.d(t,"g",(function(){return bt})),n.d(t,"h",(function(){return mt})),n.d(t,"i",(function(){return Gt})),n.d(t,"j",(function(){return Nt})),n.d(t,"k",(function(){return de})),n.d(t,"l",(function(){return tn})),n.d(t,"m",(function(){return fe})),n.d(t,"n",(function(){return gn})),n.d(t,"o",(function(){return K})),n.d(t,"p",(function(){return cn})),n.d(t,"q",(function(){return x})),n.d(t,"r",(function(){return ge})),n.d(t,"s",(function(){return ve})),n.d(t,"t",(function(){return Te})),n.d(t,"u",(function(){return Se})),n.d(t,"v",(function(){return Ce})),n.d(t,"w",(function(){return St})),n.d(t,"x",(function(){return N})),n.d(t,"y",(function(){return q})),n.d(t,"z",(function(){return P})),n.d(t,"A",(function(){return Ot})),n.d(t,"B",(function(){return ce})),n.d(t,"C",(function(){return he})),n.d(t,"D",(function(){return oe})),n.d(t,"E",(function(){return s})),n.d(t,"F",(function(){return Z})),n.d(t,"G",(function(){return J})),n.d(t,"H",(function(){return V}));var r=n(1),o=n(0);const i=[];function s(e,...t){Object(r.g)();const n=i.length?i[i.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=function(){let e=i[i.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const r=e.component&&e.component.parent;e=r&&r.vnode}return t}();if(o)c(o,n,11,[e+t.join(""),n&&n.proxy,s.map(({vnode:e})=>`at <${pn(n,e.type)}>`).join("\n"),s]);else{const n=["[Vue warn]: "+e,...t];s.length&&n.push("\n",...function(e){const t=[];return e.forEach((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",r=!!e.component&&null==e.component.parent,o=" at <"+pn(e.component,e.type,r),i=">"+n;return e.props?[o,...a(e.props),i]:[o+i]}(e))}),t}(s)),console.warn(...n)}Object(r.k)()}function a(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(n=>{t.push(...function e(t,n,i){return Object(o.B)(n)?(n=JSON.stringify(n),i?n:[`${t}=${n}`]):"number"==typeof n||"boolean"==typeof n||null==n?i?n:[`${t}=${n}`]:Object(r.f)(n)?(n=e(t,Object(r.o)(n.value),!0),i?n:[t+"=Ref<",n,">"]):Object(o.n)(n)?[`${t}=fn${n.name?`<${n.name}>`:""}`]:(n=Object(r.o)(n),i?n:[t+"=",n])}(n,e[n]))}),n.length>3&&t.push(" ..."),t}function c(e,t,n,r){let o;try{o=r?e(...r):e()}catch(e){u(e,t,n)}return o}function l(e,t,n,r){if(Object(o.n)(e)){const i=c(e,t,n,r);return i&&Object(o.w)(i)&&i.catch(e=>{u(e,t,n)}),i}const i=[];for(let o=0;o<e.length;o++)i.push(l(e[o],t,n,r));return i}function u(e,t,n,r=!0){t&&t.vnode;if(t){let r=t.parent;const o=t.proxy,i=n;for(;r;){const t=r.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,o,i))return;r=r.parent}const s=t.appContext.config.errorHandler;if(s)return void c(s,null,10,[e,o,i])}!function(e,t,n,r=!0){console.error(e)}(e,0,0,r)}let h=!1,f=!1;const d=[];let p=0;const m=[];let b=null,g=0;const v=[];let y=null,O=0;const w=Promise.resolve();let E=null,_=null;function x(e){const t=E||w;return e?t.then(this?e.bind(this):e):t}function j(e){if(!(d.length&&d.includes(e,h&&e.allowRecurse?p+1:p)||e===_)){const t=function(e){let t=p+1,n=d.length;const r=F(e);for(;t<n;){const e=t+n>>>1;F(d[e])<r?t=e+1:n=e}return t}(e);t>-1?d.splice(t,0,e):d.push(e),T()}}function T(){h||f||(f=!0,E=w.then(L))}function A(e,t,n,r){Object(o.m)(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?r+1:r)||n.push(e),T()}function C(e){A(e,y,v,O)}function R(e,t=null){if(m.length){for(_=t,b=[...new Set(m)],m.length=0,g=0;g<b.length;g++)b[g]();b=null,g=0,_=null,R(e,t)}}function S(e){if(v.length){const e=[...new Set(v)];if(v.length=0,y)return void y.push(...e);for(y=e,y.sort((e,t)=>F(e)-F(t)),O=0;O<y.length;O++)y[O]();y=null,O=0}}const F=e=>null==e.id?1/0:e.id;function L(e){f=!1,h=!0,R(e),d.sort((e,t)=>F(e)-F(t));try{for(p=0;p<d.length;p++){const e=d[p];e&&!1!==e.active&&c(e,null,14)}}finally{p=0,d.length=0,S(),h=!1,E=null,(d.length||m.length||v.length)&&L(e)}}new Set;new Map;Object.create(null),Object.create(null);function k(e,t,...n){const r=e.vnode.props||o.b;let i=n;const s=t.startsWith("update:"),a=s&&t.slice(7);if(a&&a in r){const e=("modelValue"===a?"model":a)+"Modifiers",{number:t,trim:s}=r[e]||o.b;s?i=n.map(e=>e.trim()):t&&(i=n.map(o.L))}let c;let u=r[c=Object(o.K)(t)]||r[c=Object(o.K)(Object(o.e)(t))];!u&&s&&(u=r[c=Object(o.K)(Object(o.k)(t))]),u&&l(u,e,6,i);const h=r[c+"Once"];if(h){if(e.emitted){if(e.emitted[c])return}else(e.emitted={})[c]=!0;l(h,e,6,i)}}function M(e,t,n=!1){const r=t.emitsCache,i=r.get(e);if(void 0!==i)return i;const s=e.emits;let a={},c=!1;if(!Object(o.n)(e)){const r=e=>{const n=M(e,t,!0);n&&(c=!0,Object(o.h)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}return s||c?(Object(o.m)(s)?s.forEach(e=>a[e]=null):Object(o.h)(a,s),r.set(e,a),a):(r.set(e,null),null)}function D(e,t){return!(!e||!Object(o.u)(t))&&(t=t.slice(2).replace(/Once$/,""),Object(o.j)(e,t[0].toLowerCase()+t.slice(1))||Object(o.j)(e,Object(o.k)(t))||Object(o.j)(e,t))}let B=null,U=null;function I(e){const t=B;return B=e,U=e&&e.type.__scopeId||null,t}function P(e){U=e}function N(){U=null}const V=e=>X;function X(e,t=B,n){if(!t)return e;if(e._n)return e;const r=(...n)=>{r._d&&kt(-1);const o=I(t),i=e(...n);return I(o),r._d&&kt(1),i};return r._n=!0,r._c=!0,r._d=!0,r}function G(e){const{type:t,vnode:n,proxy:r,withProxy:i,props:s,propsOptions:[a],slots:c,attrs:l,emit:h,render:f,renderCache:d,data:p,setupState:m,ctx:b,inheritAttrs:g}=e;let v;const y=I(e);try{let e;if(4&n.shapeFlag){const t=i||r;v=Wt(f.call(t,t,d,s,m,p,b)),e=l}else{const n=t;0,v=Wt(n.length>1?n(s,{attrs:l,slots:c,emit:h}):n(s,null)),e=t.props?l:z(l)}let u=v;if(e&&!1!==g){const t=Object.keys(e),{shapeFlag:n}=u;t.length&&(1&n||6&n)&&(a&&t.some(o.s)&&(e=W(e,a)),u=Xt(u,e))}0,n.dirs&&(u.dirs=u.dirs?u.dirs.concat(n.dirs):n.dirs),n.transition&&(u.transition=n.transition),v=u}catch(t){Ct.length=0,u(t,e,1),v=Nt(Tt)}return I(y),v}const z=e=>{let t;for(const n in e)("class"===n||"style"===n||Object(o.u)(n))&&((t||(t={}))[n]=e[n]);return t},W=(e,t)=>{const n={};for(const r in e)Object(o.s)(r)&&r.slice(9)in t||(n[r]=e[r]);return n};function H(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let o=0;o<r.length;o++){const i=r[o];if(t[i]!==e[i]&&!D(n,i))return!0}return!1}function $({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}function Y(e,t){t&&t.pendingBranch?Object(o.m)(e)?t.effects.push(...e):t.effects.push(e):C(e)}function q(e,t){if(en){let n=en.provides;const r=en.parent&&en.parent.provides;r===n&&(n=en.provides=Object.create(r)),n[e]=t}else 0}function K(e,t,n=!1){const r=en||B;if(r){const i=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(i&&e in i)return i[e];if(arguments.length>1)return n&&Object(o.n)(t)?t():t}else 0}function J(e,t){return ee(e,null,t)}const Q={};function Z(e,t,n){return ee(e,t,n)}function ee(e,t,{immediate:n,deep:i,flush:s,onTrack:a,onTrigger:u}=o.b,h=en){let f,d,p=!1,v=!1;if(Object(r.f)(e)?(f=()=>e.value,p=!!e._shallow):Object(r.d)(e)?(f=()=>e,i=!0):Object(o.m)(e)?(v=!0,p=e.some(r.d),f=()=>e.map(e=>Object(r.f)(e)?e.value:Object(r.d)(e)?re(e):Object(o.n)(e)?c(e,h,2):void 0)):f=Object(o.n)(e)?t?()=>c(e,h,2):()=>{if(!h||!h.isUnmounted)return d&&d(),l(e,h,3,[y])}:o.d,t&&i){const e=f;f=()=>re(e())}let y=e=>{d=_.options.onStop=()=>{c(e,h,4)}},O=v?[]:Q;const w=()=>{if(_.active)if(t){const e=_();(i||p||(v?e.some((e,t)=>Object(o.i)(e,O[t])):Object(o.i)(e,O)))&&(d&&d(),l(t,h,3,[e,O===Q?void 0:O,y]),O=e)}else _()};let E;w.allowRecurse=!!t,E="sync"===s?w:"post"===s?()=>dt(w,h&&h.suspense):()=>{!h||h.isMounted?function(e){A(e,b,m,g)}(w):w()};const _=Object(r.b)(f,{lazy:!0,onTrack:a,onTrigger:u,scheduler:E});return hn(_,h),t?n?w():O=_():"post"===s?dt(_,h&&h.suspense):_(),()=>{Object(r.n)(_),h&&Object(o.I)(h.effects,_)}}function te(e,t,n){const r=this.proxy,i=Object(o.B)(e)?e.includes(".")?ne(r,e):()=>r[e]:e.bind(r,r);let s;return Object(o.n)(t)?s=t:(s=t.handler,n=t),ee(i,s.bind(r),n,this)}function ne(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function re(e,t=new Set){if(!Object(o.t)(e)||t.has(e)||e.__v_skip)return e;if(t.add(e),Object(r.f)(e))re(e.value,t);else if(Object(o.m)(e))for(let n=0;n<e.length;n++)re(e[n],t);else if(Object(o.z)(e)||Object(o.r)(e))e.forEach(e=>{re(e,t)});else if(Object(o.v)(e))for(const n in e)re(e[n],t);return e}function oe(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Te(()=>{e.isMounted=!0}),Re(()=>{e.isUnmounting=!0}),e}const ie=[Function,Array],se={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ie,onEnter:ie,onAfterEnter:ie,onEnterCancelled:ie,onBeforeLeave:ie,onLeave:ie,onAfterLeave:ie,onLeaveCancelled:ie,onBeforeAppear:ie,onAppear:ie,onAfterAppear:ie,onAppearCancelled:ie},setup(e,{slots:t}){const n=tn(),o=oe();let i;return()=>{const s=t.default&&fe(t.default(),!0);if(!s||!s.length)return;const a=Object(r.o)(e),{mode:c}=a;const l=s[0];if(o.isLeaving)return le(l);const u=ue(l);if(!u)return le(l);const h=ce(u,a,o,n);he(u,h);const f=n.subTree,d=f&&ue(f);let p=!1;const{getTransitionKey:m}=u.type;if(m){const e=m();void 0===i?i=e:e!==i&&(i=e,p=!0)}if(d&&d.type!==Tt&&(!Bt(u,d)||p)){const e=ce(d,a,o,n);if(he(d,e),"out-in"===c)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,n.update()},le(l);"in-out"===c&&u.type!==Tt&&(e.delayLeave=(e,t,n)=>{ae(o,d)[String(d.key)]=d,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete h.delayedLeave},h.delayedLeave=n})}return l}}};function ae(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function ce(e,t,n,r){const{appear:o,mode:i,persisted:s=!1,onBeforeEnter:a,onEnter:c,onAfterEnter:u,onEnterCancelled:h,onBeforeLeave:f,onLeave:d,onAfterLeave:p,onLeaveCancelled:m,onBeforeAppear:b,onAppear:g,onAfterAppear:v,onAppearCancelled:y}=t,O=String(e.key),w=ae(n,e),E=(e,t)=>{e&&l(e,r,9,t)},_={mode:i,persisted:s,beforeEnter(t){let r=a;if(!n.isMounted){if(!o)return;r=b||a}t._leaveCb&&t._leaveCb(!0);const i=w[O];i&&Bt(e,i)&&i.el._leaveCb&&i.el._leaveCb(),E(r,[t])},enter(e){let t=c,r=u,i=h;if(!n.isMounted){if(!o)return;t=g||c,r=v||u,i=y||h}let s=!1;const a=e._enterCb=t=>{s||(s=!0,E(t?i:r,[e]),_.delayedLeave&&_.delayedLeave(),e._enterCb=void 0)};t?(t(e,a),t.length<=1&&a()):a()},leave(t,r){const o=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return r();E(f,[t]);let i=!1;const s=t._leaveCb=n=>{i||(i=!0,r(),E(n?m:p,[t]),t._leaveCb=void 0,w[o]===e&&delete w[o])};w[o]=e,d?(d(t,s),d.length<=1&&s()):s()},clone:e=>ce(e,t,n,r)};return _}function le(e){if(me(e))return(e=Xt(e)).children=null,e}function ue(e){return me(e)?e.children?e.children[0]:void 0:e}function he(e,t){6&e.shapeFlag&&e.component?he(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function fe(e,t=!1){let n=[],r=0;for(let o=0;o<e.length;o++){const i=e[o];i.type===xt?(128&i.patchFlag&&r++,n=n.concat(fe(i.children,t))):(t||i.type!==Tt)&&n.push(i)}if(r>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}function de(e){return Object(o.n)(e)?{setup:e,name:e.name}:e}const pe=e=>!!e.type.__asyncLoader;const me=e=>e.type.__isKeepAlive;RegExp,RegExp;function be(e,t){return Object(o.m)(e)?e.some(e=>be(e,t)):Object(o.B)(e)?e.split(",").indexOf(t)>-1:!!e.test&&e.test(t)}function ge(e,t){ye(e,"a",t)}function ve(e,t){ye(e,"da",t)}function ye(e,t,n=en){const r=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}e()});if(_e(t,r,n),n){let e=n.parent;for(;e&&e.parent;)me(e.parent.vnode)&&Oe(r,t,n,e),e=e.parent}}function Oe(e,t,n,r){const i=_e(t,e,r,!0);Se(()=>{Object(o.I)(r[t],i)},n)}function we(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function Ee(e){return 128&e.shapeFlag?e.ssContent:e}function _e(e,t,n=en,o=!1){if(n){const i=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...o)=>{if(n.isUnmounted)return;Object(r.g)(),nn(n);const i=l(t,n,e,o);return nn(null),Object(r.k)(),i});return o?i.unshift(s):i.push(s),s}}const xe=e=>(t,n=en)=>(!sn||"sp"===e)&&_e(e,t,n),je=xe("bm"),Te=xe("m"),Ae=xe("bu"),Ce=xe("u"),Re=xe("bum"),Se=xe("um"),Fe=xe("sp"),Le=xe("rtg"),ke=xe("rtc");function Me(e,t=en){_e("ec",e,t)}let De=!0;function Be(e){const t=Pe(e),n=e.proxy,i=e.ctx;De=!1,t.beforeCreate&&Ue(t.beforeCreate,e,"bc");const{data:s,computed:a,methods:c,watch:l,provide:u,inject:h,created:f,beforeMount:d,mounted:p,beforeUpdate:m,updated:b,activated:g,deactivated:v,beforeDestroy:y,beforeUnmount:O,destroyed:w,unmounted:E,render:_,renderTracked:x,renderTriggered:j,errorCaptured:T,serverPrefetch:A,expose:C,inheritAttrs:R,components:S,directives:F,filters:L}=t;if(h&&function(e,t,n=o.d){Object(o.m)(e)&&(e=Ge(e));for(const n in e){const r=e[n];Object(o.t)(r)?t[n]="default"in r?K(r.from||n,r.default,!0):K(r.from||n):t[n]=K(r)}}(h,i,null),c)for(const e in c){const t=c[e];Object(o.n)(t)&&(i[e]=t.bind(n))}if(s){0;const t=s.call(n,n);0,Object(o.t)(t)&&(e.data=Object(r.i)(t))}if(De=!0,a)for(const e in a){const t=a[e];0;const r=bn({get:Object(o.n)(t)?t.bind(n,n):Object(o.n)(t.get)?t.get.bind(n,n):o.d,set:!Object(o.n)(t)&&Object(o.n)(t.set)?t.set.bind(n):o.d});Object.defineProperty(i,e,{enumerable:!0,configurable:!0,get:()=>r.value,set:e=>r.value=e})}if(l)for(const e in l)Ie(l[e],i,n,e);if(u){const e=Object(o.n)(u)?u.call(n):u;Reflect.ownKeys(e).forEach(t=>{q(t,e[t])})}function k(e,t){Object(o.m)(t)?t.forEach(t=>e(t.bind(n))):t&&e(t.bind(n))}if(f&&Ue(f,e,"c"),k(je,d),k(Te,p),k(Ae,m),k(Ce,b),k(ge,g),k(ve,v),k(Me,T),k(ke,x),k(Le,j),k(Re,O),k(Se,E),k(Fe,A),Object(o.m)(C))if(C.length){const t=e.exposed||(e.exposed=Object(r.h)({}));C.forEach(e=>{t[e]=Object(r.p)(n,e)})}else e.exposed||(e.exposed=o.b);_&&e.render===o.d&&(e.render=_),null!=R&&(e.inheritAttrs=R),S&&(e.components=S),F&&(e.directives=F)}function Ue(e,t,n){l(Object(o.m)(e)?e.map(e=>e.bind(t.proxy)):e.bind(t.proxy),t,n)}function Ie(e,t,n,r){const i=r.includes(".")?ne(n,r):()=>n[r];if(Object(o.B)(e)){const n=t[e];Object(o.n)(n)&&Z(i,n)}else if(Object(o.n)(e))Z(i,e.bind(n));else if(Object(o.t)(e))if(Object(o.m)(e))e.forEach(e=>Ie(e,t,n,r));else{const r=Object(o.n)(e.handler)?e.handler.bind(n):t[e.handler];Object(o.n)(r)&&Z(i,r,e)}else 0}function Pe(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:o,optionsCache:i,config:{optionMergeStrategies:s}}=e.appContext,a=i.get(t);let c;return a?c=a:o.length||n||r?(c={},o.length&&o.forEach(e=>Ne(c,e,s,!0)),Ne(c,t,s)):c=t,i.set(t,c),c}function Ne(e,t,n,r=!1){const{mixins:o,extends:i}=t;i&&Ne(e,i,n,!0),o&&o.forEach(t=>Ne(e,t,n,!0));for(const o in t)if(r&&"expose"===o);else{const r=Ve[o]||n&&n[o];e[o]=r?r(e[o],t[o]):t[o]}return e}const Ve={data:Xe,props:We,emits:We,methods:We,computed:We,beforeCreate:ze,created:ze,beforeMount:ze,mounted:ze,beforeUpdate:ze,updated:ze,beforeDestroy:ze,destroyed:ze,activated:ze,deactivated:ze,errorCaptured:ze,serverPrefetch:ze,components:We,directives:We,watch:We,provide:Xe,inject:function(e,t){return We(Ge(e),Ge(t))}};function Xe(e,t){return t?e?function(){return Object(o.h)(Object(o.n)(e)?e.call(this,this):e,Object(o.n)(t)?t.call(this,this):t)}:t:e}function Ge(e){if(Object(o.m)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function ze(e,t){return e?[...new Set([].concat(e,t))]:t}function We(e,t){return e?Object(o.h)(Object(o.h)(Object.create(null),e),t):t}function He(e,t,n,i){const[s,a]=e.propsOptions;let c,l=!1;if(t)for(let r in t){if(Object(o.x)(r))continue;const u=t[r];let h;s&&Object(o.j)(s,h=Object(o.e)(r))?a&&a.includes(h)?(c||(c={}))[h]=u:n[h]=u:D(e.emitsOptions,r)||u!==i[r]&&(i[r]=u,l=!0)}if(a){const t=Object(r.o)(n),i=c||o.b;for(let r=0;r<a.length;r++){const c=a[r];n[c]=$e(s,t,c,i[c],e,!Object(o.j)(i,c))}}return l}function $e(e,t,n,r,i,s){const a=e[n];if(null!=a){const e=Object(o.j)(a,"default");if(e&&void 0===r){const e=a.default;if(a.type!==Function&&Object(o.n)(e)){const{propsDefaults:o}=i;n in o?r=o[n]:(nn(i),r=o[n]=e.call(null,t),nn(null))}else r=e}a[0]&&(s&&!e?r=!1:!a[1]||""!==r&&r!==Object(o.k)(n)||(r=!0))}return r}function Ye(e,t,n=!1){const r=t.propsCache,i=r.get(e);if(i)return i;const s=e.props,a={},c=[];let l=!1;if(!Object(o.n)(e)){const r=e=>{l=!0;const[n,r]=Ye(e,t,!0);Object(o.h)(a,n),r&&c.push(...r)};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}if(!s&&!l)return r.set(e,o.a),o.a;if(Object(o.m)(s))for(let e=0;e<s.length;e++){0;const t=Object(o.e)(s[e]);qe(t)&&(a[t]=o.b)}else if(s){0;for(const e in s){const t=Object(o.e)(e);if(qe(t)){const n=s[e],r=a[t]=Object(o.m)(n)||Object(o.n)(n)?{type:n}:n;if(r){const e=Qe(Boolean,r.type),n=Qe(String,r.type);r[0]=e>-1,r[1]=n<0||e<n,(e>-1||Object(o.j)(r,"default"))&&c.push(t)}}}}const u=[a,c];return r.set(e,u),u}function qe(e){return"$"!==e[0]}function Ke(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Je(e,t){return Ke(e)===Ke(t)}function Qe(e,t){return Object(o.m)(t)?t.findIndex(t=>Je(t,e)):Object(o.n)(t)&&Je(t,e)?0:-1}const Ze=e=>"_"===e[0]||"$stable"===e,et=e=>Object(o.m)(e)?e.map(Wt):[Wt(e)],tt=(e,t,n)=>{const r=X(e=>et(t(e)),n);return r._c=!1,r},nt=(e,t,n)=>{const r=e._ctx;for(const n in e){if(Ze(n))continue;const i=e[n];if(Object(o.n)(i))t[n]=tt(0,i,r);else if(null!=i){0;const e=et(i);t[n]=()=>e}}},rt=(e,t)=>{const n=et(t);e.slots.default=()=>n};function ot(e,t,n,o){const i=e.dirs,s=t&&t.dirs;for(let a=0;a<i.length;a++){const c=i[a];s&&(c.oldValue=s[a].value);let u=c.dir[o];u&&(Object(r.g)(),l(u,n,8,[e.el,c,e,t]),Object(r.k)())}}function it(){return{app:null,config:{isNativeTag:o.c,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let st=0;function at(e,t){return function(n,r=null){null==r||Object(o.t)(r)||(r=null);const i=it(),s=new Set;let a=!1;const c=i.app={_uid:st++,_component:n,_props:r,_container:null,_context:i,version:vn,get config(){return i.config},set config(e){0},use:(e,...t)=>(s.has(e)||(e&&Object(o.n)(e.install)?(s.add(e),e.install(c,...t)):Object(o.n)(e)&&(s.add(e),e(c,...t))),c),mixin:e=>(i.mixins.includes(e)||i.mixins.push(e),c),component:(e,t)=>t?(i.components[e]=t,c):i.components[e],directive:(e,t)=>t?(i.directives[e]=t,c):i.directives[e],mount(o,s,l){if(!a){const u=Nt(n,r);return u.appContext=i,s&&t?t(u,o):e(u,o,l),a=!0,c._container=o,o.__vue_app__=c,u.component.proxy}},unmount(){a&&(e(null,c._container),delete c._container.__vue_app__)},provide:(e,t)=>(i.provides[e]=t,c)};return c}}let ct=!1;const lt=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ut=e=>8===e.nodeType;function ht(e){const{mt:t,p:n,o:{patchProp:r,nextSibling:i,parentNode:s,remove:a,insert:c,createComment:l}}=e,u=(n,r,o,a,c,l=!1)=>{const b=ut(n)&&"["===n.data,g=()=>p(n,r,o,a,c,b),{type:v,ref:y,shapeFlag:O}=r,w=n.nodeType;r.el=n;let E=null;switch(v){case jt:3!==w?E=g():(n.data!==r.children&&(ct=!0,n.data=r.children),E=i(n));break;case Tt:E=8!==w||b?g():i(n);break;case At:if(1===w){E=n;const e=!r.children.length;for(let t=0;t<r.staticCount;t++)e&&(r.children+=E.outerHTML),t===r.staticCount-1&&(r.anchor=E),E=i(E);return E}E=g();break;case xt:E=b?d(n,r,o,a,c,l):g();break;default:if(1&O)E=1!==w||r.type.toLowerCase()!==n.tagName.toLowerCase()?g():h(n,r,o,a,c,l);else if(6&O){r.slotScopeIds=c;const e=s(n);if(t(r,e,null,o,a,lt(e),l),E=b?m(n):i(n),pe(r)){let t;b?(t=Nt(xt),t.anchor=E?E.previousSibling:e.lastChild):t=3===n.nodeType?Gt(""):Nt("div"),t.el=n,r.component.subTree=t}}else 64&O?E=8!==w?g():r.type.hydrate(n,r,o,a,c,l,e,f):128&O&&(E=r.type.hydrate(n,r,o,a,lt(s(n)),c,l,e,u))}return null!=y&&pt(y,null,a,r),E},h=(e,t,n,i,s,c)=>{c=c||!!t.dynamicChildren;const{props:l,patchFlag:u,shapeFlag:h,dirs:d}=t;if(-1!==u){if(d&&ot(t,null,n,"created"),l)if(!c||16&u||32&u)for(const t in l)!Object(o.x)(t)&&Object(o.u)(t)&&r(e,t,null,l[t]);else l.onClick&&r(e,"onClick",null,l.onClick);let p;if((p=l&&l.onVnodeBeforeMount)&&vt(p,n,t),d&&ot(t,null,n,"beforeMount"),((p=l&&l.onVnodeMounted)||d)&&Y(()=>{p&&vt(p,n,t),d&&ot(t,null,n,"mounted")},i),16&h&&(!l||!l.innerHTML&&!l.textContent)){let r=f(e.firstChild,t,e,n,i,s,c);for(;r;){ct=!0;const e=r;r=r.nextSibling,a(e)}}else 8&h&&e.textContent!==t.children&&(ct=!0,e.textContent=t.children)}return e.nextSibling},f=(e,t,r,o,i,s,a)=>{a=a||!!t.dynamicChildren;const c=t.children,l=c.length;for(let t=0;t<l;t++){const l=a?c[t]:c[t]=Wt(c[t]);if(e)e=u(e,l,o,i,s,a);else{if(l.type===jt&&!l.children)continue;ct=!0,n(null,l,r,null,o,i,lt(r),s)}}return e},d=(e,t,n,r,o,a)=>{const{slotScopeIds:u}=t;u&&(o=o?o.concat(u):u);const h=s(e),d=f(i(e),t,h,n,r,o,a);return d&&ut(d)&&"]"===d.data?i(t.anchor=d):(ct=!0,c(t.anchor=l("]"),h,d),d)},p=(e,t,r,o,c,l)=>{if(ct=!0,t.el=null,l){const t=m(e);for(;;){const n=i(e);if(!n||n===t)break;a(n)}}const u=i(e),h=s(e);return a(e),n(null,t,h,u,r,o,lt(h),c),u},m=e=>{let t=0;for(;e;)if((e=i(e))&&ut(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return i(e);t--}return e};return[(e,t)=>{ct=!1,u(t.firstChild,e,null,null,null),S(),ct&&console.error("Hydration completed but contains mismatches.")},u]}const ft={scheduler:j,allowRecurse:!0};const dt=Y,pt=(e,t,n,i,s=!1)=>{if(Object(o.m)(e))return void e.forEach((e,r)=>pt(e,t&&(Object(o.m)(t)?t[r]:t),n,i,s));if(pe(i)&&!s)return;const a=4&i.shapeFlag?i.component.exposed||i.component.proxy:i.el,l=s?null:a,{i:u,r:h}=e;const f=t&&t.r,d=u.refs===o.b?u.refs={}:u.refs,p=u.setupState;if(null!=f&&f!==h&&(Object(o.B)(f)?(d[f]=null,Object(o.j)(p,f)&&(p[f]=null)):Object(r.f)(f)&&(f.value=null)),Object(o.B)(h)){const e=()=>{d[h]=l,Object(o.j)(p,h)&&(p[h]=l)};l?(e.id=-1,dt(e,n)):e()}else if(Object(r.f)(h)){const e=()=>{h.value=l};l?(e.id=-1,dt(e,n)):e()}else Object(o.n)(h)&&c(h,u,12,[l,d])};function mt(e){return gt(e)}function bt(e){return gt(e,ht)}function gt(e,t){const{insert:n,remove:i,patchProp:s,forcePatchProp:a,createElement:l,createText:h,createComment:f,setText:m,setElementText:b,parentNode:g,nextSibling:v,setScopeId:y=o.d,cloneNode:O,insertStaticContent:w}=e,E=(e,t,n,r=null,o=null,i=null,s=!1,a=null,c=!1)=>{e&&!Bt(e,t)&&(r=re(e),Q(e,o,i,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:l,ref:u,shapeFlag:h}=t;switch(l){case jt:_(e,t,n,r);break;case Tt:x(e,t,n,r);break;case At:null==e&&j(t,n,r,s);break;case xt:P(e,t,n,r,o,i,s,a,c);break;default:1&h?A(e,t,n,r,o,i,s,a,c):6&h?N(e,t,n,r,o,i,s,a,c):(64&h||128&h)&&l.process(e,t,n,r,o,i,s,a,c,ie)}null!=u&&o&&pt(u,e&&e.ref,i,t||e,!t)},_=(e,t,r,o)=>{if(null==e)n(t.el=h(t.children),r,o);else{const n=t.el=e.el;t.children!==e.children&&m(n,t.children)}},x=(e,t,r,o)=>{null==e?n(t.el=f(t.children||""),r,o):t.el=e.el},j=(e,t,n,r)=>{[e.el,e.anchor]=w(e.children,t,n,r)},T=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=v(e),i(e),e=n;i(t)},A=(e,t,n,r,o,i,s,a,c)=>{s=s||"svg"===t.type,null==e?C(t,n,r,o,i,s,a,c):B(e,t,o,i,s,a,c)},C=(e,t,r,i,a,c,u,h)=>{let f,d;const{type:p,props:m,shapeFlag:g,transition:v,patchFlag:y,dirs:w}=e;if(e.el&&void 0!==O&&-1===y)f=e.el=O(e.el);else{if(f=e.el=l(e.type,c,m&&m.is,m),8&g?b(f,e.children):16&g&&L(e.children,f,null,i,a,c&&"foreignObject"!==p,u,h||!!e.dynamicChildren),w&&ot(e,null,i,"created"),m){for(const t in m)Object(o.x)(t)||s(f,t,null,m[t],c,e.children,i,a,ne);(d=m.onVnodeBeforeMount)&&vt(d,i,e)}F(f,e,e.scopeId,u,i)}w&&ot(e,null,i,"beforeMount");const E=(!a||a&&!a.pendingBranch)&&v&&!v.persisted;E&&v.beforeEnter(f),n(f,t,r),((d=m&&m.onVnodeMounted)||E||w)&&dt(()=>{d&&vt(d,i,e),E&&v.enter(f),w&&ot(e,null,i,"mounted")},a)},F=(e,t,n,r,o)=>{if(n&&y(e,n),r)for(let t=0;t<r.length;t++)y(e,r[t]);if(o){if(t===o.subTree){const t=o.vnode;F(e,t,t.scopeId,t.slotScopeIds,o.parent)}}},L=(e,t,n,r,o,i,s,a,c=0)=>{for(let l=c;l<e.length;l++){const c=e[l]=a?Ht(e[l]):Wt(e[l]);E(null,c,t,n,r,o,i,s,a)}},B=(e,t,n,r,i,c,l)=>{const u=t.el=e.el;let{patchFlag:h,dynamicChildren:f,dirs:d}=t;h|=16&e.patchFlag;const p=e.props||o.b,m=t.props||o.b;let g;if((g=m.onVnodeBeforeUpdate)&&vt(g,n,t,e),d&&ot(t,e,n,"beforeUpdate"),h>0){if(16&h)I(u,t,p,m,n,r,i);else if(2&h&&p.class!==m.class&&s(u,"class",null,m.class,i),4&h&&s(u,"style",p.style,m.style,i),8&h){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const c=o[t],l=p[c],h=m[c];(h!==l||a&&a(u,c))&&s(u,c,l,h,i,e.children,n,r,ne)}}1&h&&e.children!==t.children&&b(u,t.children)}else l||null!=f||I(u,t,p,m,n,r,i);const v=i&&"foreignObject"!==t.type;f?U(e.dynamicChildren,f,u,n,r,v,c):l||Y(e,t,u,null,n,r,v,c,!1),((g=m.onVnodeUpdated)||d)&&dt(()=>{g&&vt(g,n,t,e),d&&ot(t,e,n,"updated")},r)},U=(e,t,n,r,o,i,s)=>{for(let a=0;a<t.length;a++){const c=e[a],l=t[a],u=c.el&&(c.type===xt||!Bt(c,l)||6&c.shapeFlag||64&c.shapeFlag)?g(c.el):n;E(c,l,u,null,r,o,i,s,!0)}},I=(e,t,n,r,i,c,l)=>{if(n!==r){for(const u in r){if(Object(o.x)(u))continue;const h=r[u],f=n[u];(h!==f||a&&a(e,u))&&s(e,u,f,h,l,t.children,i,c,ne)}if(n!==o.b)for(const a in n)Object(o.x)(a)||a in r||s(e,a,n[a],null,l,t.children,i,c,ne)}},P=(e,t,r,o,i,s,a,c,l)=>{const u=t.el=e?e.el:h(""),f=t.anchor=e?e.anchor:h("");let{patchFlag:d,dynamicChildren:p,slotScopeIds:m}=t;p&&(l=!0),m&&(c=c?c.concat(m):m),null==e?(n(u,r,o),n(f,r,o),L(t.children,r,f,i,s,a,c,l)):d>0&&64&d&&p&&e.dynamicChildren?(U(e.dynamicChildren,p,r,i,s,a,c),(null!=t.key||i&&t===i.subTree)&&yt(e,t,!0)):Y(e,t,r,f,i,s,a,c,l)},N=(e,t,n,r,o,i,s,a,c)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?o.ctx.activate(t,n,r,s,c):V(t,n,r,o,i,s,c):X(e,t,c)},V=(e,t,n,i,s,a,l)=>{const h=e.component=function(e,t,n){const r=e.type,i=(t?t.appContext:e.appContext)||Qt,s={uid:Zt++,vnode:e,type:r,parent:t,appContext:i,root:null,next:null,subTree:null,update:null,render:null,proxy:null,exposed:null,withProxy:null,effects:null,provides:t?t.provides:Object.create(i.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ye(r,i),emitsOptions:M(r,i),emit:null,emitted:null,propsDefaults:o.b,inheritAttrs:r.inheritAttrs,ctx:o.b,data:o.b,props:o.b,attrs:o.b,slots:o.b,refs:o.b,setupState:o.b,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};s.ctx={_:s};return s.root=t?t.root:s,s.emit=k.bind(null,s),s}(e,i,s);if(me(e)&&(h.ctx.renderer=ie),function(e,t=!1){sn=t;const{props:n,children:i}=e.vnode,s=rn(e);(function(e,t,n,i=!1){const s={},a={};Object(o.g)(a,Ut,1),e.propsDefaults=Object.create(null),He(e,t,s,a);for(const t in e.propsOptions[0])t in s||(s[t]=void 0);n?e.props=i?s:Object(r.l)(s):e.type.props?e.props=s:e.props=a,e.attrs=a})(e,n,s,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=Object(r.o)(t),Object(o.g)(t,"_",n)):nt(t,e.slots={})}else e.slots={},t&&rt(e,t);Object(o.g)(e.slots,Ut,1)})(e,i);const a=s?function(e,t){const n=e.type;0;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,Kt),!1;const{setup:i}=n;if(i){const n=e.setupContext=i.length>1?un(e):null;en=e,Object(r.g)();const s=c(i,e,0,[e.props,n]);if(Object(r.k)(),en=null,Object(o.w)(s)){if(t)return s.then(n=>{an(e,n,t)}).catch(t=>{u(t,e,0)});e.asyncDep=s}else an(e,s,t)}else ln(e,t)}(e,t):void 0;sn=!1}(h),h.asyncDep){if(s&&s.registerDep(h,z),!e.el){const e=h.subTree=Nt(Tt);x(null,e,t,n)}}else z(h,e,t,n,s,a,l)},X=(e,t,n)=>{const r=t.component=e.component;if(function(e,t,n){const{props:r,children:o,component:i}=e,{props:s,children:a,patchFlag:c}=t,l=i.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&c>=0))return!(!o&&!a||a&&a.$stable)||r!==s&&(r?!s||H(r,s,l):!!s);if(1024&c)return!0;if(16&c)return r?H(r,s,l):!!s;if(8&c){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(s[n]!==r[n]&&!D(l,n))return!0}}return!1}(e,t,n)){if(r.asyncDep&&!r.asyncResolved)return void W(r,t,n);r.next=t,function(e){const t=d.indexOf(e);t>p&&d.splice(t,1)}(r.update),r.update()}else t.component=e.component,t.el=e.el,r.vnode=t},z=(e,t,n,i,s,a,c)=>{e.update=Object(r.b)((function(){if(e.isMounted){let t,{next:n,bu:r,u:i,parent:l,vnode:u}=e,h=n;0,n?(n.el=u.el,W(e,n,c)):n=u,r&&Object(o.l)(r),(t=n.props&&n.props.onVnodeBeforeUpdate)&&vt(t,l,n,u);const f=G(e);0;const d=e.subTree;e.subTree=f,E(d,f,g(d.el),re(d),e,s,a),n.el=f.el,null===h&&$(e,f.el),i&&dt(i,s),(t=n.props&&n.props.onVnodeUpdated)&&dt(()=>vt(t,l,n,u),s)}else{let r;const{el:c,props:l}=t,{bm:u,m:h,parent:f}=e;if(u&&Object(o.l)(u),(r=l&&l.onVnodeBeforeMount)&&vt(r,f,t),c&&ae){const n=()=>{e.subTree=G(e),ae(c,e.subTree,e,s,null)};pe(t)?t.type.__asyncLoader().then(()=>!e.isUnmounted&&n()):n()}else{0;const r=e.subTree=G(e);0,E(null,r,n,i,e,s,a),t.el=r.el}if(h&&dt(h,s),r=l&&l.onVnodeMounted){const e=t;dt(()=>vt(r,f,e),s)}256&t.shapeFlag&&e.a&&dt(e.a,s),e.isMounted=!0,t=n=i=null}}),ft)},W=(e,t,n)=>{t.component=e;const i=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,i){const{props:s,attrs:a,vnode:{patchFlag:c}}=e,l=Object(r.o)(s),[u]=e.propsOptions;let h=!1;if(!(i||c>0)||16&c){let r;He(e,t,s,a)&&(h=!0);for(const i in l)t&&(Object(o.j)(t,i)||(r=Object(o.k)(i))!==i&&Object(o.j)(t,r))||(u?!n||void 0===n[i]&&void 0===n[r]||(s[i]=$e(u,l,i,void 0,e,!0)):delete s[i]);if(a!==l)for(const e in a)t&&Object(o.j)(t,e)||(delete a[e],h=!0)}else if(8&c){const n=e.vnode.dynamicProps;for(let r=0;r<n.length;r++){let i=n[r];const c=t[i];if(u)if(Object(o.j)(a,i))c!==a[i]&&(a[i]=c,h=!0);else{const t=Object(o.e)(i);s[t]=$e(u,l,t,c,e,!1)}else c!==a[i]&&(a[i]=c,h=!0)}}h&&Object(r.r)(e,"set","$attrs")}(e,t.props,i,n),((e,t,n)=>{const{vnode:r,slots:i}=e;let s=!0,a=o.b;if(32&r.shapeFlag){const e=t._;e?n&&1===e?s=!1:(Object(o.h)(i,t),n||1!==e||delete i._):(s=!t.$stable,nt(t,i)),a=t}else t&&(rt(e,t),a={default:1});if(s)for(const e in i)Ze(e)||e in a||delete i[e]})(e,t.children,n),Object(r.g)(),R(void 0,e.update),Object(r.k)()},Y=(e,t,n,r,o,i,s,a,c=!1)=>{const l=e&&e.children,u=e?e.shapeFlag:0,h=t.children,{patchFlag:f,shapeFlag:d}=t;if(f>0){if(128&f)return void K(l,h,n,r,o,i,s,a,c);if(256&f)return void q(l,h,n,r,o,i,s,a,c)}8&d?(16&u&&ne(l,o,i),h!==l&&b(n,h)):16&u?16&d?K(l,h,n,r,o,i,s,a,c):ne(l,o,i,!0):(8&u&&b(n,""),16&d&&L(h,n,r,o,i,s,a,c))},q=(e,t,n,r,i,s,a,c,l)=>{e=e||o.a,t=t||o.a;const u=e.length,h=t.length,f=Math.min(u,h);let d;for(d=0;d<f;d++){const r=t[d]=l?Ht(t[d]):Wt(t[d]);E(e[d],r,n,null,i,s,a,c,l)}u>h?ne(e,i,s,!0,!1,f):L(t,n,r,i,s,a,c,l,f)},K=(e,t,n,r,i,s,a,c,l)=>{let u=0;const h=t.length;let f=e.length-1,d=h-1;for(;u<=f&&u<=d;){const r=e[u],o=t[u]=l?Ht(t[u]):Wt(t[u]);if(!Bt(r,o))break;E(r,o,n,null,i,s,a,c,l),u++}for(;u<=f&&u<=d;){const r=e[f],o=t[d]=l?Ht(t[d]):Wt(t[d]);if(!Bt(r,o))break;E(r,o,n,null,i,s,a,c,l),f--,d--}if(u>f){if(u<=d){const e=d+1,o=e<h?t[e].el:r;for(;u<=d;)E(null,t[u]=l?Ht(t[u]):Wt(t[u]),n,o,i,s,a,c,l),u++}}else if(u>d)for(;u<=f;)Q(e[u],i,s,!0),u++;else{const p=u,m=u,b=new Map;for(u=m;u<=d;u++){const e=t[u]=l?Ht(t[u]):Wt(t[u]);null!=e.key&&b.set(e.key,u)}let g,v=0;const y=d-m+1;let O=!1,w=0;const _=new Array(y);for(u=0;u<y;u++)_[u]=0;for(u=p;u<=f;u++){const r=e[u];if(v>=y){Q(r,i,s,!0);continue}let o;if(null!=r.key)o=b.get(r.key);else for(g=m;g<=d;g++)if(0===_[g-m]&&Bt(r,t[g])){o=g;break}void 0===o?Q(r,i,s,!0):(_[o-m]=u+1,o>=w?w=o:O=!0,E(r,t[o],n,null,i,s,a,c,l),v++)}const x=O?function(e){const t=e.slice(),n=[0];let r,o,i,s,a;const c=e.length;for(r=0;r<c;r++){const c=e[r];if(0!==c){if(o=n[n.length-1],e[o]<c){t[r]=o,n.push(r);continue}for(i=0,s=n.length-1;i<s;)a=(i+s)/2|0,e[n[a]]<c?i=a+1:s=a;c<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}i=n.length,s=n[i-1];for(;i-- >0;)n[i]=s,s=t[s];return n}(_):o.a;for(g=x.length-1,u=y-1;u>=0;u--){const e=m+u,o=t[e],f=e+1<h?t[e+1].el:r;0===_[u]?E(null,o,n,f,i,s,a,c,l):O&&(g<0||u!==x[g]?J(o,n,f,2):g--)}}},J=(e,t,r,o,i=null)=>{const{el:s,type:a,transition:c,children:l,shapeFlag:u}=e;if(6&u)return void J(e.component.subTree,t,r,o);if(128&u)return void e.suspense.move(t,r,o);if(64&u)return void a.move(e,t,r,ie);if(a===xt){n(s,t,r);for(let e=0;e<l.length;e++)J(l[e],t,r,o);return void n(e.anchor,t,r)}if(a===At)return void(({el:e,anchor:t},r,o)=>{let i;for(;e&&e!==t;)i=v(e),n(e,r,o),e=i;n(t,r,o)})(e,t,r);if(2!==o&&1&u&&c)if(0===o)c.beforeEnter(s),n(s,t,r),dt(()=>c.enter(s),i);else{const{leave:e,delayLeave:o,afterLeave:i}=c,a=()=>n(s,t,r),l=()=>{e(s,()=>{a(),i&&i()})};o?o(s,a,l):l()}else n(s,t,r)},Q=(e,t,n,r=!1,o=!1)=>{const{type:i,props:s,ref:a,children:c,dynamicChildren:l,shapeFlag:u,patchFlag:h,dirs:f}=e;if(null!=a&&pt(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const d=1&u&&f;let p;if((p=s&&s.onVnodeBeforeUnmount)&&vt(p,t,e),6&u)te(e.component,n,r);else{if(128&u)return void e.suspense.unmount(n,r);d&&ot(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,o,ie,r):l&&(i!==xt||h>0&&64&h)?ne(l,t,n,!1,!0):(i===xt&&(128&h||256&h)||!o&&16&u)&&ne(c,t,n),r&&Z(e)}((p=s&&s.onVnodeUnmounted)||d)&&dt(()=>{p&&vt(p,t,e),d&&ot(e,null,t,"unmounted")},n)},Z=e=>{const{type:t,el:n,anchor:r,transition:o}=e;if(t===xt)return void ee(n,r);if(t===At)return void T(e);const s=()=>{i(n),o&&!o.persisted&&o.afterLeave&&o.afterLeave()};if(1&e.shapeFlag&&o&&!o.persisted){const{leave:t,delayLeave:r}=o,i=()=>t(n,s);r?r(e.el,s,i):i()}else s()},ee=(e,t)=>{let n;for(;e!==t;)n=v(e),i(e),e=n;i(t)},te=(e,t,n)=>{const{bum:i,effects:s,update:a,subTree:c,um:l}=e;if(i&&Object(o.l)(i),s)for(let e=0;e<s.length;e++)Object(r.n)(s[e]);a&&(Object(r.n)(a),Q(c,e,t,n)),l&&dt(l,t),dt(()=>{e.isUnmounted=!0},t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},ne=(e,t,n,r=!1,o=!1,i=0)=>{for(let s=i;s<e.length;s++)Q(e[s],t,n,r,o)},re=e=>6&e.shapeFlag?re(e.component.subTree):128&e.shapeFlag?e.suspense.next():v(e.anchor||e.el),oe=(e,t,n)=>{null==e?t._vnode&&Q(t._vnode,null,null,!0):E(t._vnode||null,e,t,null,null,null,n),S(),t._vnode=e},ie={p:E,um:Q,m:J,r:Z,mt:V,mc:L,pc:Y,pbc:U,n:re,o:e};let se,ae;return t&&([se,ae]=t(ie)),{render:oe,hydrate:se,createApp:at(oe,se)}}function vt(e,t,n,r=null){l(e,t,7,[n,r])}function yt(e,t,n=!1){const r=e.children,i=t.children;if(Object(o.m)(r)&&Object(o.m)(i))for(let e=0;e<r.length;e++){const t=r[e];let o=i[e];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=i[e]=Ht(i[e]),o.el=t.el),n||yt(t,o))}}function Ot(e,t){return Et("components",e,!0,t)||e}const wt=Symbol();function Et(e,t,n=!0,r=!1){const i=B||en;if(i){const n=i.type;if("components"===e){const e=dn(n);if(e&&(e===t||e===Object(o.e)(t)||e===Object(o.f)(Object(o.e)(t))))return n}const s=_t(i[e]||n[e],t)||_t(i.appContext[e],t);return!s&&r?n:s}}function _t(e,t){return e&&(e[t]||e[Object(o.e)(t)]||e[Object(o.f)(Object(o.e)(t))])}const xt=Symbol(void 0),jt=Symbol(void 0),Tt=Symbol(void 0),At=Symbol(void 0),Ct=[];let Rt=null;function St(e=!1){Ct.push(Rt=e?null:[])}function Ft(){Ct.pop(),Rt=Ct[Ct.length-1]||null}let Lt=1;function kt(e){Lt+=e}function Mt(e,t,n,r,i){const s=Nt(e,t,n,r,i,!0);return s.dynamicChildren=Lt>0?Rt||o.a:null,Ft(),Lt>0&&Rt&&Rt.push(s),s}function Dt(e){return!!e&&!0===e.__v_isVNode}function Bt(e,t){return e.type===t.type&&e.key===t.key}const Ut="__vInternal",It=({key:e})=>null!=e?e:null,Pt=({ref:e})=>null!=e?Object(o.B)(e)||Object(r.f)(e)||Object(o.n)(e)?{i:B,r:e}:e:null,Nt=Vt;function Vt(e,t=null,n=null,i=0,s=null,a=!1){if(e&&e!==wt||(e=Tt),Dt(e)){const r=Xt(e,t,!0);return n&&$t(r,n),r}if(mn(e)&&(e=e.__vccOpts),t){(Object(r.c)(t)||Ut in t)&&(t=Object(o.h)({},t));let{class:e,style:n}=t;e&&!Object(o.B)(e)&&(t.class=Object(o.G)(e)),Object(o.t)(n)&&(Object(r.c)(n)&&!Object(o.m)(n)&&(n=Object(o.h)({},n)),t.style=Object(o.H)(n))}const c=Object(o.B)(e)?1:(e=>e.__isSuspense)(e)?128:(e=>e.__isTeleport)(e)?64:Object(o.t)(e)?4:Object(o.n)(e)?2:0;const l={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&It(t),ref:t&&Pt(t),scopeId:U,slotScopeIds:null,children:null,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:c,patchFlag:i,dynamicProps:s,dynamicChildren:null,appContext:null};return $t(l,n),128&c&&e.normalize(l),Lt>0&&!a&&Rt&&(i>0||6&c)&&32!==i&&Rt.push(l),l}function Xt(e,t,n=!1){const{props:r,ref:i,patchFlag:s,children:a}=e,c=t?function(...e){const t=Object(o.h)({},e[0]);for(let n=1;n<e.length;n++){const r=e[n];for(const e in r)if("class"===e)t.class!==r.class&&(t.class=Object(o.G)([t.class,r.class]));else if("style"===e)t.style=Object(o.H)([t.style,r.style]);else if(Object(o.u)(e)){const n=t[e],o=r[e];n!==o&&(t[e]=n?[].concat(n,o):o)}else""!==e&&(t[e]=r[e])}return t}(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&It(c),ref:t&&t.ref?n&&i?Object(o.m)(i)?i.concat(Pt(t)):[i,Pt(t)]:Pt(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==xt?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Xt(e.ssContent),ssFallback:e.ssFallback&&Xt(e.ssFallback),el:e.el,anchor:e.anchor}}function Gt(e=" ",t=0){return Nt(jt,null,e,t)}function zt(e="",t=!1){return t?(St(),Mt(Tt,null,e)):Nt(Tt,null,e)}function Wt(e){return null==e||"boolean"==typeof e?Nt(Tt):Object(o.m)(e)?Nt(xt,null,e.slice()):"object"==typeof e?Ht(e):Nt(jt,null,String(e))}function Ht(e){return null===e.el?e:Xt(e)}function $t(e,t){let n=0;const{shapeFlag:r}=e;if(null==t)t=null;else if(Object(o.m)(t))n=16;else if("object"==typeof t){if(1&r||64&r){const n=t.default;return void(n&&(n._c&&(n._d=!1),$t(e,n()),n._c&&(n._d=!0)))}{n=32;const r=t._;r||Ut in t?3===r&&B&&(1===B.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=B}}else Object(o.n)(t)?(t={default:t,_ctx:B},n=32):(t=String(t),64&r?(n=16,t=[Gt(t)]):n=8);e.children=t,e.shapeFlag|=n}const Yt=e=>e?rn(e)?e.exposed?e.exposed:e.proxy:Yt(e.parent):null,qt=Object(o.h)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Yt(e.parent),$root:e=>Yt(e.root),$emit:e=>e.emit,$options:e=>Pe(e),$forceUpdate:e=>()=>j(e.update),$nextTick:e=>x.bind(e.proxy),$watch:e=>te.bind(e)}),Kt={get({_:e},t){const{ctx:n,setupState:i,data:s,props:a,accessCache:c,type:l,appContext:u}=e;if("__v_skip"===t)return!0;let h;if("$"!==t[0]){const r=c[t];if(void 0!==r)switch(r){case 0:return i[t];case 1:return s[t];case 3:return n[t];case 2:return a[t]}else{if(i!==o.b&&Object(o.j)(i,t))return c[t]=0,i[t];if(s!==o.b&&Object(o.j)(s,t))return c[t]=1,s[t];if((h=e.propsOptions[0])&&Object(o.j)(h,t))return c[t]=2,a[t];if(n!==o.b&&Object(o.j)(n,t))return c[t]=3,n[t];De&&(c[t]=4)}}const f=qt[t];let d,p;return f?("$attrs"===t&&Object(r.q)(e,"get",t),f(e)):(d=l.__cssModules)&&(d=d[t])?d:n!==o.b&&Object(o.j)(n,t)?(c[t]=3,n[t]):(p=u.config.globalProperties,Object(o.j)(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:r,setupState:i,ctx:s}=e;if(i!==o.b&&Object(o.j)(i,t))i[t]=n;else if(r!==o.b&&Object(o.j)(r,t))r[t]=n;else if(Object(o.j)(e.props,t))return!1;return("$"!==t[0]||!(t.slice(1)in e))&&(s[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:i,propsOptions:s}},a){let c;return void 0!==n[a]||e!==o.b&&Object(o.j)(e,a)||t!==o.b&&Object(o.j)(t,a)||(c=s[0])&&Object(o.j)(c,a)||Object(o.j)(r,a)||Object(o.j)(qt,a)||Object(o.j)(i.config.globalProperties,a)}};const Jt=Object(o.h)({},Kt,{get(e,t){if(t!==Symbol.unscopables)return Kt.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!Object(o.o)(t)});const Qt=it();let Zt=0;let en=null;const tn=()=>en||B,nn=e=>{en=e};function rn(e){return 4&e.vnode.shapeFlag}let on,sn=!1;function an(e,t,n){Object(o.n)(t)?e.render=t:Object(o.t)(t)&&(e.setupState=Object(r.h)(t)),ln(e,n)}const cn=()=>!on;function ln(e,t,n){const i=e.type;if(!e.render){if(on&&!i.render){const t=i.template;if(t){0;const{isCustomElement:n,compilerOptions:r}=e.appContext.config,{delimiters:s,compilerOptions:a}=i,c=Object(o.h)(Object(o.h)({isCustomElement:n,delimiters:s},r),a);i.render=on(t,c)}}e.render=i.render||o.d,e.render._rc&&(e.withProxy=new Proxy(e.ctx,Jt))}en=e,Object(r.g)(),Be(e),Object(r.k)(),en=null}function un(e){const t=t=>{e.exposed=Object(r.h)(t)};return{attrs:e.attrs,slots:e.slots,emit:e.emit,expose:t}}function hn(e,t=en){t&&(t.effects||(t.effects=[])).push(e)}const fn=/(?:^|[-_])(\w)/g;function dn(e){return Object(o.n)(e)&&e.displayName||e.name}function pn(e,t,n=!1){let r=dn(t);if(!r&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(r=e[1])}if(!r&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};r=n(e.components||e.parent.type.components)||n(e.appContext.components)}return r?r.replace(fn,e=>e.toUpperCase()).replace(/[-_]/g,""):n?"App":"Anonymous"}function mn(e){return Object(o.n)(e)&&"__vccOpts"in e}function bn(e){const t=Object(r.a)(e);return hn(t.effect),t}function gn(e,t,n){const r=arguments.length;return 2===r?Object(o.t)(t)&&!Object(o.m)(t)?Dt(t)?Nt(e,null,[t]):Nt(e,t):Nt(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):3===r&&Dt(n)&&(n=[n]),Nt(e,t,n))}Symbol("");const vn="3.1.1"},function(e,t,n){"use strict";n.d(t,"a",(function(){return X}));var r=n(0),o=n(2);n(1);const i="http://www.w3.org/2000/svg",s="undefined"!=typeof document?document:null;let a,c;const l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const o=t?s.createElementNS(i,e):s.createElement(e,n?{is:n}:void 0);return"select"===e&&r&&null!=r.multiple&&o.setAttribute("multiple",r.multiple),o},createText:e=>s.createTextNode(e),createComment:e=>s.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>s.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,r){const o=r?c||(c=s.createElementNS(i,"svg")):a||(a=s.createElement("div"));o.innerHTML=e;const u=o.firstChild;let h=u,f=h;for(;h;)f=h,l.insert(h,t,n),h=o.firstChild;return[u,f]}};const u=/\s*!important$/;function h(e,t,n){if(Object(r.m)(n))n.forEach(n=>h(e,t,n));else if(t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=d[t];if(n)return n;let o=Object(r.e)(t);if("filter"!==o&&o in e)return d[t]=o;o=Object(r.f)(o);for(let n=0;n<f.length;n++){const r=f[n]+o;if(r in e)return d[t]=r}return t}(e,t);u.test(n)?e.setProperty(Object(r.k)(o),n.replace(u,""),"important"):e[o]=n}}const f=["Webkit","Moz","ms"],d={};const p="http://www.w3.org/1999/xlink";let m=Date.now,b=!1;if("undefined"!=typeof window){m()>document.createEvent("Event").timeStamp&&(m=()=>performance.now());const e=navigator.userAgent.match(/firefox\/(\d+)/i);b=!!(e&&Number(e[1])<=53)}let g=0;const v=Promise.resolve(),y=()=>{g=0};function O(e,t,n,r){e.addEventListener(t,n,r)}function w(e,t,n,i,s=null){const a=e._vei||(e._vei={}),c=a[t];if(i&&c)c.value=i;else{const[n,l]=function(e){let t;if(E.test(e)){let n;for(t={};n=e.match(E);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Object(r.k)(e.slice(2)),t]}(t);if(i){O(e,n,a[t]=function(e,t){const n=e=>{const i=e.timeStamp||m();(b||i>=n.attached-1)&&Object(o.c)(function(e,t){if(Object(r.m)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(e=>t=>!t._stopped&&e(t))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=(()=>g||(v.then(y),g=m()))(),n}(i,s),l)}else c&&(!function(e,t,n,r){e.removeEventListener(t,n,r)}(e,n,c,l),a[t]=void 0)}}const E=/(?:Once|Passive|Capture)$/;const _=/^on[a-z]/;const x=(e,{slots:t})=>Object(o.n)(o.a,C(e),t);x.displayName="Transition";const j={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},T=(x.props=Object(r.h)({},o.a.props,j),(e,t=[])=>{Object(r.m)(e)?e.forEach(e=>e(...t)):e&&e(...t)}),A=e=>!!e&&(Object(r.m)(e)?e.some(e=>e.length>1):e.length>1);function C(e){const t={};for(const n in e)n in j||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:i,enterFromClass:s=n+"-enter-from",enterActiveClass:a=n+"-enter-active",enterToClass:c=n+"-enter-to",appearFromClass:l=s,appearActiveClass:u=a,appearToClass:h=c,leaveFromClass:f=n+"-leave-from",leaveActiveClass:d=n+"-leave-active",leaveToClass:p=n+"-leave-to"}=e,m=function(e){if(null==e)return null;if(Object(r.t)(e))return[R(e.enter),R(e.leave)];{const t=R(e);return[t,t]}}(i),b=m&&m[0],g=m&&m[1],{onBeforeEnter:v,onEnter:y,onEnterCancelled:O,onLeave:w,onLeaveCancelled:E,onBeforeAppear:_=v,onAppear:x=y,onAppearCancelled:C=O}=t,k=(e,t,n)=>{F(e,t?h:c),F(e,t?u:a),n&&n()},D=(e,t)=>{F(e,p),F(e,d),t&&t()},B=e=>(t,n)=>{const r=e?x:y,i=()=>k(t,e,n);T(r,[t,i]),L(()=>{F(t,e?l:s),S(t,e?h:c),A(r)||M(t,o,b,i)})};return Object(r.h)(t,{onBeforeEnter(e){T(v,[e]),S(e,s),S(e,a)},onBeforeAppear(e){T(_,[e]),S(e,l),S(e,u)},onEnter:B(!1),onAppear:B(!0),onLeave(e,t){const n=()=>D(e,t);S(e,f),I(),S(e,d),L(()=>{F(e,f),S(e,p),A(w)||M(e,o,g,n)}),T(w,[e,n])},onEnterCancelled(e){k(e,!1),T(O,[e])},onAppearCancelled(e){k(e,!0),T(C,[e])},onLeaveCancelled(e){D(e),T(E,[e])}})}function R(e){return Object(r.L)(e)}function S(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.add(t)),(e._vtc||(e._vtc=new Set)).add(t)}function F(e,t){t.split(/\s+/).forEach(t=>t&&e.classList.remove(t));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function L(e){requestAnimationFrame(()=>{requestAnimationFrame(e)})}let k=0;function M(e,t,n,r){const o=e._endId=++k,i=()=>{o===e._endId&&r()};if(n)return setTimeout(i,n);const{type:s,timeout:a,propCount:c}=D(e,t);if(!s)return r();const l=s+"end";let u=0;const h=()=>{e.removeEventListener(l,f),i()},f=t=>{t.target===e&&++u>=c&&h()};setTimeout(()=>{u<c&&h()},a+1),e.addEventListener(l,f)}function D(e,t){const n=window.getComputedStyle(e),r=e=>(n[e]||"").split(", "),o=r("transitionDelay"),i=r("transitionDuration"),s=B(o,i),a=r("animationDelay"),c=r("animationDuration"),l=B(a,c);let u=null,h=0,f=0;"transition"===t?s>0&&(u="transition",h=s,f=i.length):"animation"===t?l>0&&(u="animation",h=l,f=c.length):(h=Math.max(s,l),u=h>0?s>l?"transition":"animation":null,f=u?"transition"===u?i.length:c.length:0);return{type:u,timeout:h,propCount:f,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function B(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map((t,n)=>U(t)+U(e[n])))}function U(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function I(){return document.body.offsetHeight}new WeakMap,new WeakMap;const P=Object(r.h)({patchProp:(e,t,n,o,i=!1,s,a,c,l)=>{switch(t){case"class":!function(e,t,n){if(null==t&&(t=""),n)e.setAttribute("class",t);else{const n=e._vtc;n&&(t=(t?[t,...n]:[...n]).join(" ")),e.className=t}}(e,o,i);break;case"style":!function(e,t,n){const o=e.style;if(n)if(Object(r.B)(n)){if(t!==n){const t=o.display;o.cssText=n,"_vod"in e&&(o.display=t)}}else{for(const e in n)h(o,e,n[e]);if(t&&!Object(r.B)(t))for(const e in t)null==n[e]&&h(o,e,"")}else e.removeAttribute("style")}(e,n,o);break;default:Object(r.u)(t)?Object(r.s)(t)||w(e,t,0,o,a):function(e,t,n,o){if(o)return"innerHTML"===t||!!(t in e&&_.test(t)&&Object(r.n)(n));if("spellcheck"===t||"draggable"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if(_.test(t)&&Object(r.B)(n))return!1;return t in e}(e,t,o,i)?function(e,t,n,r,o,i,s){if("innerHTML"===t||"textContent"===t)return r&&s(r,o,i),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName){e._value=n;const r=null==n?"":n;return e.value!==r&&(e.value=r),void(null==n&&e.removeAttribute(t))}if(""===n||null==n){const r=typeof e[t];if(""===n&&"boolean"===r)return void(e[t]=!0);if(null==n&&"string"===r)return e[t]="",void e.removeAttribute(t);if("number"===r)return e[t]=0,void e.removeAttribute(t)}try{e[t]=n}catch(e){0}}(e,t,o,s,a,c,l):("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),function(e,t,n,o,i){if(o&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(p,t.slice(6,t.length)):e.setAttributeNS(p,t,n);else{const o=Object(r.A)(t);null==n||o&&!1===n?e.removeAttribute(t):e.setAttribute(t,o?"":n)}}(e,t,o,i))}},forcePatchProp:(e,t)=>"value"===t},l);let N;function V(){return N||(N=Object(o.h)(P))}const X=(...e)=>{const t=V().createApp(...e);const{mount:n}=t;return t.mount=e=>{const o=G(e);if(!o)return;const i=t._component;Object(r.n)(i)||i.render||i.template||(i.template=o.innerHTML),o.innerHTML="";const s=n(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),s},t};function G(e){if(Object(r.B)(e)){return document.querySelector(e)}return e}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(s=r,a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(c," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}var s,a,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return Fe})),n.d(t,"b",(function(){return B}));var r=n(2),o=n(1);n(13);
/*!
  * vue-router v4.0.9
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */
const i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag,s=e=>i?Symbol(e):"_vr_"+e,a=s("rvlm"),c=s("rvd"),l=s("r"),u=s("rl"),h=s("rvl"),f="undefined"!=typeof window;const d=Object.assign;function p(e,t){const n={};for(const r in t){const o=t[r];n[r]=Array.isArray(o)?o.map(e):e(o)}return n}let m=()=>{};const b=/\/$/;function g(e,t,n="/"){let r,o={},i="",s="";const a=t.indexOf("?"),c=t.indexOf("#",a>-1?a:0);return a>-1&&(r=t.slice(0,a),i=t.slice(a+1,c>-1?c:t.length),o=e(i)),c>-1&&(r=r||t.slice(0,c),s=t.slice(c,t.length)),r=function(e,t){if(e.startsWith("/"))return e;0;if(!e)return t;const n=t.split("/"),r=e.split("/");let o,i,s=n.length-1;for(o=0;o<r.length;o++)if(i=r[o],1!==s&&"."!==i){if(".."!==i)break;s--}return n.slice(0,s).join("/")+"/"+r.slice(o-(o===r.length?1:0)).join("/")}(null!=r?r:t,n),{fullPath:r+(i&&"?")+i+s,path:r,query:o,hash:s}}function v(e,t){return t&&e.toLowerCase().startsWith(t.toLowerCase())?e.slice(t.length)||"/":e}function y(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function O(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(let n in e)if(!w(e[n],t[n]))return!1;return!0}function w(e,t){return Array.isArray(e)?E(e,t):Array.isArray(t)?E(t,e):e===t}function E(e,t){return Array.isArray(t)?e.length===t.length&&e.every((e,n)=>e===t[n]):1===e.length&&e[0]===t}var _,x;!function(e){e.pop="pop",e.push="push"}(_||(_={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(x||(x={}));function j(e){if(!e)if(f){const t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),e.replace(b,"")}const T=/^[^#]+#/;function A(e,t){return e.replace(T,"#")+t}const C=()=>({left:window.pageXOffset,top:window.pageYOffset});function R(e){let t;if("el"in e){let n=e.el;const r="string"==typeof n&&n.startsWith("#");0;const o="string"==typeof n?r?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!o)return;t=function(e,t){const n=document.documentElement.getBoundingClientRect(),r=e.getBoundingClientRect();return{behavior:t.behavior,left:r.left-n.left-(t.left||0),top:r.top-n.top-(t.top||0)}}(o,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(null!=t.left?t.left:window.pageXOffset,null!=t.top?t.top:window.pageYOffset)}function S(e,t){return(history.state?history.state.position-t:-1)+e}const F=new Map;let L=()=>location.protocol+"//"+location.host;function k(e,t){const{pathname:n,search:r,hash:o}=t,i=e.indexOf("#");if(i>-1){let t=o.includes(e.slice(i))?e.slice(i).length:1,n=o.slice(t);return"/"!==n[0]&&(n="/"+n),v(n,"")}return v(n,e)+r+o}function M(e,t,n,r=!1,o=!1){return{back:e,current:t,forward:n,replaced:r,position:window.history.length,scroll:o?C():null}}function D(e){const t=function(e){const{history:t,location:n}=window;let r={value:k(e,n)},o={value:t.state};function i(r,i,s){const a=e.indexOf("#"),c=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+r:L()+e+r;try{t[s?"replaceState":"pushState"](i,"",c),o.value=i}catch(e){console.error(e),n[s?"replace":"assign"](c)}}return o.value||i(r.value,{back:null,current:r.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:r,state:o,push:function(e,n){const s=d({},o.value,t.state,{forward:e,scroll:C()});i(s.current,s,!0),i(e,d({},M(r.value,e,null),{position:s.position+1},n),!1),r.value=e},replace:function(e,n){i(e,d({},t.state,M(o.value.back,e,o.value.forward,!0),n,{position:o.value.position}),!0),r.value=e}}}(e=j(e)),n=function(e,t,n,r){let o=[],i=[],s=null;const a=({state:i})=>{const a=k(e,location),c=n.value,l=t.value;let u=0;if(i){if(n.value=a,t.value=i,s&&s===c)return void(s=null);u=l?i.position-l.position:0}else r(a);o.forEach(e=>{e(n.value,c,{delta:u,type:_.pop,direction:u?u>0?x.forward:x.back:x.unknown})})};function c(){const{history:e}=window;e.state&&e.replaceState(d({},e.state,{scroll:C()}),"")}return window.addEventListener("popstate",a),window.addEventListener("beforeunload",c),{pauseListeners:function(){s=n.value},listen:function(e){o.push(e);const t=()=>{const t=o.indexOf(e);t>-1&&o.splice(t,1)};return i.push(t),t},destroy:function(){for(const e of i)e();i=[],window.removeEventListener("popstate",a),window.removeEventListener("beforeunload",c)}}}(e,t.state,t.location,t.replace);const r=d({location:"",base:e,go:function(e,t=!0){t||n.pauseListeners(),history.go(e)},createHref:A.bind(null,e)},t,n);return Object.defineProperty(r,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(r,"state",{enumerable:!0,get:()=>t.state.value}),r}function B(e){return(e=location.host?e||location.pathname+location.search:"").includes("#")||(e+="#"),D(e)}function U(e){return"string"==typeof e||"symbol"==typeof e}const I={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},P=s("nf");var N;!function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(N||(N={}));function V(e,t){return d(new Error,{type:e,[P]:!0},t)}function X(e,t){return e instanceof Error&&P in e&&(null==t||!!(e.type&t))}const G={sensitive:!1,strict:!1,start:!0,end:!0},z=/[.+*?^${}()[\]/\\]/g;function W(e,t){let n=0;for(;n<e.length&&n<t.length;){const r=t[n]-e[n];if(r)return r;n++}return e.length<t.length?1===e.length&&80===e[0]?-1:1:e.length>t.length?1===t.length&&80===t[0]?1:-1:0}function H(e,t){let n=0;const r=e.score,o=t.score;for(;n<r.length&&n<o.length;){const e=W(r[n],o[n]);if(e)return e;n++}return o.length-r.length}const $={type:0,value:""},Y=/[a-zA-Z0-9_]/;function q(e,t,n){const r=function(e,t){const n=d({},G,t);let r=[],o=n.start?"^":"";const i=[];for(const t of e){const e=t.length?[]:[90];n.strict&&!t.length&&(o+="/");for(let r=0;r<t.length;r++){const s=t[r];let a=40+(n.sensitive?.25:0);if(0===s.type)r||(o+="/"),o+=s.value.replace(z,"\\$&"),a+=40;else if(1===s.type){const{value:e,repeatable:n,optional:c,regexp:l}=s;i.push({name:e,repeatable:n,optional:c});const u=l||"[^/]+?";if("[^/]+?"!==u){a+=10;try{new RegExp(`(${u})`)}catch(t){throw new Error(`Invalid custom RegExp for param "${e}" (${u}): `+t.message)}}let h=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;r||(h=c&&t.length<2?`(?:/${h})`:"/"+h),c&&(h+="?"),o+=h,a+=20,c&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}e.push(a)}r.push(e)}if(n.strict&&n.end){const e=r.length-1;r[e][r[e].length-1]+=.7000000000000001}n.strict||(o+="/?"),n.end?o+="$":n.strict&&(o+="(?:/|$)");const s=new RegExp(o,n.sensitive?"":"i");return{re:s,score:r,keys:i,parse:function(e){const t=e.match(s),n={};if(!t)return null;for(let e=1;e<t.length;e++){const r=t[e]||"",o=i[e-1];n[o.name]=r&&o.repeatable?r.split("/"):r}return n},stringify:function(t){let n="",r=!1;for(const o of e){r&&n.endsWith("/")||(n+="/"),r=!1;for(const e of o)if(0===e.type)n+=e.value;else if(1===e.type){const{value:i,repeatable:s,optional:a}=e,c=i in t?t[i]:"";if(Array.isArray(c)&&!s)throw new Error(`Provided param "${i}" is an array but it is not repeatable (* or + modifiers)`);const l=Array.isArray(c)?c.join("/"):c;if(!l){if(!a)throw new Error(`Missing required param "${i}"`);o.length<2&&(n.endsWith("/")?n=n.slice(0,-1):r=!0)}n+=l}}return n}}}(function(e){if(!e)return[[]];if("/"===e)return[[$]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(e){throw new Error(`ERR (${n})/"${l}": ${e}`)}let n=0,r=n;const o=[];let i;function s(){i&&o.push(i),i=[]}let a,c=0,l="",u="";function h(){l&&(0===n?i.push({type:0,value:l}):1===n||2===n||3===n?(i.length>1&&("*"===a||"+"===a)&&t(`A repeatable param (${l}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:l,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):t("Invalid state to consume buffer"),l="")}function f(){l+=a}for(;c<e.length;)if(a=e[c++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(l&&h(),s()):":"===a?(h(),n=1):f();break;case 4:f(),n=r;break;case 1:"("===a?n=2:Y.test(a)?f():(h(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&c--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:h(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&c--,u="";break;default:t("Unknown state")}else r=n,n=4;return 2===n&&t(`Unfinished custom RegExp for param "${l}"`),h(),s(),o}(e.path),n);const o=d(r,{record:e,parent:t,children:[],alias:[]});return t&&!o.record.aliasOf==!t.record.aliasOf&&t.children.push(o),o}function K(e,t){const n=[],r=new Map;function o(e,n,r){let a=!r,c=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:J(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||{}:{default:e.component}}}(e);c.aliasOf=r&&r.record;const l=ee(t,e),u=[c];if("alias"in e){const t="string"==typeof e.alias?[e.alias]:e.alias;for(const e of t)u.push(d({},c,{components:r?r.record.components:c.components,path:e,aliasOf:r?r.record:c}))}let h,f;for(const t of u){let{path:u}=t;if(n&&"/"!==u[0]){let e=n.record.path,r="/"===e[e.length-1]?"":"/";t.path=n.record.path+(u&&r+u)}if(h=q(t,n,l),r?r.alias.push(h):(f=f||h,f!==h&&f.alias.push(h),a&&e.name&&!Q(h)&&i(e.name)),"children"in c){let e=c.children;for(let t=0;t<e.length;t++)o(e[t],h,r&&r.children[t])}r=r||h,s(h)}return f?()=>{i(f)}:m}function i(e){if(U(e)){const t=r.get(e);t&&(r.delete(e),n.splice(n.indexOf(t),1),t.children.forEach(i),t.alias.forEach(i))}else{let t=n.indexOf(e);t>-1&&(n.splice(t,1),e.record.name&&r.delete(e.record.name),e.children.forEach(i),e.alias.forEach(i))}}function s(e){let t=0;for(;t<n.length&&H(e,n[t])>=0;)t++;n.splice(t,0,e),e.record.name&&!Q(e)&&r.set(e.record.name,e)}return t=ee({strict:!1,end:!0,sensitive:!1},t),e.forEach(e=>o(e)),{addRoute:o,resolve:function(e,t){let o,i,s,a={};if("name"in e&&e.name){if(o=r.get(e.name),!o)throw V(1,{location:e});s=o.record.name,a=d(function(e,t){let n={};for(let r of t)r in e&&(n[r]=e[r]);return n}(t.params,o.keys.filter(e=>!e.optional).map(e=>e.name)),e.params),i=o.stringify(a)}else if("path"in e)i=e.path,o=n.find(e=>e.re.test(i)),o&&(a=o.parse(i),s=o.record.name);else{if(o=t.name?r.get(t.name):n.find(e=>e.re.test(t.path)),!o)throw V(1,{location:e,currentLocation:t});s=o.record.name,a=d({},t.params,e.params),i=o.stringify(a)}const c=[];let l=o;for(;l;)c.unshift(l.record),l=l.parent;return{name:s,path:i,params:a,matched:c,meta:Z(c)}},removeRoute:i,getRoutes:function(){return n},getRecordMatcher:function(e){return r.get(e)}}}function J(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(let r in e.components)t[r]="boolean"==typeof n?n:n[r];return t}function Q(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function Z(e){return e.reduce((e,t)=>d(e,t.meta),{})}function ee(e,t){let n={};for(let r in e)n[r]=r in t?t[r]:e[r];return n}const te=/#/g,ne=/&/g,re=/\//g,oe=/=/g,ie=/\?/g,se=/\+/g,ae=/%5B/g,ce=/%5D/g,le=/%5E/g,ue=/%60/g,he=/%7B/g,fe=/%7C/g,de=/%7D/g,pe=/%20/g;function me(e){return encodeURI(""+e).replace(fe,"|").replace(ae,"[").replace(ce,"]")}function be(e){return me(e).replace(se,"%2B").replace(pe,"+").replace(te,"%23").replace(ne,"%26").replace(ue,"`").replace(he,"{").replace(de,"}").replace(le,"^")}function ge(e){return function(e){return me(e).replace(te,"%23").replace(ie,"%3F")}(e).replace(re,"%2F")}function ve(e){try{return decodeURIComponent(""+e)}catch(e){}return""+e}function ye(e){const t={};if(""===e||"?"===e)return t;const n=("?"===e[0]?e.slice(1):e).split("&");for(let e=0;e<n.length;++e){const r=n[e].replace(se," ");let o=r.indexOf("="),i=ve(o<0?r:r.slice(0,o)),s=o<0?null:ve(r.slice(o+1));if(i in t){let e=t[i];Array.isArray(e)||(e=t[i]=[e]),e.push(s)}else t[i]=s}return t}function Oe(e){let t="";for(let n in e){const r=e[n];if(n=be(n).replace(oe,"%3D"),null==r){void 0!==r&&(t+=(t.length?"&":"")+n);continue}(Array.isArray(r)?r.map(e=>e&&be(e)):[r&&be(r)]).forEach(e=>{void 0!==e&&(t+=(t.length?"&":"")+n,null!=e&&(t+="="+e))})}return t}function we(e){const t={};for(let n in e){let r=e[n];void 0!==r&&(t[n]=Array.isArray(r)?r.map(e=>null==e?null:""+e):null==r?r:""+r)}return t}function Ee(){let e=[];return{add:function(t){return e.push(t),()=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)}},list:()=>e,reset:function(){e=[]}}}function _e(e,t,n,r,o){const i=r&&(r.enterCallbacks[o]=r.enterCallbacks[o]||[]);return()=>new Promise((s,a)=>{const c=e=>{var c;!1===e?a(V(4,{from:n,to:t})):e instanceof Error?a(e):"string"==typeof(c=e)||c&&"object"==typeof c?a(V(2,{from:t,to:e})):(i&&r.enterCallbacks[o]===i&&"function"==typeof e&&i.push(e),s())},l=e.call(r&&r.instances[o],t,n,c);let u=Promise.resolve(l);e.length<3&&(u=u.then(c)),u.catch(e=>a(e))})}function xe(e,t,n,r){const o=[];for(const a of e)for(const e in a.components){let c=a.components[e];if("beforeRouteEnter"===t||a.instances[e])if("object"==typeof(s=c)||"displayName"in s||"props"in s||"__vccOpts"in s){const i=(c.__vccOpts||c)[t];i&&o.push(_e(i,n,r,a,e))}else{let s=c();0,o.push(()=>s.then(o=>{if(!o)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${a.path}"`));const s=(c=o).__esModule||i&&"Module"===c[Symbol.toStringTag]?o.default:o;var c;a.components[e]=s;const l=(s.__vccOpts||s)[t];return l&&_e(l,n,r,a,e)()}))}}var s;return o}function je(e){const t=Object(r.o)(l),n=Object(r.o)(u),i=Object(r.d)(()=>t.resolve(Object(o.s)(e.to))),s=Object(r.d)(()=>{let{matched:e}=i.value,{length:t}=e;const r=e[t-1];let o=n.matched;if(!r||!o.length)return-1;let s=o.findIndex(y.bind(null,r));if(s>-1)return s;let a=Ae(e[t-2]);return t>1&&Ae(r)===a&&o[o.length-1].path!==a?o.findIndex(y.bind(null,e[t-2])):s}),a=Object(r.d)(()=>s.value>-1&&function(e,t){for(let n in t){let r=t[n],o=e[n];if("string"==typeof r){if(r!==o)return!1}else if(!Array.isArray(o)||o.length!==r.length||r.some((e,t)=>e!==o[t]))return!1}return!0}(n.params,i.value.params)),c=Object(r.d)(()=>s.value>-1&&s.value===n.matched.length-1&&O(n.params,i.value.params));return{route:i,href:Object(r.d)(()=>i.value.href),isActive:a,isExactActive:c,navigate:function(n={}){return function(e){if(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)return;if(e.defaultPrevented)return;if(void 0!==e.button&&0!==e.button)return;if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}e.preventDefault&&e.preventDefault();return!0}(n)?t[Object(o.s)(e.replace)?"replace":"push"](Object(o.s)(e.to)).catch(m):Promise.resolve()}}}const Te=Object(r.k)({name:"RouterLink",props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},setup(e,{slots:t}){const n=Object(o.i)(je(e)),{options:i}=Object(r.o)(l),s=Object(r.d)(()=>({[Ce(e.activeClass,i.linkActiveClass,"router-link-active")]:n.isActive,[Ce(e.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive}));return()=>{const o=t.default&&t.default(n);return e.custom?o:Object(r.n)("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:s.value},o)}}});function Ae(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Ce=(e,t,n)=>null!=e?e:null!=t?t:n;function Re(e,t){if(!e)return null;const n=e(t);return 1===n.length?n[0]:n}const Se=Object(r.k)({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},setup(e,{attrs:t,slots:n}){const i=Object(r.o)(h),s=Object(r.d)(()=>e.route||i.value),l=Object(r.o)(c,0),u=Object(r.d)(()=>s.value.matched[l]);Object(r.y)(c,l+1),Object(r.y)(a,u),Object(r.y)(h,s);const f=Object(o.j)();return Object(r.F)(()=>[f.value,u.value,e.name],([e,t,n],[r,o,i])=>{t&&(t.instances[n]=e,o&&o!==t&&e&&e===r&&(t.leaveGuards.size||(t.leaveGuards=o.leaveGuards),t.updateGuards.size||(t.updateGuards=o.updateGuards))),!e||!t||o&&y(t,o)&&r||(t.enterCallbacks[n]||[]).forEach(t=>t(e))},{flush:"post"}),()=>{const o=s.value,i=u.value,a=i&&i.components[e.name],c=e.name;if(!a)return Re(n.default,{Component:a,route:o});const l=i.props[e.name],h=l?!0===l?o.params:"function"==typeof l?l(o):l:null,p=Object(r.n)(a,d({},h,t,{onVnodeUnmounted:e=>{e.component.isUnmounted&&(i.instances[c]=null)},ref:f}));return Re(n.default,{Component:p,route:o})||p}}});function Fe(e){const t=K(e.routes,e);let n=e.parseQuery||ye,i=e.stringifyQuery||Oe,s=e.history;const a=Ee(),c=Ee(),b=Ee(),v=Object(o.m)(I);let w=I;f&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const E=p.bind(null,e=>""+e),x=p.bind(null,ge),j=p.bind(null,ve);function T(e,r){if(r=d({},r||v.value),"string"==typeof e){let o=g(n,e,r.path),i=t.resolve({path:o.path},r),a=s.createHref(o.fullPath);return d(o,i,{params:j(i.params),hash:ve(o.hash),redirectedFrom:void 0,href:a})}let o;"path"in e?o=d({},e,{path:g(n,e.path,r.path).path}):(o=d({},e,{params:x(e.params)}),r.params=x(r.params));let a=t.resolve(o,r);const c=e.hash||"";a.params=E(j(a.params));const l=function(e,t){let n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}(i,d({},e,{hash:(u=c,me(u).replace(he,"{").replace(de,"}").replace(le,"^")),path:a.path}));var u;let h=s.createHref(l);return d({fullPath:l,hash:c,query:i===Oe?we(e.query):e.query},a,{redirectedFrom:void 0,href:h})}function A(e){return"string"==typeof e?g(n,e,v.value.path):d({},e)}function L(e,t){if(w!==e)return V(8,{from:t,to:e})}function k(e){return D(e)}function M(e){const t=e.matched[e.matched.length-1];if(t&&t.redirect){const{redirect:n}=t;let r="function"==typeof n?n(e):n;return"string"==typeof r&&(r=r.includes("?")||r.includes("#")?r=A(r):{path:r},r.params={}),d({query:e.query,hash:e.hash,params:e.params},r)}}function D(e,t){const n=w=T(e),r=v.value,o=e.state,s=e.force,a=!0===e.replace,c=M(n);if(c)return D(d(A(c),{state:o,force:s,replace:a}),t||n);const l=n;let u;return l.redirectedFrom=t,!s&&function(e,t,n){let r=t.matched.length-1,o=n.matched.length-1;return r>-1&&r===o&&y(t.matched[r],n.matched[o])&&O(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}(i,r,n)&&(u=V(16,{to:l,from:r}),Q(r,r,!0,!1)),(u?Promise.resolve(u):P(l,r)).catch(e=>X(e)?e:q(e,l,r)).then(e=>{if(e){if(X(e,2))return D(d(A(e.to),{state:o,force:s,replace:a}),t||l)}else e=G(l,r,!0,a,o);return N(l,r,e),e})}function B(e,t){const n=L(e,t);return n?Promise.reject(n):Promise.resolve()}function P(e,t){let n;const[r,o,i]=function(e,t){const n=[],r=[],o=[],i=Math.max(t.matched.length,e.matched.length);for(let s=0;s<i;s++){const i=t.matched[s];i&&(e.matched.find(e=>y(e,i))?r.push(i):n.push(i));const a=e.matched[s];a&&(t.matched.find(e=>y(e,a))||o.push(a))}return[n,r,o]}(e,t);n=xe(r.reverse(),"beforeRouteLeave",e,t);for(const o of r)o.leaveGuards.forEach(r=>{n.push(_e(r,e,t))});const s=B.bind(null,e,t);return n.push(s),Le(n).then(()=>{n=[];for(const r of a.list())n.push(_e(r,e,t));return n.push(s),Le(n)}).then(()=>{n=xe(o,"beforeRouteUpdate",e,t);for(const r of o)r.updateGuards.forEach(r=>{n.push(_e(r,e,t))});return n.push(s),Le(n)}).then(()=>{n=[];for(const r of e.matched)if(r.beforeEnter&&!t.matched.includes(r))if(Array.isArray(r.beforeEnter))for(const o of r.beforeEnter)n.push(_e(o,e,t));else n.push(_e(r.beforeEnter,e,t));return n.push(s),Le(n)}).then(()=>(e.matched.forEach(e=>e.enterCallbacks={}),n=xe(i,"beforeRouteEnter",e,t),n.push(s),Le(n))).then(()=>{n=[];for(const r of c.list())n.push(_e(r,e,t));return n.push(s),Le(n)}).catch(e=>X(e,8)?e:Promise.reject(e))}function N(e,t,n){for(const r of b.list())r(e,t,n)}function G(e,t,n,r,o){const i=L(e,t);if(i)return i;const a=t===I,c=f?history.state:{};n&&(r||a?s.replace(e.fullPath,d({scroll:a&&c&&c.scroll},o)):s.push(e.fullPath,o)),v.value=e,Q(e,t,n,a),J()}let z;function W(){z=s.listen((e,t,n)=>{let r=T(e);const o=M(r);if(o)return void D(d(o,{replace:!0}),r).catch(m);w=r;const i=v.value;var a,c;f&&(a=S(i.fullPath,n.delta),c=C(),F.set(a,c)),P(r,i).catch(e=>X(e,12)?e:X(e,2)?(D(e.to,r).then(e=>{X(e,20)&&!n.delta&&n.type===_.pop&&s.go(-1,!1)}).catch(m),Promise.reject()):(n.delta&&s.go(-n.delta,!1),q(e,r,i))).then(e=>{(e=e||G(r,i,!1))&&(n.delta?s.go(-n.delta,!1):n.type===_.pop&&X(e,20)&&s.go(-1,!1)),N(r,i,e)}).catch(m)})}let H,$=Ee(),Y=Ee();function q(e,t,n){J(e);const r=Y.list();return r.length?r.forEach(r=>r(e,t,n)):console.error(e),Promise.reject(e)}function J(e){H||(H=!0,W(),$.list().forEach(([t,n])=>e?n(e):t()),$.reset())}function Q(t,n,o,i){const{scrollBehavior:s}=e;if(!f||!s)return Promise.resolve();let a=!o&&function(e){const t=F.get(e);return F.delete(e),t}(S(t.fullPath,0))||(i||!o)&&history.state&&history.state.scroll||null;return Object(r.q)().then(()=>s(t,n,a)).then(e=>e&&R(e)).catch(e=>q(e,t,n))}const Z=e=>s.go(e);let ee;const te=new Set;return{currentRoute:v,addRoute:function(e,n){let r,o;return U(e)?(r=t.getRecordMatcher(e),o=n):o=e,t.addRoute(o,r)},removeRoute:function(e){let n=t.getRecordMatcher(e);n&&t.removeRoute(n)},hasRoute:function(e){return!!t.getRecordMatcher(e)},getRoutes:function(){return t.getRoutes().map(e=>e.record)},resolve:T,options:e,push:k,replace:function(e){return k(d(A(e),{replace:!0}))},go:Z,back:()=>Z(-1),forward:()=>Z(1),beforeEach:a.add,beforeResolve:c.add,afterEach:b.add,onError:Y.add,isReady:function(){return H&&v.value!==I?Promise.resolve():new Promise((e,t)=>{$.add([e,t])})},install(e){e.component("RouterLink",Te),e.component("RouterView",Se),e.config.globalProperties.$router=this,Object.defineProperty(e.config.globalProperties,"$route",{enumerable:!0,get:()=>Object(o.s)(v)}),f&&!ee&&v.value===I&&(ee=!0,k(s.location).catch(e=>{0}));const t={};for(let e in I)t[e]=Object(r.d)(()=>v.value[e]);e.provide(l,this),e.provide(u,Object(o.i)(t)),e.provide(h,v);let n=e.unmount;te.add(e),e.unmount=function(){te.delete(e),te.size<1&&(z(),v.value=I,ee=!1,H=!1),n()}}}}function Le(e){return e.reduce((e,t)=>e.then(()=>t()),Promise.resolve())}},function(e,t,n){"use strict";(function(e){function r(){return o().__VUE_DEVTOOLS_GLOBAL_HOOK__}function o(){return"undefined"!=typeof navigator?window:void 0!==e?e:{}}n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}))}).call(this,n(7))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(19);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(20)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){var r=n(23);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n(11).default)("1b0fbecb",r,!1,{})},function(e,t,n){var r=n(26);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.i,r,""]]),r.locals&&(e.exports=r.locals);(0,n(11).default)("892e3d32",r,!1,{})},function(e,t,n){"use strict";function r(e,t){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=i[0],a={id:e+":"+o,css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}n.r(t),n.d(t,"default",(function(){return d}));var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var i={},s=o&&(document.head||document.getElementsByTagName("head")[0]),a=null,c=0,l=!1,u=function(){},h=null,f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function d(e,t,n,o){l=n,h=o||{};var s=r(e,t);return p(s),function(t){for(var n=[],o=0;o<s.length;o++){var a=s[o];(c=i[a.id]).refs--,n.push(c)}t?p(s=r(e,t)):s=[];for(o=0;o<n.length;o++){var c;if(0===(c=n[o]).refs){for(var l=0;l<c.parts.length;l++)c.parts[l]();delete i[c.id]}}}}function p(e){for(var t=0;t<e.length;t++){var n=e[t],r=i[n.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](n.parts[o]);for(;o<n.parts.length;o++)r.parts.push(b(n.parts[o]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var s=[];for(o=0;o<n.parts.length;o++)s.push(b(n.parts[o]));i[n.id]={id:n.id,refs:1,parts:s}}}}function m(){var e=document.createElement("style");return e.type="text/css",s.appendChild(e),e}function b(e){var t,n,r=document.querySelector('style[data-vue-ssr-id~="'+e.id+'"]');if(r){if(l)return u;r.parentNode.removeChild(r)}if(f){var o=c++;r=a||(a=m()),t=y.bind(null,r,o,!1),n=y.bind(null,r,o,!0)}else r=m(),t=O.bind(null,r),n=function(){r.parentNode.removeChild(r)};return t(e),function(r){if(r){if(r.css===e.css&&r.media===e.media&&r.sourceMap===e.sourceMap)return;t(e=r)}else n()}}var g,v=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function O(e,t){var n=t.css,r=t.media,o=t.sourceMap;if(r&&e.setAttribute("media",r),h.ssrId&&e.setAttribute("data-vue-ssr-id",t.id),o&&(n+="\n/*# sourceURL="+o.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},function(e,t,n){"use strict";(function(e){var r=n(5),o=n(15);const i=Object(r.a)({history:Object(r.b)(e.env.BASE_URL),routes:[{path:"/",component:o.a}]});t.a=i}).call(this,n(24))},function(e,t,n){"use strict";n.d(t,"setupDevtoolsPlugin",(function(){return i}));var r=n(6),o=n(14);function i(e,t){const n=Object(r.a)();if(n)n.emit(o.a,e,t);else{const n=Object(r.b)();(n.__VUE_DEVTOOLS_PLUGINS__=n.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:e,setupFn:t})}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r="devtools-plugin:setup"},function(e,t,n){"use strict";var r=n(2),o=Object(r.H)("data-v-5ac3902a");Object(r.z)("data-v-5ac3902a");var i={class:"a-puzzle-a-day"},s={ref:"canvas"},a=Object(r.j)("div",{class:"link"},[Object(r.i)(" Original: "),Object(r.j)("a",{href:"https://www.dragonfjord.com/product/a-puzzle-a-day/",target:"_blank"},"https://www.dragonfjord.com/product/a-puzzle-a-day/")],-1);Object(r.x)();var c=o((function(e,t,n,o,c,l){return Object(r.w)(),Object(r.e)("div",i,[Object(r.j)("canvas",s,null,512),a])})),l=n(1);class u{constructor(e){this.textures=[],this.glFrameBuffer=e}get texture(){return this.textures[0]}}class h{constructor(e,t,n){this.name=e,this.componentSize=t,this.vertices=n}}var f;!function(e){e[e.TRIANGLES=0]="TRIANGLES",e[e.LINES=1]="LINES"}(f||(f={}));class d{constructor(e=f.TRIANGLES){this.type=f.TRIANGLES,this.attributes=[],this.indices=[],this.type=e}setVertices(e){const t=e.length,n={};for(let r in e[0])if(e[0].hasOwnProperty(r)){const o=e[0][r].length;n[r]=new h(r,o,new Float32Array(o*t))}for(let r=0;r<t;++r){const t=e[r];for(let e in t)if(t.hasOwnProperty(e)){const o=t[e];n[e].vertices.set(o,o.length*r)}}this.attributes=Object.values(n)}}d.TYPE_TRIANGLES=f.TRIANGLES,d.TYPE_LINES=f.LINES;class p{constructor(e,t,n,r,o,i,s,a){this.flipY=!1,this.glTexture=e,this.level=t,this.internalformat=n,this.width=r,this.height=o,this.border=i,this.format=s,this.type=a}}function m(e,t,n,r,o,i){if("[0]"===t.substr(-3))switch(r){case e.FLOAT:return function(t){e.uniform1fv(o,t)};case e.INT:return function(t){e.uniform1iv(o,t)};case e.UNSIGNED_INT:return function(t){e.uniform1uiv(o,t)};case e.SAMPLER_2D:const s=new Int32Array(n);for(let e=0;e<n;++e)s[e]=i.count++;return function(t){e.uniform1iv(o,s);for(let r=0;r<n;++r){let n=t[r];n instanceof p&&(n=n.glTexture),e.activeTexture(e.TEXTURE0+s[r]),e.bindTexture(e.TEXTURE_2D,n||null)}};default:throw new Error(`Unimplemented setter type (uniform: ${t}, type: ${r})`)}switch(r){case e.FLOAT:return function(t){e.uniform1f(o,t)};case e.FLOAT_VEC2:return function(t){e.uniform2fv(o,t)};case e.FLOAT_VEC3:return function(t){e.uniform3fv(o,t)};case e.FLOAT_VEC4:return function(t){e.uniform4fv(o,t)};case e.BOOL:case e.INT:return function(t){e.uniform1i(o,t)};case e.BOOL_VEC2:case e.INT_VEC2:return function(t){e.uniform2iv(o,t)};case e.BOOL_VEC3:case e.INT_VEC3:return function(t){e.uniform3iv(o,t)};case e.BOOL_VEC4:case e.INT_VEC4:return function(t){e.uniform4iv(o,t)};case e.FLOAT_MAT2:return function(t){e.uniformMatrix2fv(o,!1,t)};case e.FLOAT_MAT3:return function(t){e.uniformMatrix3fv(o,!1,t)};case e.FLOAT_MAT4:return function(t){e.uniformMatrix4fv(o,!1,t)};case e.SAMPLER_2D:const n=i.count++;return function(t){t instanceof p&&(t=t.glTexture),e.uniform1i(o,n),e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_2D,t||null)};default:throw new Error(`Unimplemented setter type (uniform: ${t}, type: ${r})`)}}class b{constructor(e,t,n,r){this.name=e,this.size=t,this.type=n,this.location=r}}class g{constructor(e,t,n,r,o){this.name=e,this.size=t,this.type=n,this.location=r,this.setter=o}}class v{constructor(e,t,n){this.attributes={},this.uniforms={},this.vertShader=e,this.fragShader=t,this.program=n}registerAttribute(e,t,n,r){this.attributes[e]=new b(e,t,n,r)}registerUniform(e,t,n,r,o){e.endsWith("[0]")&&(e=e.substr(0,e.length-"[0]".length)),this.uniforms[e]=new g(e,t,n,r,o)}}var y,O,w;!function(e){e[e.NONE=0]="NONE",e[e.FRONT=1]="FRONT",e[e.BACK=2]="BACK"}(y||(y={})),function(e){e[e.MESH=0]="MESH",e[e.LINES=1]="LINES"}(O||(O={})),function(e){e[e.OVERLAP=0]="OVERLAP",e[e.LIGHT=1]="LIGHT",e[e.PIGMENT=2]="PIGMENT"}(w||(w={}));class E{constructor(e,t=2e3){let n;this.SIDE_NONE=y.NONE,this.SIDE_FRONT=y.FRONT,this.SIDE_BACK=y.BACK,this.BLEND_MODE_OVERLAP=w.OVERLAP,this.BLEND_MODE_LIGHT=w.LIGHT,this.BLEND_MODE_PIGMENT=w.PIGMENT,this.frameBufferStack=[],this.batchType=O.MESH,this.batchIndex=0,this.drawing2D=!1,this.state={width:0,height:0,color:{r:1,g:1,b:1,a:1},cameraX:0,cameraY:0,zoom:1,blendMode:w.OVERLAP},this.stateStack=[];let r=null;if(e?e instanceof HTMLCanvasElement?n=e:(n=e.canvas,r=e):n=document.createElement("canvas"),!r&&(r=n.getContext("webgl2",{alpha:!0,antialias:!1,depth:!0,premultipliedAlpha:!1,preserveDrawingBuffer:!1,stencil:!1}),!r))throw new Error("Failed to create WebGL2 rendering context");this.canvas=n,this.gl=r,this.state.width=n.width,this.state.height=n.height,r.viewport(0,0,this.state.width,this.state.height),r.enable(r.BLEND),this.BLANK_WHITE=this.createTextureFromRgbaPixels(1,1,new Uint8Array([255,255,255,255])),this.IMAGE_2D_SHADER=this.createShader("#version 300 es\n\nprecision mediump float;\n\nin vec4 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\n\nout vec2 v_texCoord;\nout vec4 v_color;\n\nvoid main() {\n    v_texCoord = a_texCoord;\n    v_color = a_color;\n    gl_Position = a_position;\n}\n","#version 300 es\n\nprecision mediump float;\n\nin vec2 v_texCoord;\nin vec4 v_color;\n\nuniform sampler2D u_texture;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = texture(u_texture, v_texCoord) * v_color;\n}\n"),this.COLOR_2D_SHADER=this.createShader("#version 300 es\n\nprecision mediump float;\n\nin vec4 a_position;\nin vec4 a_color;\n\nout vec4 v_color;\n\nvoid main() {\n    v_color = a_color;\n    gl_Position = a_position;\n}\n","#version 300 es\n\nprecision mediump float;\n\nin vec4 v_color;\n\nout vec4 outColor;\n\nvoid main() {\n    outColor = v_color;\n}\n"),this.batchSize=t,this.batchPositionVertices=new Float32Array(3*t*2*2),this.batchPositionBuffer=this.createDynamicDrawBuffer(this.batchPositionVertices),this.batchTexCoordVertices=new Float32Array(3*t*2*2),this.batchTexCoordBuffer=this.createDynamicDrawBuffer(this.batchTexCoordVertices),this.batchColorVertices=new Float32Array(3*t*2*4),this.batchColorBuffer=this.createDynamicDrawBuffer(this.batchColorVertices)}static sharedInstance(){return E._sharedInstance||(E._sharedInstance=new E),E._sharedInstance}copyTo(e,t=0,n=0,r=this.state.width,o=this.state.height,i=0,s=0,a=this.state.width,c=this.state.height){e.drawImage(this.canvas,i,s,a,c,t,n,r,o)}viewport(e,t){this.state.width=e,this.state.height=t,this.gl.viewport(0,0,this.state.width,this.state.height)}resizeCanvas(e,t){this.canvas.width===e&&this.canvas.height===t||(this.canvas.width=e,this.canvas.height=t),this.viewport(e,t)}clearColor(e=0,t=0,n=0,r=1){this.gl.clearColor(e,t,n,r)}clear(e,t,n){this.flush2D(),this.switchFrameBuffer();const r=this.gl;let o=0;e&&(o|=r.COLOR_BUFFER_BIT),t&&(o|=r.DEPTH_BUFFER_BIT),n&&(o|=r.STENCIL_BUFFER_BIT),r.clear(o)}depthTest(e){const t=this.gl;e?(t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL)):t.disable(t.DEPTH_TEST)}depthMask(e){this.gl.depthMask(e)}cullFace(e){const t=this.gl;switch(e){case y.NONE:t.disable(t.CULL_FACE);break;case y.FRONT:t.enable(t.CULL_FACE),t.cullFace(t.FRONT);break;case y.BACK:t.enable(t.CULL_FACE),t.cullFace(t.BACK)}}blendMode(e){if(e===this.state.blendMode)return;this.state.blendMode=e,this.flush2D();const t=this.gl;switch(e){case w.OVERLAP:t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO);break;case w.LIGHT:t.blendEquation(t.FUNC_ADD),t.blendFunc(t.SRC_ALPHA,t.ONE);break;case w.PIGMENT:t.blendEquationSeparate(t.FUNC_ADD,t.MAX),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA)}}useShader(e){if(e!==this.currentShader&&(this.flush2D(),this.currentShader=e,e)){this.gl.useProgram(e.program)}}uniform(e,t){const n=this.currentShader;if(!n)return;const r=n.uniforms[e];null==r||r.setter(t)}save(){if(this.stateStack.length>999)throw new Error("State stack has reach a max size of 999");const e=this.state,t=e.color;this.stateStack.push({width:e.width,height:e.height,color:{r:t.r,g:t.g,b:t.b,a:t.a},cameraX:e.cameraX,cameraY:e.cameraY,zoom:e.zoom,blendMode:e.blendMode})}restore(){const e=this.stateStack.pop();if(!e)throw new Error("State stack is empty");this.state.color.r=e.color.r,this.state.color.g=e.color.g,this.state.color.b=e.color.b,this.state.color.a=e.color.a,this.state.cameraX=e.cameraX,this.state.cameraY=e.cameraY,this.state.zoom=e.zoom,this.viewport(e.width,e.height),this.blendMode(e.blendMode)}createDynamicDrawBuffer(e){const t=this.gl,n=t.createBuffer();if(!n)throw new Error("Failed to create WebGL buffer");return t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),n}createVBO(e){const t=this.gl,n=t.createBuffer();if(!n)throw new Error("Failed to create WebGL buffer");return t.bindBuffer(t.ARRAY_BUFFER,n),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),n}createIBO(e){const t=this.gl,n=t.createBuffer();if(!n)throw new Error("Failed to create WebGL buffer");return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),n}bindVertexArrayAttribute(e,t,n=4,r=this.gl.FLOAT,o=!1,i=0,s=0){const a=this.gl;a.bindBuffer(a.ARRAY_BUFFER,t),a.enableVertexAttribArray(e),a.vertexAttribPointer(e,n,r,o,i,s),a.bindBuffer(a.ARRAY_BUFFER,null)}createEmptyTexture(e=this.state.width,t=this.state.height,n=!1){if(e<0||t<0)throw new Error("Negative width/height");const r=this.gl,o=r.createTexture();if(!o)throw new Error("Failed to create WebGL texture");r.bindTexture(r.TEXTURE_2D,o),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,e,t,0,r.RGBA,r.UNSIGNED_BYTE,null),r.bindTexture(r.TEXTURE_2D,null);const i=new p(o,0,r.RGBA,e,t,0,r.RGBA,r.UNSIGNED_BYTE);return i.flipY=n,i}createTexture(e){const t=this.createEmptyTexture(e.width,e.height),n=this.gl;return n.texImage2D(n.TEXTURE_2D,t.level,t.internalformat,t.format,t.type,e),t}createTextureFromImageUrl(e){return new Promise((t,n)=>{try{const r=new Image;r.onload=()=>{try{const e=this.createTexture(r);e.image=r,t(e)}catch(e){n(e)}},r.onabort=r.onerror=e=>{n(e)},r.src=e}catch(e){n(e)}})}createDepthTexture(e=this.state.width,t=this.state.height){if(e<0||t<0)throw new Error("Negative width/height");const n=this.gl,r=n.createTexture();if(!r)throw new Error("Failed to create WebGL texture");return n.bindTexture(n.TEXTURE_2D,r),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texImage2D(n.TEXTURE_2D,0,n.DEPTH_COMPONENT32F,e,t,0,n.DEPTH_COMPONENT,n.FLOAT,null),n.bindTexture(n.TEXTURE_2D,null),new p(r,0,n.DEPTH_COMPONENT32F,e,t,0,n.DEPTH_COMPONENT,n.FLOAT)}createTextureFromRgbaPixels(e,t,n){const r=this.createEmptyTexture(e,t),o=this.gl;return o.bindTexture(o.TEXTURE_2D,r.glTexture),o.texImage2D(o.TEXTURE_2D,r.level,r.internalformat,e,t,r.border,r.format,r.type,n),o.bindTexture(o.TEXTURE_2D,null),r}setTextureFromPixels(e,t,n,r){const o=this.gl;if(!e.glTexture)throw new Error("Texture has been deleted");o.bindTexture(o.TEXTURE_2D,e.glTexture),o.texImage2D(o.TEXTURE_2D,e.level,e.internalformat,t,n,e.border,e.format,e.type,r),o.bindTexture(o.TEXTURE_2D,null),e.width=t,e.height=n}deleteTexture(e){e.glTexture&&(this.gl.deleteTexture(e.glTexture),e.glTexture=void 0),e.width=0,e.height=0}resizeTexture(e,t=this.state.width,n=this.state.height,r=!1){if(t<0||n<0)throw new Error("Negative width/height");if(e.width===t&&e.height===n)return;const o=this.gl;if(!e.glTexture)throw new Error("Texture has been deleted");o.bindTexture(o.TEXTURE_2D,e.glTexture),o.texImage2D(o.TEXTURE_2D,e.level,e.internalformat,t,n,e.border,e.format,e.type,null),o.bindTexture(o.TEXTURE_2D,null),e.width=t,e.height=n}createGlShader(e,t){const n=this.gl,r=n.createShader(t);if(!r)throw new Error("Failed to create WebGL shader");if(n.shaderSource(r,e),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS))throw new Error("Failed to compile WebGL shader:\n\n"+n.getShaderInfoLog(r));return r}createShader(e,t){const n=this.gl,r=this.createGlShader(e,n.VERTEX_SHADER),o=this.createGlShader(t,n.FRAGMENT_SHADER),i=n.createProgram();if(!i)throw new Error("Failed to create WebGL program");n.attachShader(i,r),n.attachShader(i,o);const s=this.attribLocations;if(s)for(let e in s)s.hasOwnProperty(e)&&n.bindAttribLocation(i,s[e],e);if(n.linkProgram(i),!n.getProgramParameter(i,n.LINK_STATUS))throw new Error("Failed to link WebGL program:\n\n"+n.getProgramInfoLog(i));const a=new v(r,o,i),c=n.getProgramParameter(i,n.ACTIVE_ATTRIBUTES);for(let e=0;e<c;++e){const t=n.getActiveAttrib(i,e);if(!t)throw new Error("Failed to get WebGL attribute info");const r=n.getAttribLocation(i,t.name);a.registerAttribute(t.name,t.size,t.type,r)}const l=n.getProgramParameter(i,n.ACTIVE_UNIFORMS),u={count:0};for(let e=0;e<l;++e){const t=n.getActiveUniform(i,e);if(!t)throw new Error("Failed to get WebGL uniform info");const r=n.getUniformLocation(i,t.name);if(null==r)throw new Error("Failed to get uniform location");a.registerUniform(t.name,t.size,t.type,r,m(n,t.name,t.size,t.type,r,u))}return a}deleteShader(e){const t=this.gl;e.program&&(t.deleteProgram(e.program),e.program=void 0),e.vertShader&&(t.deleteShader(e.vertShader),e.vertShader=void 0),e.fragShader&&(t.deleteShader(e.fragShader),e.fragShader=void 0),e.uniforms={},e.attributes={}}createFrameBuffer(){const e=this.gl.createFramebuffer();if(!e)throw new Error("Failed to create WebGL frame buffer");return new u(e)}attachColorTexture(e,t){this.attachColorTextures(e,t?[t]:[])}attachColorTextures(e,t){const n=this.gl;if(!e.glFrameBuffer)throw new Error("Frame buffer has been deleted");n.bindFramebuffer(n.FRAMEBUFFER,e.glFrameBuffer),e.textures.length=t.length,t.forEach((t,r)=>{if(!t.glTexture)throw new Error("Texture has been deleted");n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+r,n.TEXTURE_2D,t.glTexture,t.level),e.textures[r]=t}),n.drawBuffers(t.map((e,t)=>n.COLOR_ATTACHMENT0+t)),n.bindFramebuffer(n.FRAMEBUFFER,null),this.currentFrameBuffer=void 0}attachDepthTexture(e,t){const n=this.gl;if(!e.glFrameBuffer)throw new Error("Frame buffer has been deleted");if(n.bindFramebuffer(n.FRAMEBUFFER,e.glFrameBuffer),t){if(!t.glTexture)throw new Error("Texture has been deleted");n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,t.glTexture,t.level),e.depthTexture=t}else n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,null,0),e.depthTexture=void 0;n.bindFramebuffer(n.FRAMEBUFFER,null),this.currentFrameBuffer=void 0}attachStencilTexture(e,t){const n=this.gl;if(!e.glFrameBuffer)throw new Error("Frame buffer has been deleted");if(n.bindFramebuffer(n.FRAMEBUFFER,e.glFrameBuffer),t){if(!t.glTexture)throw new Error("Texture has been deleted");n.framebufferTexture2D(n.FRAMEBUFFER,n.STENCIL_ATTACHMENT,n.TEXTURE_2D,t.glTexture,t.level),e.stencilTexture=t}else n.framebufferTexture2D(n.FRAMEBUFFER,n.STENCIL_ATTACHMENT,n.TEXTURE_2D,null,0),e.stencilTexture=void 0;n.bindFramebuffer(n.FRAMEBUFFER,null),this.currentFrameBuffer=void 0}deleteFrameBuffer(e,t=!1){e.glFrameBuffer&&(this.gl.deleteFramebuffer(e.glFrameBuffer),e.glFrameBuffer=void 0),t&&e.textures.forEach(e=>this.deleteTexture(e))}resizeFrameBuffer(e,t=this.state.width,n=this.state.height){e.textures.forEach(e=>this.resizeTexture(e,t,n)),e.depthTexture&&this.resizeTexture(e.depthTexture,t,n),e.stencilTexture&&this.resizeTexture(e.stencilTexture,t,n)}startCapture(e){this.flush2D(),this.frameBufferStack.push(e)}endCapture(){this.flush2D(),this.frameBufferStack.pop()}switchFrameBuffer(){const e=this.frameBufferStack,t=e.length?e[e.length-1]:void 0;if(t!==this.currentFrameBuffer){this.currentFrameBuffer=t||void 0;const e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,(null==t?void 0:t.glFrameBuffer)||null)}}disposeGeometry(e){const t=this.gl;e.vao&&(t.deleteVertexArray(e.vao),e.vao=void 0),e.ibo&&(t.deleteBuffer(e.ibo),e.ibo=void 0),e.attributes.forEach(e=>{e.vbo&&(t.deleteBuffer(e.vbo),e.vbo=void 0)})}drawGeometry(e){if(this.drawing2D)throw new Error("Renderer.end2D must be call before draw geometry");const t=this.gl;if(!e.vao){const n=t.createVertexArray();if(!n)throw new Error("Failed to create Vertex Array Object");e.vao=n,t.bindVertexArray(n);const r=this.currentShader;if(!r)throw new Error("Shader not set");const o=this.attribLocations;e.attributes.forEach(e=>{if(e.vbo||(e.vbo=this.createVBO(e.vertices)),o&&o.hasOwnProperty(e.name))this.bindVertexArrayAttribute(o[e.name],e.vbo,e.componentSize);else{const t=r.attributes[e.name];t&&this.bindVertexArrayAttribute(t.location,e.vbo,e.componentSize)}})}switch(t.bindVertexArray(e.vao),e.ibo||(e.ibo=this.createIBO(e.indices)),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.ibo),this.switchFrameBuffer(),e.type){case d.TYPE_TRIANGLES:t.drawElements(t.TRIANGLES,e.indices.length,t.UNSIGNED_SHORT,0);break;case d.TYPE_LINES:t.drawElements(t.LINES,e.indices.length,t.UNSIGNED_SHORT,0)}t.bindVertexArray(null)}begin2D(){if(this.drawing2D)throw new Error("Renderer.end2D must be call before begin");this.drawing2D=!0}end2D(){if(!this.drawing2D)throw new Error("Renderer.begin2D must be call before end");this.flush2D(),this.drawing2D=!1}setCameraPosition(e,t){this.state.cameraX=e,this.state.cameraY=t}centerCamera(){this.setCameraPosition(this.state.width/2,this.state.height/2)}setZoom(e){this.state.zoom=e}setColor(e,t,n,r=1){this.state.color.r=e,this.state.color.g=t,this.state.color.b=n,this.state.color.a=r}flush2D(){if(this.drawing2D&&0!==this.batchIndex)switch(this.batchType){case O.MESH:this.flushMesh();break;case O.LINES:this.flushLines()}}flushMesh(){var e;const t=this.batchTexture,n=this.batchIndex;this.batchIndex=0;const r=this.gl;let o=this.currentShader;if(o||(o=this.IMAGE_2D_SHADER),!o.program)throw new Error("Shader has been deleted");r.useProgram(o.program),r.bindBuffer(r.ARRAY_BUFFER,this.batchPositionBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,this.batchPositionVertices);const i=o.attributes.a_position.location;r.enableVertexAttribArray(i),r.vertexAttribPointer(i,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,this.batchTexCoordBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,this.batchTexCoordVertices);const s=o.attributes.a_texCoord.location;r.enableVertexAttribArray(s),r.vertexAttribPointer(s,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,this.batchColorBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,this.batchColorVertices);const a=o.attributes.a_color.location;r.enableVertexAttribArray(a),r.vertexAttribPointer(a,4,r.FLOAT,!1,0,0),null===(e=o.uniforms.u_texture)||void 0===e||e.setter(null==t?void 0:t.glTexture),this.switchFrameBuffer(),r.drawArrays(r.TRIANGLES,0,6*n)}flushLines(){const e=this.batchIndex;this.batchIndex=0;const t=this.gl;let n=this.currentShader;if(n||(n=this.COLOR_2D_SHADER),!n.program)throw new Error("Shader has been deleted");t.useProgram(n.program),t.bindBuffer(t.ARRAY_BUFFER,this.batchPositionBuffer),t.bufferSubData(t.ARRAY_BUFFER,0,this.batchPositionVertices);const r=n.attributes.a_position.location;t.enableVertexAttribArray(r),t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.bindBuffer(t.ARRAY_BUFFER,this.batchColorBuffer),t.bufferSubData(t.ARRAY_BUFFER,0,this.batchColorVertices);const o=n.attributes.a_color.location;t.enableVertexAttribArray(o),t.vertexAttribPointer(o,4,t.FLOAT,!1,0,0),this.switchFrameBuffer(),t.drawArrays(t.LINES,0,2*e)}drawLine(e,t,n,r){if(!this.drawing2D)throw new Error("Renderer.begin2D must be call before draw");(this.batchIndex>=3*this.batchSize||this.batchType!==O.LINES)&&this.flush2D(),this.batchType=O.LINES;const o=this.state.zoom,i=2/this.state.width*o,s=2/this.state.height*o,a=this.state.cameraX,c=this.state.cameraY,l=this.batchPositionVertices,u=2*this.batchIndex*2;l[u]=(e-a)*i,l[u+1]=(t-c)*s,l[u+2]=(n-a)*i,l[u+3]=(r-c)*s;const h=2*this.batchIndex*4,f=this.batchColorVertices,d=this.state.color;for(let e=0;e<2;++e){const t=4*e;f[h+t]=d.r,f[h+1+t]=d.g,f[h+2+t]=d.b,f[h+3+t]=d.a}this.batchIndex+=1}pushCwQuadVertices(e,t,n,r,o,i,s,a,c,l,u,h,f,d,p,m,b){if(!this.drawing2D)throw new Error("Renderer.begin2D must be call before draw");(this.batchIndex>=this.batchSize||e!==this.batchTexture||this.batchType!==O.MESH)&&this.flush2D(),this.batchType=O.MESH,this.batchTexture=e;const g=3*this.batchIndex*2*2,v=this.batchPositionVertices,y=this.batchTexCoordVertices;v[g]=t,v[g+1]=n,v[g+2]=r,v[g+3]=o,v[g+4]=a,v[g+5]=c,v[g+6]=r,v[g+7]=o,v[g+8]=i,v[g+9]=s,v[g+10]=a,v[g+11]=c,e.flipY&&([l,u,m,b]=[m,b,l,u],[h,f,d,p]=[d,p,h,f]),y[g]=l,y[g+1]=u,y[g+2]=h,y[g+3]=f,y[g+4]=m,y[g+5]=b,y[g+6]=h,y[g+7]=f,y[g+8]=d,y[g+9]=p,y[g+10]=m,y[g+11]=b;const w=3*this.batchIndex*2*4,E=this.batchColorVertices,_=this.state.color;for(let e=0;e<6;++e){const t=4*e;E[w+t]=_.r,E[w+1+t]=_.g,E[w+2+t]=_.b,E[w+3+t]=_.a}this.batchIndex+=1}drawCwQuad(e,t,n,r,o,i,s,a,c,l=0,u=e.height,h=e.width,f=e.height,d=e.width,p=0,m=0,b=0){const g=this.state.zoom,v=2/this.state.width*g,y=2/this.state.height*g,O=1/e.width,w=1/e.height,E=this.state.cameraX,_=this.state.cameraY;this.pushCwQuadVertices(e,(t-E)*v,(n-_)*y,(r-E)*v,(o-_)*y,(i-E)*v,(s-_)*y,(a-E)*v,(c-_)*y,l*O,u*w,h*O,f*w,d*O,p*w,m*O,b*w)}drawRect(e,t=0,n=0,r=e.width,o=e.height,i=!1,s=!1,a=0,c=0,l=e.width,u=e.height){const h=t,f=t+r,d=n+o,p=n;let m=a,b=a+l,g=c,v=c+u;i&&([m,b]=[b,m]),s&&([g,v]=[v,g]),this.drawCwQuad(e,h,p,f,p,f,d,h,d,m,v,b,v,b,g,m,g)}draw(e,t=0,n=0,r=e.width,o=e.height,i=!1,s=!1,a=0,c=0,l=e.width,u=e.height,h=0,f=0,d=0,p=0,m=0,b=1,g=1){const v=t,y=t+r,O=n+o,w=n,E=Math.cos(m),_=Math.sin(m),x=E*b,j=-_*g,T=-E*d*b+h+d+p*_*g,A=_*b,C=E*g,R=-E*p*g+f-d*_*b+p,S=v,F=w,L=y,k=w,M=y,D=O,B=v,U=O;let I=a,P=a+l,N=c,V=c+u;i&&([I,P]=[P,I]),s&&([N,V]=[V,N]),this.drawCwQuad(e,x*S+j*F+T,A*S+C*F+R,x*L+j*k+T,A*L+C*k+R,x*M+j*D+T,A*M+C*D+R,x*B+j*U+T,A*B+C*U+R,I,V,P,V,P,N,I,N)}drawLabel(e,t=0,n=0,r=e.width,o=e.height,i=!1,s=!1,a=0,c=0,l=e.width,u=e.height,h=0,f=0,d=0,p=0,m=0,b=1,g=1){this.draw(e.texture(this),t,n,r,o,i,s,a,c,l,u,h,f,d,p,m,b,g)}}class _{constructor(e){this.running=!1,this.keepLoop=!1,this.lastTimestamp=0,this.onUpdate=e}start(){this.running||(this.running=!0,this.keepLoop=!0,this.lastTimestamp=(new Date).valueOf(),requestAnimationFrame(()=>this.loop()))}stop(){this.keepLoop=!1}loop(){const e=(new Date).valueOf();try{this.onUpdate(Math.max(e-this.lastTimestamp,1)/1e3)}catch(e){throw this.running=!1,this.keepLoop=!1,e}this.lastTimestamp=e,this.keepLoop?requestAnimationFrame(()=>this.loop()):this.running=!1}}class x{constructor(){this.mouseOver=!1,this.mouseX=0,this.mouseY=0,this.mouseLeft=!1,this.mouseLeftDownThisFrame=!1,this.mouseRight=!1,this.mouseRightDownThisFrame=!1,this.mouseMiddle=!1,this.mouseMiddleDownThisFrame=!1,this.dblClickThisFrame=!1,this.wheelDetX=0,this.wheelDetY=0,this.keyMap=new Map,this.timestamp=0,this.onContextmenu=e=>{e.preventDefault()},this.onMouseMove=e=>{this.mouseOver=!0,this.mouseX=e.offsetX,this.mouseY=e.offsetY},this.onMouseDown=e=>{switch(e.button){case 0:this.mouseLeft=!0,this.mouseLeftDownThisFrame=!0;break;case 1:this.mouseMiddle=!0,this.mouseMiddleDownThisFrame=!0;break;case 2:this.mouseRight=!0,this.mouseRightDownThisFrame=!0}},this.onMouseUp=e=>{switch(e.button){case 0:this.mouseLeft=!1,this.mouseLeftDownThisFrame=!1;break;case 1:this.mouseMiddle=!1,this.mouseMiddleDownThisFrame=!1;break;case 2:this.mouseRight=!1,this.mouseLeftDownThisFrame=!1}},this.onDblClick=e=>{this.dblClickThisFrame=!0},this.onMouseLeave=()=>{this.mouseOver=!1},this.onMouseOut=e=>{(e.clientY<=0||e.clientX<=0||e.clientX>=window.innerWidth||e.clientY>=window.innerHeight)&&(this.mouseLeft=!1,this.mouseLeftDownThisFrame=!1,this.mouseRight=!1,this.mouseLeftDownThisFrame=!1)},this.onWheel=e=>{e.preventDefault(),this.wheelDetX+=e.deltaX/100,this.wheelDetY+=e.deltaY/100},this.onKeyDown=e=>{const t=e.target;t&&"tagName"in t&&"INPUT"===t.tagName||(e.ctrlKey&&e.preventDefault(),this.keyMap.set(e.key,this.timestamp))},this.onKeyUp=e=>{const t=e.target;t&&"tagName"in t&&"INPUT"===t.tagName||this.keyMap.delete(e.key)},this.onBlur=()=>{this.keyMap.clear()}}setup(e){e.addEventListener("contextmenu",this.onContextmenu),e.addEventListener("mousemove",this.onMouseMove),e.addEventListener("mousedown",this.onMouseDown),e.addEventListener("dblclick",this.onDblClick),e.addEventListener("mouseleave",this.onMouseLeave),document.addEventListener("mouseup",this.onMouseUp),document.addEventListener("mouseout",this.onMouseOut),e.addEventListener("wheel",this.onWheel),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("keyup",this.onKeyUp),window.addEventListener("blur",this.onBlur)}unload(e){e.removeEventListener("contextmenu",this.onContextmenu),e.removeEventListener("mousemove",this.onMouseMove),e.removeEventListener("mousedown",this.onMouseDown),e.removeEventListener("dblclick",this.onDblClick),e.removeEventListener("mouseleave",this.onMouseLeave),document.removeEventListener("mouseup",this.onMouseUp),document.removeEventListener("mouseout",this.onMouseOut),e.removeEventListener("wheel",this.onWheel),window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("keyup",this.onKeyUp),window.removeEventListener("blur",this.onBlur)}update(){this.mouseLeftDownThisFrame=!1,this.mouseRightDownThisFrame=!1,this.mouseMiddleDownThisFrame=!1,this.wheelDetX=0,this.wheelDetY=0,this.timestamp+=1,this.dblClickThisFrame=!1}isKeyPressed(e){return this.keyMap.has(e)}isKeyPressedThisFrame(e){return this.keyMap.get(e)===this.timestamp}}class j{constructor(){const e=(this.canvas=document.createElement("canvas")).getContext("2d");if(!e)throw new Error("Failed to create canvas 2d context");this.ctx=e}static instance(){return j._instance||(j._instance=new j),j._instance}resize(e,t){e===this.canvas.width&&t===this.canvas.height||(this.canvas.width=e,this.canvas.height=t)}fitSize(e,t){(e>this.canvas.width||t>this.canvas.height)&&(this.canvas.width=Math.max(e,this.canvas.width),this.canvas.height=Math.max(t,this.canvas.height))}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}}const T="A".charCodeAt(0),A="Z".charCodeAt(0),C="a".charCodeAt(0),R="z".charCodeAt(0),S="0".charCodeAt(0),F="9".charCodeAt(0);function L(e,t,n){const r=[],o=function(e){const t=e.length,n=[];let r=0;for(let o=1;o<t;++o){const t=e.charCodeAt(o);t>=T&&t<=A||t>=C&&t<=R||t>=S&&t<=F||(n.push(e.substring(r,o)),r=o)}return r<=t-1&&n.push(e.substring(r,t)),n}(t);let i=[],s=0,a=0;return o.forEach(t=>{if("\n"===t)return r.push(i),a=Math.max(s,a),i=[],void(s=0);const o=e.measureText(t).width;s+o<=n?(s+=o,i.push(t)):i.length<1?(r.push([t]),a=Math.max(o,a)):(r.push(i),a=Math.max(s,a),s=o,i=[t])}),i.length&&(r.push(i),a=Math.max(s,a)),{lines:r.map(e=>e.join("").trim()),actualMaxWidth:a}}class k{constructor(){this._multiline=!1,this._textBaseline="alphabetic",this._fontStyle="normal",this._fontVariant="normal",this._fontWeight="normal",this._fontSize=12,this._fontFamily="sans-serif",this._lineSpacing=2,this._maxWidth=0,this._color="#ffffff",this.needsUpdateImageData=!0,this.needsUpdateTexture=!0}get text(){return this._text||""}set text(e){this._text!==e&&(this._text=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get multiline(){return this._multiline}set multiline(e){this._multiline!==e&&(this._multiline=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get textBaseline(){return this._textBaseline}set textBaseline(e){this._textBaseline!==e&&(this._textBaseline=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get fontStyle(){return this._fontStyle}set fontStyle(e){this._fontStyle!==e&&(this._fontStyle=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get fontVariant(){return this._fontVariant}set fontVariant(e){this._fontVariant!==e&&(this._fontVariant=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get fontWeight(){return this._fontWeight}set fontWeight(e){this._fontWeight!==e&&(this._fontWeight=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize!==e&&(this._fontSize=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get fontFamily(){return this._fontFamily}set fontFamily(e){this._fontFamily!==e&&(this._fontFamily=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get lineSpacing(){return this._lineSpacing}set lineSpacing(e){this._lineSpacing!==e&&(this._lineSpacing=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get maxWidth(){return this._maxWidth}set maxWidth(e){this._maxWidth!==e&&(this._maxWidth=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get color(){return this._color}set color(e){this._color!==e&&(this._color=e,this.needsUpdateImageData=!0,this.needsUpdateTexture=!0)}get width(){var e;return this.needsUpdateImageData&&this.updateImageData(),(null===(e=this._imageData)||void 0===e?void 0:e.width)||0}get height(){var e;return this.needsUpdateImageData&&this.updateImageData(),(null===(e=this._imageData)||void 0===e?void 0:e.height)||0}updateImageData(){const e=j.instance(),t=this.text||"",n=`${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${this.fontSize}px ${this.fontFamily}`,r=e.ctx;r.textBaseline=this.textBaseline,r.font=n;const o=r.measureText(t),i=o.actualBoundingBoxAscent,s=o.actualBoundingBoxDescent;let a,c;if(this.multiline){const e=L(r,t,this.maxWidth>0?this.maxWidth:1/0);a=e.lines,c=e.actualMaxWidth}else a=[t],c=o.width;const l=Math.ceil(c),u=Math.ceil((i+s)*a.length+Math.max(0,a.length-1)*this.lineSpacing);e.fitSize(l,u),e.clear(),r.fillStyle=this.color,r.textBaseline=this.textBaseline,r.font=n;let h=i;for(let e=0,t=a.length;e<t;++e)r.fillText(a[e],0,h),h+=i+s+this.lineSpacing;this._imageData=r.getImageData(0,0,l,u),this.needsUpdateImageData=!1}texture(e){return this.needsUpdateImageData&&this.updateImageData(),this._texture||(this.needsUpdateTexture=!0,this._texture=e.createEmptyTexture(1,1)),this.needsUpdateTexture&&(e.setTextureFromPixels(this._texture,this.width,this.height,this._imageData.data),this.needsUpdateTexture=!1),this._texture}dispose(e){this._texture&&(e.deleteTexture(this._texture),this._texture=void 0)}}const M=["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"],D=[["JAN","FEB","MAR","APR","MAY","JUN"],["JUL","AUG","SEP","OCT","NOV","DEC"],["1","2","3","4","5","6","7"],["8","9","10","11","12","13","14"],["15","16","17","18","19","20","21"],["22","23","24","25","26","27","28"],["29","30","31"]],B=[{color:[1,41/255,41/255],mask:[[1,1,1],[1,0,0],[1,0,0]]},{color:[1,122/255,41/255],mask:[[1,0,1],[1,1,1]]},{color:[250/255,208/255,46/255],mask:[[0,0,1],[1,1,1],[1,0,0]]},{color:[191/255,127/255,53/255],mask:[[0,0,1,1],[1,1,1,0]]},{color:[54/255,216/255,183/255],mask:[[1,0],[1,1],[1,0],[1,0]]},{color:[59/255,138/255,1],mask:[[1,1],[0,1],[0,1],[0,1]]},{color:[.6,30/255,249/255],mask:[[1,1,0],[1,1,1]]},{color:[1,93/255,205/255],mask:[[1,1,1],[1,1,1]]}],U=D.length,I=D.reduce((e,t)=>Math.max(e,t.length),0);class P{constructor(e,t){this.finished=!1,this.canceled=!1,this.name=e,this.step=t,this.finishedCallbacks=[],this.canceledCallbacks=[]}update(e){this.canceled||this.step(e)&&this.triggerFinished()}cancel(){this.canceled||(this.canceled=!0,this.canceledCallbacks.forEach(e=>e()))}triggerFinished(){this.finished||this.canceled||(this.finished=!0,this.finishedCallbacks.forEach(e=>e()))}onFinished(e){return this.finishedCallbacks.push(e),this}onCanceled(e){return this.canceledCallbacks.push(e),this}onFinishedOrCanceled(e){return this.finishedCallbacks.push(e),this.canceledCallbacks.push(e),this}}function N(e){return e}function V(e){return--e*e*e+1}function X(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1}class G{constructor(e,t,n,r=N){this.elapsed=0,this.finished=!1,this.duration=e,this.from=t,this.to=n,this.easingFunction=r}step(e){if(this.duration<=0)return this.finished=!0,this.from;this.elapsed+=e;const t=Math.min(this.elapsed/this.duration,1);return this.finished=1===t,this.easingFunction(t)*(this.to-this.from)+this.from}}class z{constructor(){this.animations=[]}update(e){this.animations.forEach(t=>t.update(e)),this.animations=this.animations.filter(e=>!(e.finished||e.canceled))}isPlaying(e){return this.animations.findIndex(t=>t.name===e&&!(t.finished||t.canceled))>=0}reset(){this.animations=[]}cancel(e){return this.animations.forEach(t=>{t.name===e&&t.cancel()}),this}create(e,t){const n=new P(e,t);return this.animations.push(n),n}sync(e,...t){const n=new P(e,()=>!1);this.animations.push(n);let r=t.length;return t.forEach(e=>{e.onFinishedOrCanceled(()=>{r-=1,0===r&&n.triggerFinished()})}),n.onCanceled(()=>{t.forEach(e=>e.cancel())}),n}delay(e,t){const n=new G(t,0,1);return this.create(e,e=>(n.step(e),n.finished))}isEmpty(){return this.animations.length<1}}class W{constructor(e){this.x=0,this.y=0,this.bottomLeftX=0,this.bottomLeftY=0,this.rotateOriginX=0,this.rotateOriginY=0,this.rotation=0,this.hover=!1,this.rotation90=0,this.flipX=!1,this.scaleX=1,this.animation=new z,this.mask=e.mask.map(e=>e.slice()),this.gridWidth=e.mask[0].length,this.gridHeight=e.mask.length,this.texWidth=42*this.gridWidth,this.texHeight=42*this.gridHeight,this.color=e.color}init(e){const t=42*this.gridWidth,n=42*this.gridHeight,r=this.mask,o=new Uint8Array(t*n*4);for(let e=0,i=t*n;e<i;++e){const n=Math.floor(e/t),i=e-n*t,s=Math.floor(n/42),a=Math.floor(i/42),c=255*r[s][a];o[4*e]=c,o[4*e+1]=c,o[4*e+2]=c,o[4*e+3]=c}this.texture=e.createTextureFromRgbaPixels(t,n,o)}update(e){this.animation.update(e),this.updatePosition()}updatePosition(){let e=this.x,t=this.y;switch(this.rotation90){case 1:t+=this.texHeight;break;case 2:e+=this.texWidth,t+=this.texHeight;break;case 3:e+=this.texWidth}e-=this.rotateOriginX+this.x,t-=this.rotateOriginY+this.y;const n=90*this.rotation90/180*Math.PI,r=Math.sin(n),o=Math.cos(n);[e,t]=[o*e-r*t,r*e+o*t],e+=this.rotateOriginX+this.x,t+=this.rotateOriginY+this.y,this.bottomLeftX=e,this.bottomLeftY=t}isMouseOver(e,t){const n=this.bottomLeftX,r=this.bottomLeftY;if(e<n||e>n+42*this.gridWidth||t<r||t>r+42*this.gridHeight)return!1;const o=this.mask;for(let i=0,s=o.length;i<s;++i){const a=o[i];for(let o=0,c=a.length;o<c;++o){if(!a[o])continue;const c=n+42*o,l=r+42*(s-1-i);if(e>=c&&e<=c+42&&t>=l&&t<=l+42)return!0}}return!1}rotate90(e,t){const n=this.gridWidth,r=this.gridHeight,o=this.mask,i=[];for(let e=0,t=o.length;e<t;++e){const t=o[e];for(let r=0,o=t.length;r<o;++r){const o=t[r],s=e,a=n-1-r;i[a]=i[a]||[],i[a][s]=o}}this.mask=i,[this.gridWidth,this.gridHeight]=[r,n];let s=-this.rotateOriginX,a=-this.rotateOriginY;const c=90*this.rotation90/180*Math.PI,l=Math.sin(c),u=Math.cos(c);[s,a]=[s*u-a*l,s*l+a*u],s+=this.rotateOriginX,a+=this.rotateOriginY,s+=this.x,a+=this.y,s-=e,a-=t,[s,a]=[s*u-a*-l,s*-l+a*u],s+=e,a+=t,this.x=s,this.y=a,this.rotation90=(this.rotation90+1)%4;let h=e-this.x,f=t-this.y;this.rotateOriginX=h,this.rotateOriginY=f;const d=new G(.3,90*(this.rotation90-1)/180*Math.PI,90*this.rotation90/180*Math.PI,V);return this.animation.cancel("rotation").create("rotation",e=>(this.rotation=d.step(e),d.finished))}setBottomLeftPosition(e,t){const n=this.x,r=this.y;e-=this.rotateOriginX+this.x,t-=this.rotateOriginY+this.y;const o=90*-this.rotation90/180*Math.PI,i=Math.sin(o),s=Math.cos(o);switch([e,t]=[e*s-t*i,e*i+t*s],e+=this.rotateOriginX+this.x,t+=this.rotateOriginY+this.y,this.rotation90){case 1:t-=this.texHeight;break;case 2:e-=this.texWidth,t-=this.texHeight;break;case 3:e-=this.texWidth}this.x=e,this.y=t;const a=e-n,c=t-r;this.rotateOriginX-=a,this.rotateOriginY-=c}flip(){this.rotation90%2?this.mask.reverse():this.mask.forEach(e=>e.reverse());const e=this.flipX,t=new G(.3,-1,1,X);return this.animation.cancel("scaleX").create("scaleX",n=>{const r=t.step(n);return this.scaleX=Math.abs(r),r>0&&(this.flipX=!e),t.finished})}}class H{constructor(){this.grids=D.map(e=>e.map(e=>{const t=new k;return t.text=e,t.color="black",t.fontSize=12,t})),this.pieces=B.map(e=>new W(e)),this.draggingPieceIndex=-1,this.dragStartMouseX=0,this.dragStartMouseY=0,this.dragStartDx=0,this.dragStartDy=0;const e=this.tips=new k;e.multiline=!0,e.text="Right Click: Rotate\n\tDouble Click: Flip",e.color="rgba(0,0,0,.5)",e.fontSize=12;const t=new Date,n=this.todayMonth=M[t.getMonth()],r=this.todayDay=t.getDate().toString();this.grids.forEach(e=>e.forEach(e=>{e.text===n||e.text===r?(e.fontWeight="bold",e.color="black"):e.color="rgba(0,0,0,.5)"}));const o=42*U,i=42*I;let s=0,a=0;this.pieces.forEach((e,t)=>{t<B.length/2?(e.x=-42-42*e.gridWidth,s+=e.gridHeight+.5):(e.x=o+42,a+=e.gridHeight+.5)}),s-=.5,a-=.5;const c=(i-42*s)/2,l=(i-42*a)/2;let u=0,h=0;this.pieces.forEach((e,t)=>{t<B.length/2?(e.y=42*u+c,u+=e.gridHeight+.5):(e.y=42*h+l,h+=e.gridHeight+.5)})}init(e){this.pieces.forEach(t=>t.init(e))}update(e,t,n){const r=42*U,o=42*I,i=(e.state.width-r)/2,s=(e.state.height-o)/2,a=t.mouseX-i,c=e.state.height-t.mouseY-s,l=this.pieces;let u=-1;if(this.draggingPieceIndex>=0){const e=l[this.draggingPieceIndex];t.mouseLeft?(u=this.draggingPieceIndex,e.x=this.dragStartDx+a-this.dragStartMouseX,e.y=this.dragStartDy+c-this.dragStartMouseY):(this.draggingPieceIndex=-1,this.snapToGrid(e)),t.dblClickThisFrame&&e.flip().onFinished(()=>{this.snapToGrid(e)})}else{for(let e=0,t=l.length;e<t;++e){const t=l[e];u>=0?t.hover=!1:(t.hover=t.isMouseOver(a,c),t.hover&&(u=e))}if(u>=0&&t.mouseLeft){this.draggingPieceIndex=u,this.dragStartMouseX=a,this.dragStartMouseY=c;const e=l[u];this.dragStartDx=e.x,this.dragStartDy=e.y}}if(u>=0&&t.mouseRightDownThisFrame){const e=l[u];e.rotate90(a,c).onFinished(()=>{this.snapToGrid(e)})}for(let e=0,t=l.length;e<t;++e){l[e].update(n)}e.centerCamera(),e.clearColor(1,1,1,1),e.clear(!0,!1,!1),e.begin2D(),e.blendMode(e.BLEND_MODE_PIGMENT),e.setColor(1,1,1,1),e.drawLabel(this.tips,i,s+o+4),e.setColor(242/255,242/255,242/255,1);const h=this.grids;for(let t=0;t<U;++t){for(let n=0,r=h[t].length;n<r;++n)e.drawRect(e.BLANK_WHITE,i+42*n,s+o-42*(t+1),42,42)}e.setColor(1,1,1,1);for(let t=0;t<U;++t){const n=h[t];for(let r=0,a=n.length;r<a;++r){const a=n[r];e.drawLabel(a,i+42*r+(42-a.width)/2,s+o-42*(t+1)+(42-a.height)/2)}}for(let t=0,n=l.length;t<n;++t){const n=l[t];n.texture&&(e.setColor(n.color[0],n.color[1],n.color[2],n.hover?.75:.5),e.draw(n.texture,i+n.x,s+n.y,n.texture.width,n.texture.height,n.flipX,!1,0,0,n.texture.width,n.texture.height,0,0,i+n.x+n.rotateOriginX,s+n.y+n.rotateOriginY,n.rotation,n.scaleX,1))}e.end2D()}snapToGrid(e){const t=Math.round(e.bottomLeftX/42),n=Math.round(e.bottomLeftY/42);t>=0&&t+e.gridWidth<=I&&n>=0&&n+e.gridHeight<=U&&e.setBottomLeftPosition(42*t,42*n)}}var $=Object(r.k)({setup(){const e=Object(l.j)(),t=new x,n=new _((function(e){i.update(o,t,e),t.update()}));let o;const i=new H;function s(){if(o){const e=document.body.getBoundingClientRect();o.resizeCanvas(e.width,e.height)}}Object(r.t)((function(){if(!e.value)throw new Error("Failed to create canvas");document.title="A Puzzle A Day",t.setup(e.value),o=new E(e.value),s(),i.init(o),n.start()})),Object(r.u)((function(){n.stop(),t.unload(o.canvas)}));const a=setInterval(s,100);return Object(r.u)((function(){clearInterval(a)})),{canvas:e}}});n(25);$.render=c,$.__scopeId="data-v-5ac3902a";t.a=$},,function(e,t,n){e.exports=n(27)},function(e,t,n){"use strict";n(8)},function(e,t,n){(t=n(4)(!1)).push([e.i,"\nhtml {\n    width: 100%;\n    height: 100%;\n}\nbody {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n}\n#app {\n    width: 100%;\n    height: 100%;\n    font-size: 14px;\n}\n::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n::-webkit-scrollbar-track {\n    background: transparent;\n}\n::-webkit-scrollbar-corner {\n    background: transparent;\n}\n::-webkit-scrollbar-thumb {\n    background: rgba(255, 255, 255, .1);\n}\n::-webkit-scrollbar-thumb:hover {\n    background: rgba(255, 255, 255, .2);\n}\n",""]),e.exports=t},function(e,t,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(e,t){return t?t.querySelector(e):document.querySelector(e)},c=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=a.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),l=null,u=0,h=[],f=n(21);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(y(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(y(r.parts[s],t));i[r.id]={id:r.id,refs:1,parts:a}}}}function p(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function m(e,t){var n=c(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),h.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(e.insertAt.before,n);n.insertBefore(t,o)}}function b(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=h.indexOf(e);t>=0&&h.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),m(e,t),t}function v(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var s=u++;n=l||(l=g(t)),r=E.bind(null,n,s,!1),o=E.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),m(e,t),t}(t),r=x.bind(null,n,t),o=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=_.bind(null,n),o=function(){b(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}e&&d(p(e,t),t);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var O,w=(O=[],function(e,t){return O[e]=t,O.filter(Boolean).join("\n")});function E(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function _(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function x(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=f(r)),o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")}))}},function(e,t,n){"use strict";n(9)},function(e,t,n){(t=n(4)(!1)).push([e.i,"#app>.dialog-mask[data-v-097f676b]{display:flex;align-items:center;position:fixed;z-index:9999;left:0;top:0;right:0;bottom:0}#app>.dialog-mask .dialog[data-v-097f676b]{margin:auto;padding:12px;background:#666;border:solid 1px #444;box-shadow:0 0 5px rgba(0,0,0,0.2);color:#fff}#app>.dialog-mask .dialog textarea[data-v-097f676b]{width:480px;height:260px;outline:none;resize:none;border:none;background:#444;color:#fff}#app>.dialog-mask .dialog button[data-v-097f676b]{box-sizing:border-box;padding:4px 12px;border:none;background:#444;color:#fff;font-size:14px;outline:none;transition:background-color .3s}#app>.dialog-mask .dialog button[data-v-097f676b]:hover{background-color:#555}#app>.dialog-mask .dialog button[data-v-097f676b]:active{background-color:#222}\n",""]),e.exports=t},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,l=[],u=!1,h=-1;function f(){u&&c&&(u=!1,c.length?l=c.concat(l):h=-1,l.length&&d())}function d(){if(!u){var e=a(f);u=!0;for(var t=l.length;t;){for(c=l,l=[];++h<t;)c&&c[h].run();h=-1,t=l.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new p(e,t)),1!==l.length||u||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";n(10)},function(e,t,n){(t=n(4)(!1)).push([e.i,".a-puzzle-a-day[data-v-5ac3902a]{width:100%;height:100%;background:#f2f2f2}.a-puzzle-a-day .link[data-v-5ac3902a]{position:fixed;z-index:1;left:8px;top:8px;color:rgba(0,0,0,0.5);user-select:none}.a-puzzle-a-day .link a[data-v-5ac3902a]{text-decoration:none;color:#409eff}\n",""]),e.exports=t},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n(2),i=n(0),s=Object(o.H)("data-v-097f676b");Object(o.z)("data-v-097f676b");var a={key:0,class:"dialog-mask"},c={class:"dialog"},l=Object(o.j)("div",{style:{"margin-bottom":".25em"}},"An error occurred.",-1),u={readonly:""},h={style:{"text-align":"right"}};Object(o.x)();var f=s((function(e,t,n,r,s,f){var d=Object(o.A)("router-view");return Object(o.w)(),Object(o.e)(o.b,null,[Object(o.j)(d),e.errorMessageWindowVisible?(Object(o.w)(),Object(o.e)("div",a,[Object(o.j)("div",c,[l,Object(o.j)("textarea",u,Object(i.J)(e.errorMessage),1),Object(o.j)("div",h,[Object(o.j)("button",{onClick:t[1]||(t[1]=function(t){return e.errorMessageWindowVisible=!1})},"Close")])])])):Object(o.f)("v-if",!0)],64)})),d=n(1),p=Object(o.k)({setup(){const e=Object(o.o)("errorSignal"),t=Object(d.j)(""),n=Object(d.j)(!1),r=e=>{console.error(e),e instanceof Error?t.value=e.stack+"":t.value=e+"",n.value=!0},i=e=>{r(e.error)},s=e=>{r(e.reason)};return e.addListener(r),window.addEventListener("error",i),window.addEventListener("unhandledrejection",s),Object(o.u)(()=>{e.removeListener(r),window.removeEventListener("error",i),window.removeEventListener("unhandledrejection",s)}),{errorMessage:t,errorMessageWindowVisible:n}}});n(18),n(22);p.render=f,p.__scopeId="data-v-097f676b";var m=p;var b=n(12);const g=Object(r.a)(m),v=new class{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}removeListener(e){const t=this.listeners.findIndex(t=>t===e);t>=0&&this.listeners.splice(t,1)}dispatch(e){this.listeners.forEach(t=>t(e))}};g.config.errorHandler=function(e,t,n){v.dispatch(e)},g.provide("errorSignal",v),g.use(b.a).mount("#app")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtY29yZS9kaXN0L3J1bnRpbWUtY29yZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9saWIvZXNtL2Vudi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlP2E5NTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MjVkZCIsIndlYnBhY2s6Ly8vLi9zcmMvYS1wdXp6bGUtYS1kYXkvQVB1enpsZUFEYXkudnVlP2Y3OTAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvZGV2dG9vbHMtYXBpL2xpYi9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvZGV2dG9vbHMtYXBpL2xpYi9lc20vY29uc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2EtcHV6emxlLWEtZGF5L0FQdXp6bGVBRGF5LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3JlbmRlci9GcmFtZUJ1ZmZlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3JlbmRlci9HZW9tZXRyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3JlbmRlci9UZXh0dXJlLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vcmVuZGVyL2dldC11bmlmb3JtLXNldHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3JlbmRlci9TaGFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9yZW5kZXIvc2hhZGVycy9jb2xvci0yZC5mcmFnIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vcmVuZGVyL1JlbmRlcmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vcmVuZGVyL3NoYWRlcnMvaW1hZ2UtMmQudmVydCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL3JlbmRlci9zaGFkZXJzL2ltYWdlLTJkLmZyYWciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9yZW5kZXIvc2hhZGVycy9jb2xvci0yZC52ZXJ0Iiwid2VicGFjazovLy8uL3NyYy9jb21tb24vdXRpbHMvUmVuZGVyTG9vcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYS1wdXp6bGUtYS1kYXkvSW5wdXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9yZW5kZXIvU2hhcmVkQ2FudmFzMkQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9yZW5kZXIvTGFiZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2EtcHV6emxlLWEtZGF5L2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FuaW1hdGlvbi9BbmltYXRpb25UYXNrLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21tb24vYW5pbWF0aW9uL2Vhc2luZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tbW9uL2FuaW1hdGlvbi9UcmFuc2l0aW9uVmFsdWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi9hbmltYXRpb24vQW5pbWF0aW9uVGFza0Rpc3BhdGNoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2EtcHV6emxlLWEtZGF5L1BpZWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9hLXB1enpsZS1hLWRheS9QdXp6bGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2EtcHV6emxlLWEtZGF5L0FQdXp6bGVBRGF5LnRzIiwid2VicGFjazovLy8uL3NyYy9hLXB1enpsZS1hLWRheS9BUHV6emxlQURheS52dWU/ZmMwNCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9hNGE2Iiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlPzE0NTkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC52dWU/MGM2MCIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT9hN2Y0Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2EtcHV6emxlLWEtZGF5L0FQdXp6bGVBRGF5LnZ1ZT9lOTFkIiwid2VicGFjazovLy8uL3NyYy9hLXB1enpsZS1hLWRheS9BUHV6emxlQURheS52dWU/NWM0OSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnRzIiwid2VicGFjazovLy8uL3NyYy9BcHAudnVlP2QyNWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbW1vbi91dGlscy9TaWduYWwudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsIm1hcCIsImxpc3QiLCJzcGxpdCIsImxlbmd0aCIsInZhbCIsInRvTG93ZXJDYXNlIiwiaXNHbG9iYWxseVdoaXRlbGlzdGVkIiwic3BlY2lhbEJvb2xlYW5BdHRycyIsImlzU3BlY2lhbEJvb2xlYW5BdHRyIiwibm9ybWFsaXplU3R5bGUiLCJpc0FycmF5IiwicmVzIiwiaXRlbSIsIm5vcm1hbGl6ZWQiLCJpc1N0cmluZyIsInBhcnNlU3RyaW5nU3R5bGUiLCJpc09iamVjdCIsImxpc3REZWxpbWl0ZXJSRSIsInByb3BlcnR5RGVsaW1pdGVyUkUiLCJjc3NUZXh0IiwicmV0IiwiZm9yRWFjaCIsInRtcCIsInRyaW0iLCJub3JtYWxpemVDbGFzcyIsImlzSFRNTFRhZyIsImlzU1ZHVGFnIiwibG9vc2VFcXVhbCIsImEiLCJiIiwiYVZhbGlkVHlwZSIsImlzRGF0ZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJrZXlzIiwiYUhhc0tleSIsImJIYXNLZXkiLCJTdHJpbmciLCJsb29zZUluZGV4T2YiLCJhcnIiLCJmaW5kSW5kZXgiLCJ0b0Rpc3BsYXlTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicmVwbGFjZXIiLCJfa2V5IiwiaXNNYXAiLCJzaXplIiwiZW50cmllcyIsInJlZHVjZSIsImlzU2V0IiwidmFsdWVzIiwiaXNQbGFpbk9iamVjdCIsIkVNUFRZX09CSiIsIkVNUFRZX0FSUiIsIk5PT1AiLCJOTyIsIm9uUkUiLCJpc09uIiwidGVzdCIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJleHRlbmQiLCJhc3NpZ24iLCJyZW1vdmUiLCJlbCIsImluZGV4T2YiLCJzcGxpY2UiLCJoYXNPd24iLCJBcnJheSIsInRvVHlwZVN0cmluZyIsIkRhdGUiLCJpc0Z1bmN0aW9uIiwiaXNTeW1ib2wiLCJpc1Byb21pc2UiLCJ0aGVuIiwiY2F0Y2giLCJvYmplY3RUb1N0cmluZyIsInRvU3RyaW5nIiwidG9SYXdUeXBlIiwic2xpY2UiLCJpc0ludGVnZXJLZXkiLCJwYXJzZUludCIsImlzUmVzZXJ2ZWRQcm9wIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImZuIiwiY2FjaGUiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsInRvVXBwZXJDYXNlIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwidG9IYW5kbGVyS2V5IiwiaGFzQ2hhbmdlZCIsIm9sZFZhbHVlIiwiaW52b2tlQXJyYXlGbnMiLCJmbnMiLCJhcmciLCJkZWYiLCJvYmoiLCJjb25maWd1cmFibGUiLCJ0b051bWJlciIsInBhcnNlRmxvYXQiLCJpc05hTiIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJlZmZlY3RTdGFjayIsImFjdGl2ZUVmZmVjdCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImVmZmVjdCIsIm9wdGlvbnMiLCJfaXNFZmZlY3QiLCJpc0VmZmVjdCIsInJhdyIsImFjdGl2ZSIsImluY2x1ZGVzIiwiY2xlYW51cCIsInRyYWNrU3RhY2siLCJwdXNoIiwic2hvdWxkVHJhY2siLCJwb3AiLCJyZXNldFRyYWNraW5nIiwiaWQiLCJ1aWQiLCJhbGxvd1JlY3Vyc2UiLCJkZXBzIiwiY3JlYXRlUmVhY3RpdmVFZmZlY3QiLCJsYXp5Iiwic3RvcCIsIm9uU3RvcCIsImRlbGV0ZSIsInBhdXNlVHJhY2tpbmciLCJsYXN0IiwidW5kZWZpbmVkIiwidHJhY2siLCJ0YXJnZXQiLCJ0eXBlIiwiZGVwc01hcCIsInNldCIsIk1hcCIsImRlcCIsIlNldCIsImhhcyIsImFkZCIsInRyaWdnZXIiLCJuZXdWYWx1ZSIsIm9sZFRhcmdldCIsImVmZmVjdHMiLCJlZmZlY3RzVG9BZGQiLCJzY2hlZHVsZXIiLCJpc05vblRyYWNrYWJsZUtleXMiLCJidWlsdEluU3ltYm9scyIsImdldE93blByb3BlcnR5TmFtZXMiLCJmaWx0ZXIiLCJjcmVhdGVHZXR0ZXIiLCJzaGFsbG93R2V0IiwicmVhZG9ubHlHZXQiLCJzaGFsbG93UmVhZG9ubHlHZXQiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJpc1JlYWRvbmx5Iiwic2hhbGxvdyIsInJlY2VpdmVyIiwic2hhbGxvd1JlYWRvbmx5TWFwIiwicmVhZG9ubHlNYXAiLCJzaGFsbG93UmVhY3RpdmVNYXAiLCJyZWFjdGl2ZU1hcCIsInRhcmdldElzQXJyYXkiLCJSZWZsZWN0IiwiaXNSZWYiLCJyZWFkb25seSIsInJlYWN0aXZlIiwibWV0aG9kIiwiYXJncyIsInRvUmF3IiwidGhpcyIsImFwcGx5IiwiY3JlYXRlU2V0dGVyIiwic2hhbGxvd1NldCIsImhhZEtleSIsIk51bWJlciIsInJlc3VsdCIsIm11dGFibGVIYW5kbGVycyIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsInJlYWRvbmx5SGFuZGxlcnMiLCJzaGFsbG93UmVhY3RpdmVIYW5kbGVycyIsInRvUmVhY3RpdmUiLCJ0b1JlYWRvbmx5IiwidG9TaGFsbG93IiwiZ2V0UHJvdG8iLCJ2IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXQkMSIsImlzU2hhbGxvdyIsInJhd1RhcmdldCIsInJhd0tleSIsIndyYXAiLCJoYXMkMSIsInNldCQxIiwiZGVsZXRlRW50cnkiLCJjbGVhciIsImhhZEl0ZW1zIiwiY3JlYXRlRm9yRWFjaCIsImNhbGxiYWNrIiwidGhpc0FyZyIsIm9ic2VydmVkIiwiY3JlYXRlSXRlcmFibGVNZXRob2QiLCJ0YXJnZXRJc01hcCIsImlzUGFpciIsIml0ZXJhdG9yIiwiaXNLZXlPbmx5IiwiaW5uZXJJdGVyYXRvciIsImRvbmUiLCJuZXh0IiwiY3JlYXRlUmVhZG9ubHlNZXRob2QiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsImluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzIiwic2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyIsInJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzIiwiY3JlYXRlUmVhY3RpdmVPYmplY3QiLCJzaGFsbG93UmVhY3RpdmUiLCJiYXNlSGFuZGxlcnMiLCJjb2xsZWN0aW9uSGFuZGxlcnMiLCJwcm94eU1hcCIsImV4aXN0aW5nUHJveHkiLCJ0YXJnZXRUeXBlIiwiaXNFeHRlbnNpYmxlIiwicmF3VHlwZSIsInRhcmdldFR5cGVNYXAiLCJwcm94eSIsIlByb3h5IiwiaXNSZWFjdGl2ZSIsImlzUHJveHkiLCJjb252ZXJ0IiwiQm9vbGVhbiIsIl9fdl9pc1JlZiIsInJlZiIsImNyZWF0ZVJlZiIsInNoYWxsb3dSZWYiLCJSZWZJbXBsIiwiX3Jhd1ZhbHVlIiwiX3NoYWxsb3ciLCJfdmFsdWUiLCJuZXdWYWwiLCJyYXdWYWx1ZSIsInVucmVmIiwic2hhbGxvd1Vud3JhcEhhbmRsZXJzIiwicHJveHlSZWZzIiwib2JqZWN0V2l0aFJlZnMiLCJPYmplY3RSZWZJbXBsIiwiX29iamVjdCIsInRvUmVmIiwiQ29tcHV0ZWRSZWZJbXBsIiwiX3NldHRlciIsIl9kaXJ0eSIsInNlbGYiLCJjb21wdXRlZCIsImdldHRlck9yT3B0aW9ucyIsInNldHRlciIsInN0YWNrIiwid2FybiIsIm1zZyIsImluc3RhbmNlIiwiY29tcG9uZW50IiwiYXBwV2FybkhhbmRsZXIiLCJhcHBDb250ZXh0IiwiY29uZmlnIiwid2FybkhhbmRsZXIiLCJ0cmFjZSIsImN1cnJlbnRWTm9kZSIsIm5vcm1hbGl6ZWRTdGFjayIsInZub2RlIiwicmVjdXJzZUNvdW50IiwicGFyZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJnZXRDb21wb25lbnRUcmFjZSIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsImpvaW4iLCJmb3JtYXRDb21wb25lbnROYW1lIiwid2FybkFyZ3MiLCJsb2dzIiwiZW50cnkiLCJwb3N0Zml4IiwiaXNSb290Iiwib3BlbiIsImNsb3NlIiwicHJvcHMiLCJmb3JtYXRQcm9wcyIsImZvcm1hdFRyYWNlRW50cnkiLCJmb3JtYXRUcmFjZSIsImNvbnNvbGUiLCJmb3JtYXRQcm9wIiwiZXJyIiwiaGFuZGxlRXJyb3IiLCJjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyIsInRocm93SW5EZXYiLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImFwcEVycm9ySGFuZGxlciIsImVycm9ySGFuZGxlciIsImNvbnRleHRWTm9kZSIsImVycm9yIiwibG9nRXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJxdWV1ZSIsImZsdXNoSW5kZXgiLCJwZW5kaW5nUHJlRmx1c2hDYnMiLCJhY3RpdmVQcmVGbHVzaENicyIsInByZUZsdXNoSW5kZXgiLCJwZW5kaW5nUG9zdEZsdXNoQ2JzIiwiYWN0aXZlUG9zdEZsdXNoQ2JzIiwicG9zdEZsdXNoSW5kZXgiLCJyZXNvbHZlZFByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IiLCJuZXh0VGljayIsInF1ZXVlSm9iIiwiam9iIiwicG9zIiwic3RhcnQiLCJlbmQiLCJqb2JJZCIsImdldElkIiwibWlkZGxlIiwiZmluZEluc2VydGlvbkluZGV4IiwicXVldWVGbHVzaCIsImZsdXNoSm9icyIsInF1ZXVlQ2IiLCJjYiIsImFjdGl2ZVF1ZXVlIiwicGVuZGluZ1F1ZXVlIiwiaW5kZXgiLCJxdWV1ZVBvc3RGbHVzaENiIiwiZmx1c2hQcmVGbHVzaENicyIsInNlZW4iLCJwYXJlbnRKb2IiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiSW5maW5pdHkiLCJlbWl0IiwiZXZlbnQiLCJyYXdBcmdzIiwibW9kZWxBcmciLCJtb2RpZmllcnNLZXkiLCJudW1iZXIiLCJoYW5kbGVyTmFtZSIsImhhbmRsZXIiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJjb21wIiwiYXNNaXhpbiIsImVtaXRzQ2FjaGUiLCJjYWNoZWQiLCJlbWl0cyIsImhhc0V4dGVuZHMiLCJleHRlbmRFbWl0cyIsIm5vcm1hbGl6ZWRGcm9tRXh0ZW5kIiwibWl4aW5zIiwiZXh0ZW5kcyIsImlzRW1pdExpc3RlbmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiY3VycmVudFNjb3BlSWQiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJwcmV2IiwiX19zY29wZUlkIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJfaWQiLCJ3aXRoQ3R4IiwiY3R4IiwiaXNOb25TY29wZWRTbG90IiwiX24iLCJyZW5kZXJGbldpdGhDb250ZXh0IiwiX2QiLCJzZXRCbG9ja1RyYWNraW5nIiwicHJldkluc3RhbmNlIiwiX2MiLCJyZW5kZXJDb21wb25lbnRSb290IiwiQ29tcG9uZW50Iiwid2l0aFByb3h5IiwicHJvcHNPcHRpb25zIiwic2xvdHMiLCJhdHRycyIsInJlbmRlciIsInJlbmRlckNhY2hlIiwiZGF0YSIsInNldHVwU3RhdGUiLCJpbmhlcml0QXR0cnMiLCJmYWxsdGhyb3VnaEF0dHJzIiwic2hhcGVGbGFnIiwicHJveHlUb1VzZSIsIm5vcm1hbGl6ZVZOb2RlIiwiZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoIiwicm9vdCIsInNvbWUiLCJmaWx0ZXJNb2RlbExpc3RlbmVycyIsImNsb25lVk5vZGUiLCJkaXJzIiwiY29uY2F0IiwidHJhbnNpdGlvbiIsImJsb2NrU3RhY2siLCJjcmVhdGVWTm9kZSIsIkNvbW1lbnQkMSIsImhhc1Byb3BzQ2hhbmdlZCIsInByZXZQcm9wcyIsIm5leHRQcm9wcyIsImVtaXRzT3B0aW9ucyIsIm5leHRLZXlzIiwidXBkYXRlSE9DSG9zdEVsIiwic3ViVHJlZSIsInF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlIiwic3VzcGVuc2UiLCJwZW5kaW5nQnJhbmNoIiwicHJvdmlkZSIsImN1cnJlbnRJbnN0YW5jZSIsInByb3ZpZGVzIiwicGFyZW50UHJvdmlkZXMiLCJpbmplY3QiLCJkZWZhdWx0VmFsdWUiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJhcmd1bWVudHMiLCJ3YXRjaEVmZmVjdCIsImRvV2F0Y2giLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJ3YXRjaCIsInNvdXJjZSIsImltbWVkaWF0ZSIsImRlZXAiLCJmbHVzaCIsIm9uVHJhY2siLCJvblRyaWdnZXIiLCJmb3JjZVRyaWdnZXIiLCJpc011bHRpU291cmNlIiwidHJhdmVyc2UiLCJpc1VubW91bnRlZCIsIm9uSW52YWxpZGF0ZSIsImJhc2VHZXR0ZXIiLCJydW5uZXIiLCJxdWV1ZVBvc3RSZW5kZXJFZmZlY3QiLCJpc01vdW50ZWQiLCJxdWV1ZVByZUZsdXNoQ2IiLCJyZWNvcmRJbnN0YW5jZUJvdW5kRWZmZWN0IiwiaW5zdGFuY2VXYXRjaCIsInB1YmxpY1RoaXMiLCJjcmVhdGVQYXRoR2V0dGVyIiwicGF0aCIsInNlZ21lbnRzIiwidXNlVHJhbnNpdGlvblN0YXRlIiwic3RhdGUiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25Nb3VudGVkIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJGdW5jdGlvbiIsIkJhc2VUcmFuc2l0aW9uIiwiYXBwZWFyIiwicGVyc2lzdGVkIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsImdldEN1cnJlbnRJbnN0YW5jZSIsInByZXZUcmFuc2l0aW9uS2V5IiwiY2hpbGRyZW4iLCJkZWZhdWx0IiwiZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuIiwicmF3UHJvcHMiLCJjaGlsZCIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwib2xkSW5uZXJDaGlsZCIsInRyYW5zaXRpb25LZXlDaGFuZ2VkIiwiZ2V0VHJhbnNpdGlvbktleSIsImlzU2FtZVZOb2RlVHlwZSIsImxlYXZpbmdIb29rcyIsImFmdGVyTGVhdmUiLCJ1cGRhdGUiLCJkZWxheUxlYXZlIiwiZWFybHlSZW1vdmUiLCJkZWxheWVkTGVhdmUiLCJnZXRMZWF2aW5nTm9kZXNGb3JUeXBlIiwiX2xlYXZlQ2IiLCJsZWF2aW5nVk5vZGVzQ2FjaGUiLCJjYWxsSG9vayIsImhvb2siLCJob29rcyIsImxlYXZpbmdWTm9kZSIsImFmdGVySG9vayIsImNhbmNlbEhvb2siLCJjYWxsZWQiLCJfZW50ZXJDYiIsImNhbmNlbGxlZCIsImNsb25lIiwiaXNLZWVwQWxpdmUiLCJzc0NvbnRlbnQiLCJzc0ZhbGxiYWNrIiwia2VlcENvbW1lbnQiLCJrZXllZEZyYWdtZW50Q291bnQiLCJGcmFnbWVudCIsInBhdGNoRmxhZyIsImRlZmluZUNvbXBvbmVudCIsInNldHVwIiwiaXNBc3luY1dyYXBwZXIiLCJfX2FzeW5jTG9hZGVyIiwiX19pc0tlZXBBbGl2ZSIsIlJlZ0V4cCIsIm1hdGNoZXMiLCJwYXR0ZXJuIiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwid3JhcHBlZEhvb2siLCJfX3dkYyIsImN1cnJlbnQiLCJpc0RlYWN0aXZhdGVkIiwiaW5qZWN0SG9vayIsImluamVjdFRvS2VlcEFsaXZlUm9vdCIsImtlZXBBbGl2ZVJvb3QiLCJpbmplY3RlZCIsIm9uVW5tb3VudGVkIiwicmVzZXRTaGFwZUZsYWciLCJnZXRJbm5lckNoaWxkIiwicHJlcGVuZCIsIl9fd2VoIiwic2V0Q3VycmVudEluc3RhbmNlIiwidW5zaGlmdCIsImNyZWF0ZUhvb2siLCJsaWZlY3ljbGUiLCJpc0luU1NSQ29tcG9uZW50U2V0dXAiLCJvbkJlZm9yZU1vdW50Iiwib25CZWZvcmVVcGRhdGUiLCJvblVwZGF0ZWQiLCJvblNlcnZlclByZWZldGNoIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJzaG91bGRDYWNoZUFjY2VzcyIsImFwcGx5T3B0aW9ucyIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiYmVmb3JlQ3JlYXRlIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJtZXRob2RzIiwid2F0Y2hPcHRpb25zIiwicHJvdmlkZU9wdGlvbnMiLCJpbmplY3RPcHRpb25zIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwibW91bnRlZCIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImJlZm9yZURlc3Ryb3kiLCJiZWZvcmVVbm1vdW50IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwicmVuZGVyVHJhY2tlZCIsInJlbmRlclRyaWdnZXJlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCIsImV4cG9zZSIsImNvbXBvbmVudHMiLCJkaXJlY3RpdmVzIiwiZmlsdGVycyIsImNoZWNrRHVwbGljYXRlUHJvcGVydGllcyIsIm5vcm1hbGl6ZUluamVjdCIsIm9wdCIsImZyb20iLCJyZXNvbHZlSW5qZWN0aW9ucyIsIm1ldGhvZEhhbmRsZXIiLCJjcmVhdGVXYXRjaGVyIiwicmVnaXN0ZXJMaWZlY3ljbGVIb29rIiwicmVnaXN0ZXIiLCJfaG9vayIsImV4cG9zZWQiLCJoIiwiYmFzZSIsImV4dGVuZHNPcHRpb25zIiwiZ2xvYmFsTWl4aW5zIiwib3B0aW9uc0NhY2hlIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicmVzb2x2ZWQiLCJtZXJnZU9wdGlvbnMiLCJ0byIsInN0cmF0cyIsInN0cmF0IiwiaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyIsIm1lcmdlRGF0YUZuIiwibWVyZ2VPYmplY3RPcHRpb25zIiwibWVyZ2VIb29rIiwic2V0RnVsbFByb3BzIiwibmVlZENhc3RLZXlzIiwicmF3Q2FzdFZhbHVlcyIsImhhc0F0dHJzQ2hhbmdlZCIsImNhbWVsS2V5IiwicmF3Q3VycmVudFByb3BzIiwiY2FzdFZhbHVlcyIsInJlc29sdmVQcm9wVmFsdWUiLCJpc0Fic2VudCIsImhhc0RlZmF1bHQiLCJwcm9wc0RlZmF1bHRzIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwicHJvcHNDYWNoZSIsImV4dGVuZFByb3BzIiwibm9ybWFsaXplZEtleSIsInZhbGlkYXRlUHJvcE5hbWUiLCJwcm9wIiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRUeXBlIiwiY3RvciIsIm1hdGNoIiwiaXNTYW1lVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwiYmluZGluZ3MiLCJvbGRCaW5kaW5ncyIsImJpbmRpbmciLCJkaXIiLCJjcmVhdGVBcHBDb250ZXh0IiwiYXBwIiwiaXNOYXRpdmVUYWciLCJwZXJmb3JtYW5jZSIsImdsb2JhbFByb3BlcnRpZXMiLCJjb21waWxlck9wdGlvbnMiLCJjcmVhdGVBcHBBUEkiLCJoeWRyYXRlIiwicm9vdENvbXBvbmVudCIsInJvb3RQcm9wcyIsImNvbnRleHQiLCJpbnN0YWxsZWRQbHVnaW5zIiwiX3VpZCIsIl9jb21wb25lbnQiLCJfcHJvcHMiLCJfY29udGFpbmVyIiwiX2NvbnRleHQiLCJ2ZXJzaW9uIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbCIsIm1peGluIiwiZGlyZWN0aXZlIiwicm9vdENvbnRhaW5lciIsImlzSHlkcmF0ZSIsImlzU1ZHIiwiX192dWVfYXBwX18iLCJoYXNNaXNtYXRjaCIsImlzU1ZHQ29udGFpbmVyIiwiY29udGFpbmVyIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzQ29tbWVudCIsIm5vZGUiLCJub2RlVHlwZSIsImNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyIsInJlbmRlcmVySW50ZXJuYWxzIiwibXQiLCJtb3VudENvbXBvbmVudCIsInBhdGNoIiwicGF0Y2hQcm9wIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwiaW5zZXJ0IiwiY3JlYXRlQ29tbWVudCIsImh5ZHJhdGVOb2RlIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJzbG90U2NvcGVJZHMiLCJvcHRpbWl6ZWQiLCJpc0ZyYWdtZW50U3RhcnQiLCJvbk1pc21hdGNoIiwiaGFuZGxlTWlzbWF0Y2giLCJkb21UeXBlIiwibmV4dE5vZGUiLCJUZXh0IiwiU3RhdGljIiwibmVlZFRvQWRvcHRDb250ZW50Iiwic3RhdGljQ291bnQiLCJvdXRlckhUTUwiLCJhbmNob3IiLCJoeWRyYXRlRnJhZ21lbnQiLCJoeWRyYXRlRWxlbWVudCIsImxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImNyZWF0ZVRleHRWTm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsInNldFJlZiIsImR5bmFtaWNDaGlsZHJlbiIsIm9uQ2xpY2siLCJ2bm9kZUhvb2tzIiwib25Wbm9kZUJlZm9yZU1vdW50IiwiaW52b2tlVk5vZGVIb29rIiwib25Wbm9kZU1vdW50ZWQiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJwYXJlbnRWTm9kZSIsImZyYWdtZW50U2xvdFNjb3BlSWRzIiwiaXNGcmFnbWVudCIsInByb2RFZmZlY3RPcHRpb25zIiwicmF3UmVmIiwib2xkUmF3UmVmIiwiaXNVbm1vdW50IiwicmVmVmFsdWUiLCJvd25lciIsIm9sZFJlZiIsInJlZnMiLCJkb1NldCIsImNyZWF0ZVJlbmRlcmVyIiwiYmFzZUNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJob3N0SW5zZXJ0IiwiaG9zdFJlbW92ZSIsImhvc3RQYXRjaFByb3AiLCJmb3JjZVBhdGNoUHJvcCIsImhvc3RGb3JjZVBhdGNoUHJvcCIsImNyZWF0ZUVsZW1lbnQiLCJob3N0Q3JlYXRlRWxlbWVudCIsImNyZWF0ZVRleHQiLCJob3N0Q3JlYXRlVGV4dCIsImhvc3RDcmVhdGVDb21tZW50Iiwic2V0VGV4dCIsImhvc3RTZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJob3N0UGFyZW50Tm9kZSIsImhvc3ROZXh0U2libGluZyIsInNldFNjb3BlSWQiLCJob3N0U2V0U2NvcGVJZCIsImNsb25lTm9kZSIsImhvc3RDbG9uZU5vZGUiLCJpbnNlcnRTdGF0aWNDb250ZW50IiwiaG9zdEluc2VydFN0YXRpY0NvbnRlbnQiLCJuMSIsIm4yIiwiZ2V0TmV4dEhvc3ROb2RlIiwidW5tb3VudCIsInByb2Nlc3NUZXh0IiwicHJvY2Vzc0NvbW1lbnROb2RlIiwibW91bnRTdGF0aWNOb2RlIiwicHJvY2Vzc0ZyYWdtZW50IiwicHJvY2Vzc0VsZW1lbnQiLCJwcm9jZXNzQ29tcG9uZW50IiwicHJvY2VzcyIsImludGVybmFscyIsInJlbW92ZVN0YXRpY05vZGUiLCJtb3VudEVsZW1lbnQiLCJwYXRjaEVsZW1lbnQiLCJ2bm9kZUhvb2siLCJpcyIsIm1vdW50Q2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJzY29wZUlkIiwibmVlZENhbGxUcmFuc2l0aW9uSG9va3MiLCJiZWZvcmVFbnRlciIsImVudGVyIiwiY2xvbmVJZk1vdW50ZWQiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsInBhdGNoUHJvcHMiLCJjbGFzcyIsInN0eWxlIiwicHJvcHNUb1VwZGF0ZSIsImR5bmFtaWNQcm9wcyIsImFyZUNoaWxkcmVuU1ZHIiwicGF0Y2hCbG9ja0NoaWxkcmVuIiwicGF0Y2hDaGlsZHJlbiIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInRyYXZlcnNlU3RhdGljQ2hpbGRyZW4iLCJhY3RpdmF0ZSIsInVwZGF0ZUNvbXBvbmVudCIsImluaXRpYWxWTm9kZSIsImVtcHR5QXBwQ29udGV4dCIsInVpZCQxIiwiYWNjZXNzQ2FjaGUiLCJzZXR1cENvbnRleHQiLCJzdXNwZW5zZUlkIiwicGVuZGluZ0lkIiwiYXN5bmNEZXAiLCJhc3luY1Jlc29sdmVkIiwiYmMiLCJibSIsImJ1IiwidSIsInVtIiwiYnVtIiwiZGEiLCJydGciLCJydGMiLCJzcCIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlIiwicmVuZGVyZXIiLCJpc1NTUiIsImlzU3RhdGVmdWwiLCJpc1N0YXRlZnVsQ29tcG9uZW50IiwiSW50ZXJuYWxPYmplY3RLZXkiLCJpbml0UHJvcHMiLCJpbml0U2xvdHMiLCJzZXR1cFJlc3VsdCIsIlB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsImNyZWF0ZVNldHVwQ29udGV4dCIsInJlc29sdmVkUmVzdWx0IiwiaGFuZGxlU2V0dXBSZXN1bHQiLCJlIiwiZmluaXNoQ29tcG9uZW50U2V0dXAiLCJzZXR1cFN0YXRlZnVsQ29tcG9uZW50Iiwic2V0dXBDb21wb25lbnQiLCJyZWdpc3RlckRlcCIsInNldHVwUmVuZGVyRWZmZWN0IiwicGxhY2Vob2xkZXIiLCJuZXh0Vk5vZGUiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0Q2hpbGRyZW4iLCIkc3RhYmxlIiwic2hvdWxkVXBkYXRlQ29tcG9uZW50IiwidXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyIiwiaW52YWxpZGF0ZUpvYiIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInByZXZUcmVlIiwiaHlkcmF0ZVN1YlRyZWUiLCJzY29wZWRJbml0aWFsVk5vZGUiLCJyYXdQcmV2UHJvcHMiLCJrZWJhYktleSIsImNhbWVsaXplZEtleSIsInVwZGF0ZVByb3BzIiwibmVlZERlbGV0aW9uQ2hlY2siLCJkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQiLCJ1cGRhdGVTbG90cyIsImMxIiwicHJldlNoYXBlRmxhZyIsImMyIiwicGF0Y2hLZXllZENoaWxkcmVuIiwicGF0Y2hVbmtleWVkQ2hpbGRyZW4iLCJvbGRMZW5ndGgiLCJuZXdMZW5ndGgiLCJjb21tb25MZW5ndGgiLCJNYXRoIiwibWluIiwibmV4dENoaWxkIiwicGFyZW50QW5jaG9yIiwibDIiLCJlMSIsImUyIiwibmV4dFBvcyIsInMxIiwiczIiLCJrZXlUb05ld0luZGV4TWFwIiwiaiIsInBhdGNoZWQiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJsZW4iLCJhcnJJIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlIiwibW92ZVR5cGUiLCJtb3ZlU3RhdGljTm9kZSIsImxlYXZlIiwicGVyZm9ybUxlYXZlIiwiZG9SZW1vdmUiLCJkZWFjdGl2YXRlIiwic2hvdWxkSW52b2tlRGlycyIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsIm9uVm5vZGVVbm1vdW50ZWQiLCJyZW1vdmVGcmFnbWVudCIsInBlcmZvcm1SZW1vdmUiLCJfdm5vZGUiLCJtYyIsInBjIiwicGJjIiwiY3JlYXRlQXBwIiwiY2gxIiwiY2gyIiwicmVzb2x2ZUNvbXBvbmVudCIsIm1heWJlU2VsZlJlZmVyZW5jZSIsInJlc29sdmVBc3NldCIsIk5VTExfRFlOQU1JQ19DT01QT05FTlQiLCJ3YXJuTWlzc2luZyIsInNlbGZOYW1lIiwiZ2V0Q29tcG9uZW50TmFtZSIsInJlZ2lzdHJ5IiwiY3VycmVudEJsb2NrIiwib3BlbkJsb2NrIiwiZGlzYWJsZVRyYWNraW5nIiwiY2xvc2VCbG9jayIsImlzQmxvY2tUcmVlRW5hYmxlZCIsImNyZWF0ZUJsb2NrIiwiaXNWTm9kZSIsIl9fdl9pc1ZOb2RlIiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwiX2NyZWF0ZVZOb2RlIiwiaXNCbG9ja05vZGUiLCJjbG9uZWQiLCJub3JtYWxpemVDaGlsZHJlbiIsImlzQ2xhc3NDb21wb25lbnQiLCJfX3ZjY09wdHMiLCJrbGFzcyIsIl9faXNTdXNwZW5zZSIsImlzU3VzcGVuc2UiLCJfX2lzVGVsZXBvcnQiLCJpc1RlbGVwb3J0IiwiX192X3NraXAiLCJ0YXJnZXRBbmNob3IiLCJub3JtYWxpemUiLCJleHRyYVByb3BzIiwibWVyZ2VSZWYiLCJtZXJnZWRQcm9wcyIsInRvTWVyZ2UiLCJleGlzdGluZyIsImluY29taW5nIiwibWVyZ2VQcm9wcyIsInRleHQiLCJmbGFnIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiYXNCbG9jayIsInNsb3QiLCJzbG90RmxhZyIsImdldFB1YmxpY0luc3RhbmNlIiwicHVibGljUHJvcGVydGllc01hcCIsIiQiLCIkZWwiLCIkZGF0YSIsIiRwcm9wcyIsIiRhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwiJHBhcmVudCIsIiRyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsIm5vcm1hbGl6ZWRQcm9wcyIsInB1YmxpY0dldHRlciIsImNzc01vZHVsZSIsIl9fY3NzTW9kdWxlcyIsIlJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsInVuc2NvcGFibGVzIiwiY29tcGlsZSIsImlzUnVudGltZU9ubHkiLCJza2lwT3B0aW9ucyIsInRlbXBsYXRlIiwiaXNDdXN0b21FbGVtZW50IiwiZGVsaW1pdGVycyIsImNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyIsImZpbmFsQ29tcGlsZXJPcHRpb25zIiwiX3JjIiwiY2xhc3NpZnlSRSIsImRpc3BsYXlOYW1lIiwiX19maWxlIiwiaW5mZXJGcm9tUmVnaXN0cnkiLCJwcm9wc09yQ2hpbGRyZW4iLCJzdmdOUyIsImRvYyIsImRvY3VtZW50IiwidGVtcENvbnRhaW5lciIsInRlbXBTVkdDb250YWluZXIiLCJub2RlT3BzIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlQ2hpbGQiLCJ0YWciLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwicXVlcnlTZWxlY3RvciIsInNlbGVjdG9yIiwiY29udGVudCIsInRlbXAiLCJmaXJzdCIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJzZXRQcm9wZXJ0eSIsInByZWZpeGVkIiwicmF3TmFtZSIsInByZWZpeENhY2hlIiwicHJlZml4ZXMiLCJhdXRvUHJlZml4IiwieGxpbmtOUyIsIl9nZXROb3ciLCJub3ciLCJza2lwVGltZXN0YW1wQ2hlY2siLCJ3aW5kb3ciLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImZmTWF0Y2giLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJjYWNoZWROb3ciLCJyZXNldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXRjaEV2ZW50IiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwiaW52b2tlcnMiLCJfdmVpIiwiZXhpc3RpbmdJbnZva2VyIiwib3B0aW9uc01vZGlmaWVyUkUiLCJwYXJzZU5hbWUiLCJpbml0aWFsVmFsdWUiLCJpbnZva2VyIiwiYXR0YWNoZWQiLCJvcmlnaW5hbFN0b3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZ2V0Tm93IiwiY3JlYXRlSW52b2tlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYXRpdmVPblJFIiwiVHJhbnNpdGlvbiIsInJlc29sdmVUcmFuc2l0aW9uUHJvcHMiLCJET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwiY3NzIiwiZHVyYXRpb24iLCJlbnRlckZyb21DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJhcHBlYXJGcm9tQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJsZWF2ZUZyb21DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJoYXNFeHBsaWNpdENhbGxiYWNrIiwiYmFzZVByb3BzIiwiZHVyYXRpb25zIiwiTnVtYmVyT2YiLCJub3JtYWxpemVEdXJhdGlvbiIsImVudGVyRHVyYXRpb24iLCJsZWF2ZUR1cmF0aW9uIiwiZmluaXNoRW50ZXIiLCJpc0FwcGVhciIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsImZpbmlzaExlYXZlIiwibWFrZUVudGVySG9vayIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImZvcmNlUmVmbG93IiwiY2xzIiwiY2xhc3NMaXN0IiwiX3Z0YyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVuZElkIiwiZXhwZWN0ZWRUeXBlIiwiZXhwbGljaXRUaW1lb3V0IiwiX2VuZElkIiwicmVzb2x2ZUlmTm90U3RhbGUiLCJzZXRUaW1lb3V0IiwidGltZW91dCIsInByb3BDb3VudCIsImdldFRyYW5zaXRpb25JbmZvIiwiZW5kRXZlbnQiLCJlbmRlZCIsIm9uRW5kIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFN0eWxlUHJvcGVydGllcyIsInRyYW5zaXRpb25EZWxheXMiLCJUUkFOU0lUSU9OIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsIkFOSU1BVElPTiIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJtYXgiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJ0b01zIiwiYm9keSIsIm9mZnNldEhlaWdodCIsInJlbmRlcmVyT3B0aW9ucyIsInRyYW5zaXRpb25DbGFzc2VzIiwiY2xhc3NOYW1lIiwicGF0Y2hDbGFzcyIsImRpc3BsYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXRjaFN0eWxlIiwic2hvdWxkU2V0QXNQcm9wIiwicGF0Y2hET01Qcm9wIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsImlzQm9vbGVhbiIsInBhdGNoQXR0ciIsImVuc3VyZVJlbmRlcmVyIiwibW91bnQiLCJjb250YWluZXJPclNlbGVjdG9yIiwibm9ybWFsaXplQ29udGFpbmVyIiwiU1ZHRWxlbWVudCIsIkVsZW1lbnQiLCJ1c2VTb3VyY2VNYXAiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9pIiwiaGFzU3ltYm9sIiwiUG9seVN5bWJvbCIsIm1hdGNoZWRSb3V0ZUtleSIsInZpZXdEZXB0aEtleSIsInJvdXRlcktleSIsInJvdXRlTG9jYXRpb25LZXkiLCJyb3V0ZXJWaWV3TG9jYXRpb25LZXkiLCJpc0Jyb3dzZXIiLCJhcHBseVRvUGFyYW1zIiwicGFyYW1zIiwibmV3UGFyYW1zIiwibm9vcCIsIlRSQUlMSU5HX1NMQVNIX1JFIiwicGFyc2VVUkwiLCJwYXJzZVF1ZXJ5IiwibG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJxdWVyeSIsInNlYXJjaFN0cmluZyIsImhhc2giLCJzZWFyY2hQb3MiLCJoYXNoUG9zIiwiZnJvbVNlZ21lbnRzIiwidG9TZWdtZW50cyIsInRvUG9zaXRpb24iLCJzZWdtZW50IiwicG9zaXRpb24iLCJyZXNvbHZlUmVsYXRpdmVQYXRoIiwiZnVsbFBhdGgiLCJzdHJpcEJhc2UiLCJwYXRobmFtZSIsImlzU2FtZVJvdXRlUmVjb3JkIiwiYWxpYXNPZiIsImlzU2FtZVJvdXRlTG9jYXRpb25QYXJhbXMiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zVmFsdWUiLCJpc0VxdWl2YWxlbnRBcnJheSIsImV2ZXJ5IiwiTmF2aWdhdGlvblR5cGUiLCJOYXZpZ2F0aW9uRGlyZWN0aW9uIiwibm9ybWFsaXplQmFzZSIsImJhc2VFbCIsImdldEF0dHJpYnV0ZSIsIkJFRk9SRV9IQVNIX1JFIiwiY3JlYXRlSHJlZiIsImNvbXB1dGVTY3JvbGxQb3NpdGlvbiIsImxlZnQiLCJwYWdlWE9mZnNldCIsInRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9Qb3NpdGlvbiIsInNjcm9sbFRvT3B0aW9ucyIsInBvc2l0aW9uRWwiLCJpc0lkU2VsZWN0b3IiLCJnZXRFbGVtZW50QnlJZCIsIm9mZnNldCIsImRvY1JlY3QiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbFJlY3QiLCJiZWhhdmlvciIsImdldEVsZW1lbnRQb3NpdGlvbiIsInNjcm9sbFRvIiwiZ2V0U2Nyb2xsS2V5IiwiZGVsdGEiLCJoaXN0b3J5Iiwic2Nyb2xsUG9zaXRpb25zIiwiY3JlYXRlQmFzZUxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwiY3JlYXRlQ3VycmVudExvY2F0aW9uIiwic2VhcmNoIiwic2xpY2VQb3MiLCJwYXRoRnJvbUhhc2giLCJidWlsZFN0YXRlIiwiYmFjayIsImZvcndhcmQiLCJyZXBsYWNlZCIsImNvbXB1dGVTY3JvbGwiLCJzY3JvbGwiLCJjcmVhdGVXZWJIaXN0b3J5IiwiaGlzdG9yeU5hdmlnYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJjaGFuZ2VMb2NhdGlvbiIsImhhc2hJbmRleCIsInVybCIsImN1cnJlbnRTdGF0ZSIsInVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24iLCJoaXN0b3J5TGlzdGVuZXJzIiwibGlzdGVuZXJzIiwidGVhcmRvd25zIiwicGF1c2VTdGF0ZSIsInBvcFN0YXRlSGFuZGxlciIsImZyb21TdGF0ZSIsImxpc3RlbmVyIiwiZGlyZWN0aW9uIiwidW5rbm93biIsImJlZm9yZVVubG9hZExpc3RlbmVyIiwicmVwbGFjZVN0YXRlIiwicGF1c2VMaXN0ZW5lcnMiLCJsaXN0ZW4iLCJ0ZWFyZG93biIsImRlc3Ryb3kiLCJ1c2VIaXN0b3J5TGlzdGVuZXJzIiwicm91dGVySGlzdG9yeSIsImdvIiwidHJpZ2dlckxpc3RlbmVycyIsImNyZWF0ZVdlYkhhc2hIaXN0b3J5IiwiaXNSb3V0ZU5hbWUiLCJTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEIiwibWF0Y2hlZCIsIm1ldGEiLCJyZWRpcmVjdGVkRnJvbSIsIk5hdmlnYXRpb25GYWlsdXJlU3ltYm9sIiwiTmF2aWdhdGlvbkZhaWx1cmVUeXBlIiwiY3JlYXRlUm91dGVyRXJyb3IiLCJFcnJvciIsImlzTmF2aWdhdGlvbkZhaWx1cmUiLCJCQVNFX1BBVEhfUEFSU0VSX09QVElPTlMiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJSRUdFWF9DSEFSU19SRSIsImNvbXBhcmVTY29yZUFycmF5IiwiZGlmZiIsImNvbXBhcmVQYXRoUGFyc2VyU2NvcmUiLCJhU2NvcmUiLCJzY29yZSIsImJTY29yZSIsIlJPT1RfVE9LRU4iLCJWQUxJRF9QQVJBTV9SRSIsImNyZWF0ZVJvdXRlUmVjb3JkTWF0Y2hlciIsInJlY29yZCIsInBhcnNlciIsImV4dHJhT3B0aW9ucyIsInNlZ21lbnRTY29yZXMiLCJ0b2tlbkluZGV4IiwidG9rZW4iLCJzdWJTZWdtZW50U2NvcmUiLCJyZXBlYXRhYmxlIiwib3B0aW9uYWwiLCJyZWdleHAiLCJyZSIsIm1lc3NhZ2UiLCJzdWJQYXR0ZXJuIiwicGFyc2UiLCJhdm9pZER1cGxpY2F0ZWRTbGFzaCIsImVuZHNXaXRoIiwicGFyYW0iLCJ0b2tlbnNUb1BhcnNlciIsImNyYXNoIiwiYnVmZmVyIiwicHJldmlvdXNTdGF0ZSIsInRva2VucyIsImZpbmFsaXplU2VnbWVudCIsImNoYXIiLCJjdXN0b21SZSIsImNvbnN1bWVCdWZmZXIiLCJhZGRDaGFyVG9CdWZmZXIiLCJ0b2tlbml6ZVBhdGgiLCJtYXRjaGVyIiwiYWxpYXMiLCJjcmVhdGVSb3V0ZXJNYXRjaGVyIiwicm91dGVzIiwiZ2xvYmFsT3B0aW9ucyIsIm1hdGNoZXJzIiwibWF0Y2hlck1hcCIsImFkZFJvdXRlIiwib3JpZ2luYWxSZWNvcmQiLCJpc1Jvb3RBZGQiLCJtYWluTm9ybWFsaXplZFJlY29yZCIsInJlZGlyZWN0Iiwibm9ybWFsaXplUmVjb3JkUHJvcHMiLCJpbnN0YW5jZXMiLCJsZWF2ZUd1YXJkcyIsInVwZGF0ZUd1YXJkcyIsImVudGVyQ2FsbGJhY2tzIiwibm9ybWFsaXplUm91dGVSZWNvcmQiLCJub3JtYWxpemVkUmVjb3JkcyIsImFsaWFzZXMiLCJvcmlnaW5hbE1hdGNoZXIiLCJub3JtYWxpemVkUmVjb3JkIiwicGFyZW50UGF0aCIsImNvbm5lY3RpbmdTbGFzaCIsImlzQWxpYXNSZWNvcmQiLCJyZW1vdmVSb3V0ZSIsImluc2VydE1hdGNoZXIiLCJtYXRjaGVyUmVmIiwicm91dGUiLCJwYXJhbXNGcm9tTG9jYXRpb24iLCJrIiwiZmluZCIsInBhcmVudE1hdGNoZXIiLCJtZXJnZU1ldGFGaWVsZHMiLCJnZXRSb3V0ZXMiLCJnZXRSZWNvcmRNYXRjaGVyIiwicHJvcHNPYmplY3QiLCJkZWZhdWx0cyIsInBhcnRpYWxPcHRpb25zIiwiSEFTSF9SRSIsIkFNUEVSU0FORF9SRSIsIlNMQVNIX1JFIiwiRVFVQUxfUkUiLCJJTV9SRSIsIlBMVVNfUkUiLCJFTkNfQlJBQ0tFVF9PUEVOX1JFIiwiRU5DX0JSQUNLRVRfQ0xPU0VfUkUiLCJFTkNfQ0FSRVRfUkUiLCJFTkNfQkFDS1RJQ0tfUkUiLCJFTkNfQ1VSTFlfT1BFTl9SRSIsIkVOQ19QSVBFX1JFIiwiRU5DX0NVUkxZX0NMT1NFX1JFIiwiRU5DX1NQQUNFX1JFIiwiY29tbW9uRW5jb2RlIiwiZW5jb2RlVVJJIiwiZW5jb2RlUXVlcnlWYWx1ZSIsImVuY29kZVBhcmFtIiwiZW5jb2RlUGF0aCIsImRlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInNlYXJjaFBhcmFtcyIsInNlYXJjaFBhcmFtIiwiZXFQb3MiLCJjdXJyZW50VmFsdWUiLCJzdHJpbmdpZnlRdWVyeSIsIm5vcm1hbGl6ZVF1ZXJ5Iiwibm9ybWFsaXplZFF1ZXJ5IiwidXNlQ2FsbGJhY2tzIiwiaGFuZGxlcnMiLCJndWFyZFRvUHJvbWlzZUZuIiwiZ3VhcmQiLCJlbnRlckNhbGxiYWNrQXJyYXkiLCJyZWplY3QiLCJ2YWxpZCIsImd1YXJkUmV0dXJuIiwiZ3VhcmRDYWxsIiwiZXh0cmFjdENvbXBvbmVudHNHdWFyZHMiLCJndWFyZFR5cGUiLCJndWFyZHMiLCJyYXdDb21wb25lbnQiLCJjb21wb25lbnRQcm9taXNlIiwicmVzb2x2ZWRDb21wb25lbnQiLCJ1c2VMaW5rIiwicm91dGVyIiwiY3VycmVudFJvdXRlIiwiYWN0aXZlUmVjb3JkSW5kZXgiLCJyb3V0ZU1hdGNoZWQiLCJjdXJyZW50TWF0Y2hlZCIsInBhcmVudFJlY29yZFBhdGgiLCJnZXRPcmlnaW5hbFBhdGgiLCJpc0FjdGl2ZSIsIm91dGVyIiwiaW5uZXIiLCJpbm5lclZhbHVlIiwib3V0ZXJWYWx1ZSIsImluY2x1ZGVzUGFyYW1zIiwiaXNFeGFjdEFjdGl2ZSIsImhyZWYiLCJuYXZpZ2F0ZSIsIm1ldGFLZXkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwiYnV0dG9uIiwiY3VycmVudFRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZ3VhcmRFdmVudCIsIlJvdXRlckxpbmsiLCJyZXF1aXJlZCIsImFjdGl2ZUNsYXNzIiwiZXhhY3RBY3RpdmVDbGFzcyIsImN1c3RvbSIsImFyaWFDdXJyZW50VmFsdWUiLCJsaW5rIiwiZWxDbGFzcyIsImdldExpbmtDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImxpbmtFeGFjdEFjdGl2ZUNsYXNzIiwicHJvcENsYXNzIiwiZ2xvYmFsQ2xhc3MiLCJkZWZhdWx0Q2xhc3MiLCJzbG90Q29udGVudCIsIlJvdXRlclZpZXciLCJpbmplY3RlZFJvdXRlIiwicm91dGVUb0Rpc3BsYXkiLCJkZXB0aCIsIm1hdGNoZWRSb3V0ZVJlZiIsInZpZXdSZWYiLCJvbGRJbnN0YW5jZSIsIm9sZE5hbWUiLCJtYXRjaGVkUm91dGUiLCJWaWV3Q29tcG9uZW50IiwiY3VycmVudE5hbWUiLCJyb3V0ZVByb3BzT3B0aW9uIiwicm91dGVQcm9wcyIsImNyZWF0ZVJvdXRlciIsInBhcnNlUXVlcnkkMSIsInN0cmluZ2lmeVF1ZXJ5JDEiLCJiZWZvcmVHdWFyZHMiLCJiZWZvcmVSZXNvbHZlR3VhcmRzIiwiYWZ0ZXJHdWFyZHMiLCJwZW5kaW5nTG9jYXRpb24iLCJzY3JvbGxCZWhhdmlvciIsInNjcm9sbFJlc3RvcmF0aW9uIiwibm9ybWFsaXplUGFyYW1zIiwicGFyYW1WYWx1ZSIsImVuY29kZVBhcmFtcyIsImRlY29kZVBhcmFtcyIsInJhd0xvY2F0aW9uIiwibG9jYXRpb25Ob3JtYWxpemVkIiwibWF0Y2hlckxvY2F0aW9uIiwic3RyaW5naWZ5VVJMIiwibG9jYXRpb25Bc09iamVjdCIsImNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uIiwicHVzaFdpdGhSZWRpcmVjdCIsImhhbmRsZVJlZGlyZWN0UmVjb3JkIiwibGFzdE1hdGNoZWQiLCJuZXdUYXJnZXRMb2NhdGlvbiIsInRhcmdldExvY2F0aW9uIiwiZm9yY2UiLCJzaG91bGRSZWRpcmVjdCIsInRvTG9jYXRpb24iLCJmYWlsdXJlIiwiYUxhc3RJbmRleCIsImJMYXN0SW5kZXgiLCJpc1NhbWVSb3V0ZUxvY2F0aW9uIiwiaGFuZGxlU2Nyb2xsIiwidHJpZ2dlckVycm9yIiwiZmluYWxpemVOYXZpZ2F0aW9uIiwidHJpZ2dlckFmdGVyRWFjaCIsImNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0IiwibGVhdmluZ1JlY29yZHMiLCJ1cGRhdGluZ1JlY29yZHMiLCJlbnRlcmluZ1JlY29yZHMiLCJyZWNvcmRGcm9tIiwicmVjb3JkVG8iLCJleHRyYWN0Q2hhbmdpbmdSZWNvcmRzIiwicmV2ZXJzZSIsImNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrIiwicnVuR3VhcmRRdWV1ZSIsImlzUHVzaCIsImlzRmlyc3ROYXZpZ2F0aW9uIiwibWFya0FzUmVhZHkiLCJyZW1vdmVIaXN0b3J5TGlzdGVuZXIiLCJzZXR1cExpc3RlbmVycyIsIl9mcm9tIiwiaW5mbyIsInNjcm9sbFBvc2l0aW9uIiwicmVhZHkiLCJyZWFkeUhhbmRsZXJzIiwiZXJyb3JIYW5kbGVycyIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJzdGFydGVkIiwiaW5zdGFsbGVkQXBwcyIsInBhcmVudE9yUm91dGUiLCJyZWNvcmRNYXRjaGVyIiwiaGFzUm91dGUiLCJyb3V0ZU1hdGNoZXIiLCJiZWZvcmVFYWNoIiwiYmVmb3JlUmVzb2x2ZSIsImFmdGVyRWFjaCIsIm9uRXJyb3IiLCJpc1JlYWR5IiwiJHJvdXRlciIsInJlYWN0aXZlUm91dGUiLCJ1bm1vdW50QXBwIiwicHJvbWlzZSIsImdldERldnRvb2xzR2xvYmFsSG9vayIsImdldFRhcmdldCIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJnbG9iYWwiLCJnIiwidHJhbnNmb3JtIiwibG9jYWxzIiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJuZXdTdHlsZXMiLCJwYXJ0IiwibWVkaWEiLCJwYXJ0cyIsImhhc0RvY3VtZW50IiwiREVCVUciLCJzdHlsZXNJbkRvbSIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwiaXNPbGRJRSIsImFkZFN0eWxlc0NsaWVudCIsIl9pc1Byb2R1Y3Rpb24iLCJfb3B0aW9ucyIsImFkZFN0eWxlc1RvRG9tIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsImRvbVN0eWxlIiwiYWRkU3R5bGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJzdHlsZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsIm5ld09iaiIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJzc3JJZCIsImVudiIsIkJBU0VfVVJMIiwic2V0dXBEZXZ0b29sc1BsdWdpbiIsInBsdWdpbkRlc2NyaXB0b3IiLCJzZXR1cEZuIiwiX19WVUVfREVWVE9PTFNfUExVR0lOU19fIiwiSE9PS19TRVRVUCIsIkZyYW1lQnVmZmVyIiwiZ2xGcmFtZUJ1ZmZlciIsInRleHR1cmVzIiwiQXR0cmlidXRlIiwiY29tcG9uZW50U2l6ZSIsInZlcnRpY2VzIiwiUHJpbWl0aXZlVHlwZSIsIkdlb21ldHJ5IiwiVFJJQU5HTEVTIiwiYXR0cmlidXRlcyIsImluZGljZXMiLCJhdHRyTmFtZSIsIkZsb2F0MzJBcnJheSIsInZlcnRleCIsInBvaW50QXJyIiwiVFlQRV9UUklBTkdMRVMiLCJUWVBFX0xJTkVTIiwiTElORVMiLCJUZXh0dXJlIiwiZ2xUZXh0dXJlIiwibGV2ZWwiLCJpbnRlcm5hbGZvcm1hdCIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyIiwiZm9ybWF0IiwiZmxpcFkiLCJnZXRVbmlmb3JtU2V0dGVyIiwiZ2wiLCJzYW1wbGVyQ291bnRlciIsInN1YnN0ciIsIkZMT0FUIiwidW5pZm9ybTFmdiIsIklOVCIsInVuaWZvcm0xaXYiLCJVTlNJR05FRF9JTlQiLCJ1bmlmb3JtMXVpdiIsIlNBTVBMRVJfMkQiLCJ1bml0cyIsIkludDMyQXJyYXkiLCJpaSIsImNvdW50IiwidGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInVuaWZvcm0xZiIsIkZMT0FUX1ZFQzIiLCJ1bmlmb3JtMmZ2IiwiRkxPQVRfVkVDMyIsInVuaWZvcm0zZnYiLCJGTE9BVF9WRUM0IiwidW5pZm9ybTRmdiIsIkJPT0wiLCJ1bmlmb3JtMWkiLCJCT09MX1ZFQzIiLCJJTlRfVkVDMiIsInVuaWZvcm0yaXYiLCJCT09MX1ZFQzMiLCJJTlRfVkVDMyIsInVuaWZvcm0zaXYiLCJCT09MX1ZFQzQiLCJJTlRfVkVDNCIsInVuaWZvcm00aXYiLCJGTE9BVF9NQVQyIiwidW5pZm9ybU1hdHJpeDJmdiIsIkZMT0FUX01BVDMiLCJ1bmlmb3JtTWF0cml4M2Z2IiwiRkxPQVRfTUFUNCIsInVuaWZvcm1NYXRyaXg0ZnYiLCJBdHRyaWJ1dGVJbmZvIiwiVW5pZm9ybUluZm8iLCJTaGFkZXIiLCJ2ZXJ0U2hhZGVyIiwiZnJhZ1NoYWRlciIsInByb2dyYW0iLCJ1bmlmb3JtcyIsIlNpZGUiLCJCYXRjaFR5cGUiLCJCbGVuZE1vZGUiLCJiYXRjaFNpemUiLCJjYW52YXMiLCJTSURFX05PTkUiLCJOT05FIiwiU0lERV9GUk9OVCIsIkZST05UIiwiU0lERV9CQUNLIiwiQkFDSyIsIkJMRU5EX01PREVfT1ZFUkxBUCIsIk9WRVJMQVAiLCJCTEVORF9NT0RFX0xJR0hUIiwiTElHSFQiLCJCTEVORF9NT0RFX1BJR01FTlQiLCJQSUdNRU5UIiwiZnJhbWVCdWZmZXJTdGFjayIsImJhdGNoVHlwZSIsIk1FU0giLCJiYXRjaEluZGV4IiwiZHJhd2luZzJEIiwiY29sb3IiLCJjYW1lcmFYIiwiY2FtZXJhWSIsInpvb20iLCJibGVuZE1vZGUiLCJzdGF0ZVN0YWNrIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJnZXRDb250ZXh0IiwiYWxwaGEiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJzdGVuY2lsIiwidmlld3BvcnQiLCJlbmFibGUiLCJCTEVORCIsIkJMQU5LX1dISVRFIiwiY3JlYXRlVGV4dHVyZUZyb21SZ2JhUGl4ZWxzIiwiVWludDhBcnJheSIsIklNQUdFXzJEX1NIQURFUiIsImNyZWF0ZVNoYWRlciIsIkNPTE9SXzJEX1NIQURFUiIsImJhdGNoUG9zaXRpb25WZXJ0aWNlcyIsImJhdGNoUG9zaXRpb25CdWZmZXIiLCJjcmVhdGVEeW5hbWljRHJhd0J1ZmZlciIsImJhdGNoVGV4Q29vcmRWZXJ0aWNlcyIsImJhdGNoVGV4Q29vcmRCdWZmZXIiLCJiYXRjaENvbG9yVmVydGljZXMiLCJiYXRjaENvbG9yQnVmZmVyIiwiX3NoYXJlZEluc3RhbmNlIiwiZHgiLCJkeSIsImR3IiwiZGgiLCJzeCIsInN5Iiwic3ciLCJzaCIsImRyYXdJbWFnZSIsImNsZWFyQ29sb3IiLCJmbHVzaDJEIiwic3dpdGNoRnJhbWVCdWZmZXIiLCJtYXNrIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJTVEVOQ0lMX0JVRkZFUl9CSVQiLCJlbmFibGVkIiwiREVQVEhfVEVTVCIsImRlcHRoRnVuYyIsIkxFUVVBTCIsImRpc2FibGUiLCJkZXB0aE1hc2siLCJzaWRlIiwiQ1VMTF9GQUNFIiwiY3VsbEZhY2UiLCJibGVuZEVxdWF0aW9uIiwiRlVOQ19BREQiLCJibGVuZEZ1bmMiLCJPTkUiLCJaRVJPIiwiU1JDX0FMUEhBIiwiYmxlbmRFcXVhdGlvblNlcGFyYXRlIiwiTUFYIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsInNoYWRlciIsImN1cnJlbnRTaGFkZXIiLCJ1c2VQcm9ncmFtIiwidW5pZm9ybSIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiRFlOQU1JQ19EUkFXIiwidmJvIiwiU1RBVElDX0RSQVciLCJpYm8iLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVpbnQxNkFycmF5Iiwic3RyaWRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiY3JlYXRlVGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJpbWFnZSIsImNyZWF0ZUVtcHR5VGV4dHVyZSIsIkltYWdlIiwib25sb2FkIiwib25hYm9ydCIsIm9uZXJyb3IiLCJzcmMiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSF9DT01QT05FTlQiLCJwaXhlbHMiLCJkZWxldGVUZXh0dXJlIiwicmVjcmVhdGUiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwidmVydFNyYyIsImZyYWdTcmMiLCJjcmVhdGVHbFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwiYXR0cmliTG9jYXRpb25zIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsIm51bU9mQXR0cnMiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwicmVnaXN0ZXJBdHRyaWJ1dGUiLCJudW1PZlVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwiZ2V0QWN0aXZlVW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInJlZ2lzdGVyVW5pZm9ybSIsImRlbGV0ZVByb2dyYW0iLCJkZWxldGVTaGFkZXIiLCJmcmFtZUJ1ZmZlciIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYXR0YWNoQ29sb3JUZXh0dXJlcyIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImRyYXdCdWZmZXJzIiwiY3VycmVudEZyYW1lQnVmZmVyIiwiREVQVEhfQVRUQUNITUVOVCIsImRlcHRoVGV4dHVyZSIsIlNURU5DSUxfQVRUQUNITUVOVCIsInN0ZW5jaWxUZXh0dXJlIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJyZXNpemVUZXh0dXJlIiwiZ2VvbWV0cnkiLCJ2YW8iLCJkZWxldGVWZXJ0ZXhBcnJheSIsImRlbGV0ZUJ1ZmZlciIsImF0dHIiLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImJpbmRWZXJ0ZXhBcnJheSIsImdlb0F0dHIiLCJjcmVhdGVWQk8iLCJiaW5kVmVydGV4QXJyYXlBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJjcmVhdGVJQk8iLCJkcmF3RWxlbWVudHMiLCJVTlNJR05FRF9TSE9SVCIsIngiLCJ5Iiwic2V0Q2FtZXJhUG9zaXRpb24iLCJmbHVzaE1lc2giLCJmbHVzaExpbmVzIiwiYmF0Y2hUZXh0dXJlIiwiYnVmZmVyU3ViRGF0YSIsInBvc2l0aW9uTG9jYXRpb24iLCJ0ZXhDb29yZExvY2F0aW9uIiwiY29sb3JMb2NhdGlvbiIsImRyYXdBcnJheXMiLCJ4MCIsInkwIiwieDEiLCJ5MSIsImludlciLCJpbnZIIiwicG9zaXRpb25WZXJ0aWNlcyIsImNvbG9ySW5kZXgiLCJ2ZXJ0ZXhDb2xvcnMiLCJ4MiIsInkyIiwieDMiLCJ5MyIsInRleFgwIiwidGV4WTAiLCJ0ZXhYMSIsInRleFkxIiwidGV4WDIiLCJ0ZXhZMiIsInRleFgzIiwidGV4WTMiLCJ0ZXhDb29yZFZlcnRpY2VzIiwiaW52U1ciLCJpbnZTSCIsInB1c2hDd1F1YWRWZXJ0aWNlcyIsImZsaXBYIiwiZHN0TGVmdCIsImRzdFJpZ2h0IiwiZHN0VG9wIiwiZHN0Qm90dG9tIiwidGV4TGVmdCIsInRleFJpZ2h0IiwidGV4VG9wIiwidGV4Qm90dG9tIiwiZHJhd0N3UXVhZCIsImRzdFgiLCJkc3RZIiwiZHN0VyIsImRzdEgiLCJzcmNYIiwic3JjWSIsInNyY1ciLCJzcmNIIiwib3giLCJveSIsInJvdGF0aW9uIiwicmlnaHQiLCJib3R0b20iLCJjb3NSIiwiY29zIiwic2luUiIsInNpbiIsIm0xMSIsIm0xMiIsIm0xMyIsIm0yMSIsIm0yMiIsIm0yMyIsInYweCIsInYweSIsInYxeCIsInYxeSIsInYyeCIsInYyeSIsInYzeCIsInYzeSIsImxhYmVsIiwiZHJhdyIsIlJlbmRlckxvb3AiLCJvblVwZGF0ZSIsInJ1bm5pbmciLCJrZWVwTG9vcCIsImxhc3RUaW1lc3RhbXAiLCJ2YWx1ZU9mIiwibG9vcCIsIklucHV0IiwibW91c2VPdmVyIiwibW91c2VYIiwibW91c2VZIiwibW91c2VMZWZ0IiwibW91c2VMZWZ0RG93blRoaXNGcmFtZSIsIm1vdXNlUmlnaHQiLCJtb3VzZVJpZ2h0RG93blRoaXNGcmFtZSIsIm1vdXNlTWlkZGxlIiwibW91c2VNaWRkbGVEb3duVGhpc0ZyYW1lIiwiZGJsQ2xpY2tUaGlzRnJhbWUiLCJ3aGVlbERldFgiLCJ3aGVlbERldFkiLCJrZXlNYXAiLCJ0aW1lc3RhbXAiLCJvbkNvbnRleHRtZW51Iiwib25Nb3VzZU1vdmUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwib25EYmxDbGljayIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VPdXQiLCJjbGllbnRZIiwiY2xpZW50WCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm9uV2hlZWwiLCJkZWx0YVgiLCJkZWx0YVkiLCJvbktleURvd24iLCJvbktleVVwIiwib25CbHVyIiwiZWxlbWVudCIsIlNoYXJlZENhbnZhczJEIiwiX2luc3RhbmNlIiwiY2xlYXJSZWN0IiwiQ19BIiwiY2hhckNvZGVBdCIsIkNfWiIsIkNfYSIsIkNfeiIsIkNfMCIsIkNfOSIsIndyYXBUZXh0IiwibWF4V2lkdGgiLCJsaW5lcyIsIndvcmRzIiwid29yZFN0YXJ0IiwiY2hhckNvZGUiLCJzdWJzdHJpbmciLCJicmVha0ludG9Xb3JkcyIsImxpbmUiLCJsaW5lV2lkdGgiLCJhY3R1YWxNYXhXaWR0aCIsIndvcmQiLCJ3b3JkV2lkdGgiLCJtZWFzdXJlVGV4dCIsIl9tdWx0aWxpbmUiLCJfdGV4dEJhc2VsaW5lIiwiX2ZvbnRTdHlsZSIsIl9mb250VmFyaWFudCIsIl9mb250V2VpZ2h0IiwiX2ZvbnRTaXplIiwiX2ZvbnRGYW1pbHkiLCJfbGluZVNwYWNpbmciLCJfbWF4V2lkdGgiLCJfY29sb3IiLCJuZWVkc1VwZGF0ZUltYWdlRGF0YSIsIm5lZWRzVXBkYXRlVGV4dHVyZSIsIl90ZXh0IiwidXBkYXRlSW1hZ2VEYXRhIiwiX2ltYWdlRGF0YSIsImMyZCIsImZvbnQiLCJmb250U3R5bGUiLCJmb250VmFyaWFudCIsImZvbnRXZWlnaHQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJ0ZXh0QmFzZWxpbmUiLCJtZXRyaWNzIiwiYXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJkZXNjZW50IiwiYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IiwibXVsdGlsaW5lIiwiY2VpbCIsImxpbmVTcGFjaW5nIiwiZml0U2l6ZSIsImZpbGxTdHlsZSIsImZpbGxUZXh0IiwiZ2V0SW1hZ2VEYXRhIiwiX3RleHR1cmUiLCJzZXRUZXh0dXJlRnJvbVBpeGVscyIsIk1PTlRIUyIsIkJPQVJEIiwiUElFQ0VTIiwiUk9XUyIsIkNPTFMiLCJyb3ciLCJBbmltYXRpb25UYXNrIiwic3RlcCIsImZpbmlzaGVkIiwiY2FuY2VsZWQiLCJmaW5pc2hlZENhbGxiYWNrcyIsImNhbmNlbGVkQ2FsbGJhY2tzIiwiZHQiLCJ0cmlnZ2VyRmluaXNoZWQiLCJsaW5lYXIiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2luZ0Z1bmN0aW9uIiwiZWxhcHNlZCIsInByb2dyZXNzIiwiYW5pbWF0aW9ucyIsImFuaW1hdGlvbiIsImNhbmNlbCIsImNvbWJpbmVkIiwidW5maW5pc2hlZCIsIm9uRmluaXNoZWRPckNhbmNlbGVkIiwib25DYW5jZWxlZCIsInRpbWUiLCJib3R0b21MZWZ0WCIsImJvdHRvbUxlZnRZIiwicm90YXRlT3JpZ2luWCIsInJvdGF0ZU9yaWdpblkiLCJob3ZlciIsInJvdGF0aW9uOTAiLCJzY2FsZVgiLCJncmlkV2lkdGgiLCJncmlkSGVpZ2h0IiwidGV4V2lkdGgiLCJ0ZXhIZWlnaHQiLCJmbG9vciIsInlpIiwieGkiLCJ1cGRhdGVQb3NpdGlvbiIsImFuZ2xlIiwiUEkiLCJyb3dzIiwiY29scyIsImdyaWRCb3R0b21MZWZ0WCIsImdyaWRCb3R0b21MZWZ0WSIsIm5ld01hc2siLCJ5aTEiLCJ4aTEiLCJ4aTIiLCJ5aTIiLCJjeCIsImN5IiwiZGV0WCIsImRldFkiLCJhYnMiLCJncmlkcyIsInBpZWNlcyIsImRyYWdnaW5nUGllY2VJbmRleCIsImRyYWdTdGFydE1vdXNlWCIsImRyYWdTdGFydE1vdXNlWSIsImRyYWdTdGFydER4IiwiZHJhZ1N0YXJ0RHkiLCJ0aXBzIiwidG9kYXkiLCJtb250aCIsInRvZGF5TW9udGgiLCJnZXRNb250aCIsImRheSIsInRvZGF5RGF5IiwiZ2V0RGF0ZSIsImhsIiwiaHIiLCJwaWVjZSIsImR5bCIsImR5ciIsInlsIiwieXJpIiwiaW5pdCIsImlucHV0IiwiYm9hcmRXaWR0aCIsImJvYXJkSGVpZ2h0IiwiYm9hcmRYIiwiYm9hcmRZIiwiYm9hcmRSZWxhdGVkTW91c2VYIiwiYm9hcmRSZWxhdGVkTW91c2VZIiwiaG92ZXJQaWVjZUluZGV4IiwiZHJhZ2dpbmdQaWVjZSIsInNuYXBUb0dyaWQiLCJmbGlwIiwib25GaW5pc2hlZCIsImlzTW91c2VPdmVyIiwicm90YXRlOTAiLCJjZW50ZXJDYW1lcmEiLCJiZWdpbjJEIiwic2V0Q29sb3IiLCJkcmF3TGFiZWwiLCJkcmF3UmVjdCIsImVuZDJEIiwicm91bmQiLCJzZXRCb3R0b21MZWZ0UG9zaXRpb24iLCJyZW5kZXJMb29wIiwicHV6emxlIiwiYXV0b1Jlc2l6ZUNhbnZhcyIsInJlY3QiLCJyZXNpemVDYW52YXMiLCJ0aXRsZSIsInVubG9hZCIsImF1dG9SZXNpemVDYW52YXNUaWQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJtZW1vIiwiYWxsIiwiYXRvYiIsImdldEVsZW1lbnQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImlkeCIsIm5vbmNlIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJiYXNlVXJsIiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImVycm9yTWVzc2FnZVdpbmRvd1Zpc2libGUiLCJlcnJvck1lc3NhZ2UiLCJlcnJvclNpZ25hbCIsInNob3dFcnJvck1lc3NhZ2VXaW5kb3ciLCJvblVuaGFuZGxlZFJlamVjdGlvbiIsInJlYXNvbiIsIkFwcCIsImN1cnIiLCJkaXNwYXRjaCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0Jh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UUEsSUFBU2g4QixHQUNwRDM1QixHQUFTLEdBQ1R4SyxLQUFLOGpDLFVBQVU5cUMsT0FBT3dSLEVBQU8sR0FJckMsU0FBU3BQLEdBQ0w0RSxLQUFLOGpDLFVBQVU5dEMsUUFBUW11QyxHQUFZQSxFQUFTL29DLE1EYnBEa2pCLEVBQUlyWSxPQUFPb0MsYUFBZSxTQUFVVixFQUFLOUIsRUFBVWt1QyxHQUMvQyxFQUFZcXNCLFNBQVN6NEQsSUFFekIyVyxFQUFJek8sUUFBUSxjQUFlLEdBQzNCeU8sRUFBSWlCLElBQUlndUIsRUFBQSxHQUFRdFEsTUFBTSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE3KTtcbiIsIi8qKlxyXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcclxuICogaXMgaW4gdGhhdCBtYXAuXHJcbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXHJcbiAqIFxcL1xcKiNcXF9cXF9QVVJFXFxfXFxfXFwqXFwvXHJcbiAqIFNvIHRoYXQgcm9sbHVwIGNhbiB0cmVlLXNoYWtlIHRoZW0gaWYgbmVjZXNzYXJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcclxuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyB2YWwgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogdmFsID0+ICEhbWFwW3ZhbF07XHJcbn1cblxuLyoqXHJcbiAqIGRldiBvbmx5IGZsYWcgLT4gbmFtZSBtYXBwaW5nXHJcbiAqL1xyXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcclxuICAgIFsxIC8qIFRFWFQgKi9dOiBgVEVYVGAsXHJcbiAgICBbMiAvKiBDTEFTUyAqL106IGBDTEFTU2AsXHJcbiAgICBbNCAvKiBTVFlMRSAqL106IGBTVFlMRWAsXHJcbiAgICBbOCAvKiBQUk9QUyAqL106IGBQUk9QU2AsXHJcbiAgICBbMTYgLyogRlVMTF9QUk9QUyAqL106IGBGVUxMX1BST1BTYCxcclxuICAgIFszMiAvKiBIWURSQVRFX0VWRU5UUyAqL106IGBIWURSQVRFX0VWRU5UU2AsXHJcbiAgICBbNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXTogYFNUQUJMRV9GUkFHTUVOVGAsXHJcbiAgICBbMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovXTogYEtFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFsyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqL106IGBVTktFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFs1MTIgLyogTkVFRF9QQVRDSCAqL106IGBORUVEX1BBVENIYCxcclxuICAgIFsxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi9dOiBgRFlOQU1JQ19TTE9UU2AsXHJcbiAgICBbMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqL106IGBERVZfUk9PVF9GUkFHTUVOVGAsXHJcbiAgICBbLTEgLyogSE9JU1RFRCAqL106IGBIT0lTVEVEYCxcclxuICAgIFstMiAvKiBCQUlMICovXTogYEJBSUxgXHJcbn07XG5cbi8qKlxyXG4gKiBEZXYgb25seVxyXG4gKi9cclxuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcclxuICAgIFsxIC8qIFNUQUJMRSAqL106ICdTVEFCTEUnLFxyXG4gICAgWzIgLyogRFlOQU1JQyAqL106ICdEWU5BTUlDJyxcclxuICAgIFszIC8qIEZPUldBUkRFRCAqL106ICdGT1JXQVJERUQnXHJcbn07XG5cbmNvbnN0IEdMT0JBTFNfV0hJVEVfTElTVEVEID0gJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksJyArXHJcbiAgICAnZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSwnICtcclxuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCc7XHJcbmNvbnN0IGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChHTE9CQUxTX1dISVRFX0xJU1RFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcclxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUoc291cmNlLCBzdGFydCA9IDAsIGVuZCA9IHNvdXJjZS5sZW5ndGgpIHtcclxuICAgIGNvbnN0IGxpbmVzID0gc291cmNlLnNwbGl0KC9cXHI/XFxuLyk7XHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY291bnQgKz0gbGluZXNbaV0ubGVuZ3RoICsgMTtcclxuICAgICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZSA9IGogKyAxO1xyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goYCR7bGluZX0keycgJy5yZXBlYXQoTWF0aC5tYXgoMyAtIFN0cmluZyhsaW5lKS5sZW5ndGgsIDApKX18ICAke2xpbmVzW2pdfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChqID09PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heCgxLCBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnICcucmVwZWF0KHBhZCkgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpO1xyXG59XG5cbi8qKlxyXG4gKiBPbiB0aGUgY2xpZW50IHdlIG9ubHkgbmVlZCB0byBvZmZlciBzcGVjaWFsIGNhc2VzIGZvciBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdFxyXG4gKiBoYXZlIGRpZmZlcmVudCBuYW1lcyBmcm9tIHRoZWlyIGNvcnJlc3BvbmRpbmcgZG9tIHByb3BlcnRpZXM6XHJcbiAqIC0gaXRlbXNjb3BlIC0+IE4vQVxyXG4gKiAtIGFsbG93ZnVsbHNjcmVlbiAtPiBhbGxvd0Z1bGxzY3JlZW5cclxuICogLSBmb3Jtbm92YWxpZGF0ZSAtPiBmb3JtTm9WYWxpZGF0ZVxyXG4gKiAtIGlzbWFwIC0+IGlzTWFwXHJcbiAqIC0gbm9tb2R1bGUgLT4gbm9Nb2R1bGVcclxuICogLSBub3ZhbGlkYXRlIC0+IG5vVmFsaWRhdGVcclxuICogLSByZWFkb25seSAtPiByZWFkT25seVxyXG4gKi9cclxuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xyXG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcclxuLyoqXHJcbiAqIFRoZSBmdWxsIGxpc3QgaXMgbmVlZGVkIGR1cmluZyBTU1IgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBpbml0aWFsIG1hcmt1cC5cclxuICovXHJcbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyArXHJcbiAgICBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixgICtcclxuICAgIGBsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGAgK1xyXG4gICAgYGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgKTtcclxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xyXG5jb25zdCBhdHRyVmFsaWRhdGlvbkNhY2hlID0ge307XHJcbmZ1bmN0aW9uIGlzU1NSU2FmZUF0dHJOYW1lKG5hbWUpIHtcclxuICAgIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc1Vuc2FmZSA9IHVuc2FmZUF0dHJDaGFyUkUudGVzdChuYW1lKTtcclxuICAgIGlmIChpc1Vuc2FmZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdID0gIWlzVW5zYWZlKTtcclxufVxyXG5jb25zdCBwcm9wc1RvQXR0ck1hcCA9IHtcclxuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXHJcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXHJcbiAgICBodG1sRm9yOiAnZm9yJyxcclxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXHJcbn07XHJcbi8qKlxyXG4gKiBDU1MgcHJvcGVydGllcyB0aGF0IGFjY2VwdCBwbGFpbiBudW1iZXJzXHJcbiAqL1xyXG5jb25zdCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsYm9yZGVyLWltYWdlLW91dHNldCxib3JkZXItaW1hZ2Utc2xpY2UsYCArXHJcbiAgICBgYm9yZGVyLWltYWdlLXdpZHRoLGJveC1mbGV4LGJveC1mbGV4LWdyb3VwLGJveC1vcmRpbmFsLWdyb3VwLGNvbHVtbi1jb3VudCxgICtcclxuICAgIGBjb2x1bW5zLGZsZXgsZmxleC1ncm93LGZsZXgtcG9zaXRpdmUsZmxleC1zaHJpbmssZmxleC1uZWdhdGl2ZSxmbGV4LW9yZGVyLGAgK1xyXG4gICAgYGdyaWQtcm93LGdyaWQtcm93LWVuZCxncmlkLXJvdy1zcGFuLGdyaWQtcm93LXN0YXJ0LGdyaWQtY29sdW1uLGAgK1xyXG4gICAgYGdyaWQtY29sdW1uLWVuZCxncmlkLWNvbHVtbi1zcGFuLGdyaWQtY29sdW1uLXN0YXJ0LGZvbnQtd2VpZ2h0LGxpbmUtY2xhbXAsYCArXHJcbiAgICBgbGluZS1oZWlnaHQsb3BhY2l0eSxvcmRlcixvcnBoYW5zLHRhYi1zaXplLHdpZG93cyx6LWluZGV4LHpvb20sYCArXHJcbiAgICAvLyBTVkdcclxuICAgIGBmaWxsLW9wYWNpdHksZmxvb2Qtb3BhY2l0eSxzdG9wLW9wYWNpdHksc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxgICtcclxuICAgIGBzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGhgKTtcclxuLyoqXHJcbiAqIEtub3duIGF0dHJpYnV0ZXMsIHRoaXMgaXMgdXNlZCBmb3Igc3RyaW5naWZpY2F0aW9uIG9mIHJ1bnRpbWUgc3RhdGljIG5vZGVzXHJcbiAqIHNvIHRoYXQgd2UgZG9uJ3Qgc3RyaW5naWZ5IGJpbmRpbmdzIHRoYXQgY2Fubm90IGJlIHNldCBmcm9tIEhUTUwuXHJcbiAqIERvbid0IGFsc28gZm9yZ2V0IHRvIGFsbG93IGBkYXRhLSpgIGFuZCBgYXJpYS0qYCFcclxuICogR2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9BdHRyaWJ1dGVzXHJcbiAqL1xyXG5jb25zdCBpc0tub3duQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgYWNjZXB0LGFjY2VwdC1jaGFyc2V0LGFjY2Vzc2tleSxhY3Rpb24sYWxpZ24sYWxsb3csYWx0LGFzeW5jLGAgK1xyXG4gICAgYGF1dG9jYXBpdGFsaXplLGF1dG9jb21wbGV0ZSxhdXRvZm9jdXMsYXV0b3BsYXksYmFja2dyb3VuZCxiZ2NvbG9yLGAgK1xyXG4gICAgYGJvcmRlcixidWZmZXJlZCxjYXB0dXJlLGNoYWxsZW5nZSxjaGFyc2V0LGNoZWNrZWQsY2l0ZSxjbGFzcyxjb2RlLGAgK1xyXG4gICAgYGNvZGViYXNlLGNvbG9yLGNvbHMsY29sc3Bhbixjb250ZW50LGNvbnRlbnRlZGl0YWJsZSxjb250ZXh0bWVudSxjb250cm9scyxgICtcclxuICAgIGBjb29yZHMsY3Jvc3NvcmlnaW4sY3NwLGRhdGEsZGF0ZXRpbWUsZGVjb2RpbmcsZGVmYXVsdCxkZWZlcixkaXIsZGlybmFtZSxgICtcclxuICAgIGBkaXNhYmxlZCxkb3dubG9hZCxkcmFnZ2FibGUsZHJvcHpvbmUsZW5jdHlwZSxlbnRlcmtleWhpbnQsZm9yLGZvcm0sYCArXHJcbiAgICBgZm9ybWFjdGlvbixmb3JtZW5jdHlwZSxmb3JtbWV0aG9kLGZvcm1ub3ZhbGlkYXRlLGZvcm10YXJnZXQsaGVhZGVycyxgICtcclxuICAgIGBoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LGljb24saWQsaW1wb3J0YW5jZSxpbnRlZ3JpdHksYCArXHJcbiAgICBgaXNtYXAsaXRlbXByb3Asa2V5dHlwZSxraW5kLGxhYmVsLGxhbmcsbGFuZ3VhZ2UsbG9hZGluZyxsaXN0LGxvb3AsbG93LGAgK1xyXG4gICAgYG1hbmlmZXN0LG1heCxtYXhsZW5ndGgsbWlubGVuZ3RoLG1lZGlhLG1pbixtdWx0aXBsZSxtdXRlZCxuYW1lLG5vdmFsaWRhdGUsYCArXHJcbiAgICBgb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIscHJlbG9hZCxyYWRpb2dyb3VwLHJlYWRvbmx5LGAgK1xyXG4gICAgYHJlZmVycmVycG9saWN5LHJlbCxyZXF1aXJlZCxyZXZlcnNlZCxyb3dzLHJvd3NwYW4sc2FuZGJveCxzY29wZSxzY29wZWQsYCArXHJcbiAgICBgc2VsZWN0ZWQsc2hhcGUsc2l6ZSxzaXplcyxzbG90LHNwYW4sc3BlbGxjaGVjayxzcmMsc3JjZG9jLHNyY2xhbmcsc3Jjc2V0LGAgK1xyXG4gICAgYHN0YXJ0LHN0ZXAsc3R5bGUsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLGAgK1xyXG4gICAgYHZhbHVlLHdpZHRoLHdyYXBgKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHZhbHVlW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU3R5bGUoaXNTdHJpbmcoaXRlbSkgPyBwYXJzZVN0cmluZ1N0eWxlKGl0ZW0pIDogaXRlbSk7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5jb25zdCBsaXN0RGVsaW1pdGVyUkUgPSAvOyg/IVteKF0qXFwpKS9nO1xyXG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooLispLztcclxuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlclJFKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXJSRSk7XHJcbiAgICAgICAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XHJcbiAgICBsZXQgcmV0ID0gJyc7XHJcbiAgICBpZiAoIXN0eWxlcykge1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlc1trZXldO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOb1VuaXROdW1lcmljU3R5bGVQcm9wKG5vcm1hbGl6ZWRLZXkpKSkge1xyXG4gICAgICAgICAgICAvLyBvbmx5IHJlbmRlciB2YWxpZCB2YWx1ZXNcclxuICAgICAgICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVDbGFzcyh2YWx1ZSkge1xyXG4gICAgbGV0IHJlcyA9ICcnO1xyXG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHJlcyA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVDbGFzcyh2YWx1ZVtpXSk7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXMgKz0gbm9ybWFsaXplZCArICcgJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWVbbmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSBuYW1lICsgJyAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy50cmltKCk7XHJcbn1cblxuLy8gVGhlc2UgdGFnIGNvbmZpZ3MgYXJlIHNoYXJlZCBiZXR3ZWVuIGNvbXBpbGVyLWRvbSBhbmQgcnVudGltZS1kb20sIHNvIHRoZXlcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50XHJcbmNvbnN0IEhUTUxfVEFHUyA9ICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLCcgK1xyXG4gICAgJ2hlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sJyArXHJcbiAgICAnZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsJyArXHJcbiAgICAnZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLCcgK1xyXG4gICAgJ3RpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsJyArXHJcbiAgICAnY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLCcgK1xyXG4gICAgJ3RoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCwnICtcclxuICAgICdvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LCcgK1xyXG4gICAgJ3N1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnO1xyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvRWxlbWVudFxyXG5jb25zdCBTVkdfVEFHUyA9ICdzdmcsYW5pbWF0ZSxhbmltYXRlTW90aW9uLGFuaW1hdGVUcmFuc2Zvcm0sY2lyY2xlLGNsaXBQYXRoLGNvbG9yLXByb2ZpbGUsJyArXHJcbiAgICAnZGVmcyxkZXNjLGRpc2NhcmQsZWxsaXBzZSxmZUJsZW5kLGZlQ29sb3JNYXRyaXgsZmVDb21wb25lbnRUcmFuc2ZlciwnICtcclxuICAgICdmZUNvbXBvc2l0ZSxmZUNvbnZvbHZlTWF0cml4LGZlRGlmZnVzZUxpZ2h0aW5nLGZlRGlzcGxhY2VtZW50TWFwLCcgK1xyXG4gICAgJ2ZlRGlzdGFuY2VMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLCcgK1xyXG4gICAgJ2ZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsJyArXHJcbiAgICAnZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlciwnICtcclxuICAgICdmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssJyArXHJcbiAgICAnbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLCcgK1xyXG4gICAgJ3BvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsJyArXHJcbiAgICAndGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3JztcclxuY29uc3QgVk9JRF9UQUdTID0gJ2FyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJztcclxuY29uc3QgaXNIVE1MVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEhUTUxfVEFHUyk7XHJcbmNvbnN0IGlzU1ZHVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFNWR19UQUdTKTtcclxuY29uc3QgaXNWb2lkVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFZPSURfVEFHUyk7XG5cbmNvbnN0IGVzY2FwZVJFID0gL1tcIicmPD5dLztcclxuZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN0ciA9ICcnICsgc3RyaW5nO1xyXG4gICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVSRS5leGVjKHN0cik7XHJcbiAgICBpZiAoIW1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuICAgIGxldCBodG1sID0gJyc7XHJcbiAgICBsZXQgZXNjYXBlZDtcclxuICAgIGxldCBpbmRleDtcclxuICAgIGxldCBsYXN0SW5kZXggPSAwO1xyXG4gICAgZm9yIChpbmRleCA9IG1hdGNoLmluZGV4OyBpbmRleCA8IHN0ci5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICBzd2l0Y2ggKHN0ci5jaGFyQ29kZUF0KGluZGV4KSkge1xyXG4gICAgICAgICAgICBjYXNlIDM0OiAvLyBcIlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmcXVvdDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzg6IC8vICZcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmFtcDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzk6IC8vICdcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJiMzOTsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNjA6IC8vIDxcclxuICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAnJmx0Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA2MjogLy8gPlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmZ3Q7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0SW5kZXggIT09IGluZGV4KSB7XHJcbiAgICAgICAgICAgIGh0bWwgKz0gc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xyXG4gICAgICAgIGh0bWwgKz0gZXNjYXBlZDtcclxuICAgIH1cclxuICAgIHJldHVybiBsYXN0SW5kZXggIT09IGluZGV4ID8gaHRtbCArIHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xyXG59XHJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTIvc3ludGF4Lmh0bWwjY29tbWVudHNcclxuY29uc3QgY29tbWVudFN0cmlwUkUgPSAvXi0/Pnw8IS0tfC0tPnwtLSE+fDwhLSQvZztcclxuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XHJcbiAgICByZXR1cm4gc3JjLnJlcGxhY2UoY29tbWVudFN0cmlwUkUsICcnKTtcclxufVxuXG5mdW5jdGlvbiBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikge1xyXG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBsZXQgZXF1YWwgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVxdWFsO1xyXG59XHJcbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBsZXQgYVZhbGlkVHlwZSA9IGlzRGF0ZShhKTtcclxuICAgIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzQXJyYXkoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYVZhbGlkVHlwZSA9IGlzT2JqZWN0KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGhpcyBpZiB3aWxsIHByb2JhYmx5IG5ldmVyIGJlIGNhbGxlZCAqL1xyXG4gICAgICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgYktleXNDb3VudCA9IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcclxuICAgICAgICBpZiAoYUtleXNDb3VudCAhPT0gYktleXNDb3VudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcclxuICAgICAgICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgY29uc3QgYkhhc0tleSA9IGIuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgaWYgKChhSGFzS2V5ICYmICFiSGFzS2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgKCFhSGFzS2V5ICYmIGJIYXNLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAhbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcclxufVxyXG5mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLCB2YWwpIHtcclxuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcclxufVxuXG4vKipcclxuICogRm9yIGNvbnZlcnRpbmcge3sgaW50ZXJwb2xhdGlvbiB9fSB2YWx1ZXMgdG8gZGlzcGxheWVkIHN0cmluZ3MuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XHJcbiAgICByZXR1cm4gdmFsID09IG51bGxcclxuICAgICAgICA/ICcnXHJcbiAgICAgICAgOiBpc09iamVjdCh2YWwpXHJcbiAgICAgICAgICAgID8gSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMilcclxuICAgICAgICAgICAgOiBTdHJpbmcodmFsKTtcclxufTtcclxuY29uc3QgcmVwbGFjZXIgPSAoX2tleSwgdmFsKSA9PiB7XHJcbiAgICBpZiAoaXNNYXAodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgTWFwKCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLmVudHJpZXMoKV0ucmVkdWNlKChlbnRyaWVzLCBba2V5LCB2YWxdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzW2Ake2tleX0gPT5gXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xyXG4gICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWw7XHJcbn07XG5cbi8qKlxyXG4gKiBMaXN0IG9mIEBiYWJlbC9wYXJzZXIgcGx1Z2lucyB0aGF0IGFyZSB1c2VkIGZvciB0ZW1wbGF0ZSBleHByZXNzaW9uXHJcbiAqIHRyYW5zZm9ybXMgYW5kIFNGQyBzY3JpcHQgdHJhbnNmb3Jtcy4gQnkgZGVmYXVsdCB3ZSBlbmFibGUgcHJvcG9zYWxzIHNsYXRlZFxyXG4gKiBmb3IgRVMyMDIwLiBUaGlzIHdpbGwgbmVlZCB0byBiZSB1cGRhdGVkIGFzIHRoZSBzcGVjIG1vdmVzIGZvcndhcmQuXHJcbiAqIEZ1bGwgbGlzdCBhdCBodHRwczovL2JhYmVsanMuaW8vZG9jcy9lbi9uZXh0L2JhYmVsLXBhcnNlciNwbHVnaW5zXHJcbiAqL1xyXG5jb25zdCBiYWJlbFBhcnNlckRlZmF1bHRQbHVnaW5zID0gW1xyXG4gICAgJ2JpZ0ludCcsXHJcbiAgICAnb3B0aW9uYWxDaGFpbmluZycsXHJcbiAgICAnbnVsbGlzaENvYWxlc2NpbmdPcGVyYXRvcidcclxuXTtcclxuY29uc3QgRU1QVFlfT0JKID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICA/IE9iamVjdC5mcmVlemUoe30pXHJcbiAgICA6IHt9O1xyXG5jb25zdCBFTVBUWV9BUlIgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBPYmplY3QuZnJlZXplKFtdKSA6IFtdO1xyXG5jb25zdCBOT09QID0gKCkgPT4geyB9O1xyXG4vKipcclxuICogQWx3YXlzIHJldHVybiBmYWxzZS5cclxuICovXHJcbmNvbnN0IE5PID0gKCkgPT4gZmFsc2U7XHJcbmNvbnN0IG9uUkUgPSAvXm9uW15hLXpdLztcclxuY29uc3QgaXNPbiA9IChrZXkpID0+IG9uUkUudGVzdChrZXkpO1xyXG5jb25zdCBpc01vZGVsTGlzdGVuZXIgPSAoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aCgnb25VcGRhdGU6Jyk7XHJcbmNvbnN0IGV4dGVuZCA9IE9iamVjdC5hc3NpZ247XHJcbmNvbnN0IHJlbW92ZSA9IChhcnIsIGVsKSA9PiB7XHJcbiAgICBjb25zdCBpID0gYXJyLmluZGV4T2YoZWwpO1xyXG4gICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgIGFyci5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcclxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XHJcbmNvbnN0IGlzTWFwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE1hcF0nO1xyXG5jb25zdCBpc1NldCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBTZXRdJztcclxuY29uc3QgaXNEYXRlID0gKHZhbCkgPT4gdmFsIGluc3RhbmNlb2YgRGF0ZTtcclxuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XHJcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gJ3N5bWJvbCc7XHJcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xyXG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC50aGVuKSAmJiBpc0Z1bmN0aW9uKHZhbC5jYXRjaCk7XHJcbn07XHJcbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcclxuY29uc3QgdG9UeXBlU3RyaW5nID0gKHZhbHVlKSA9PiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcclxuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XHJcbiAgICAvLyBleHRyYWN0IFwiUmF3VHlwZVwiIGZyb20gc3RyaW5ncyBsaWtlIFwiW29iamVjdCBSYXdUeXBlXVwiXHJcbiAgICByZXR1cm4gdG9UeXBlU3RyaW5nKHZhbHVlKS5zbGljZSg4LCAtMSk7XHJcbn07XHJcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbmNvbnN0IGlzSW50ZWdlcktleSA9IChrZXkpID0+IGlzU3RyaW5nKGtleSkgJiZcclxuICAgIGtleSAhPT0gJ05hTicgJiZcclxuICAgIGtleVswXSAhPT0gJy0nICYmXHJcbiAgICAnJyArIHBhcnNlSW50KGtleSwgMTApID09PSBrZXk7XHJcbmNvbnN0IGlzUmVzZXJ2ZWRQcm9wID0gLyojX19QVVJFX18qLyBtYWtlTWFwKFxyXG4vLyB0aGUgbGVhZGluZyBjb21tYSBpcyBpbnRlbnRpb25hbCBzbyBlbXB0eSBzdHJpbmcgXCJcIiBpcyBhbHNvIGluY2x1ZGVkXHJcbicsa2V5LHJlZiwnICtcclxuICAgICdvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsJyArXHJcbiAgICAnb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCwnICtcclxuICAgICdvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkJyk7XHJcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAoKHN0cikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGhpdCA9IGNhY2hlW3N0cl07XHJcbiAgICAgICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgY2FtZWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJykpO1xyXG59KTtcclxuY29uc3QgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGh5cGhlbmF0ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHRvSGFuZGxlcktleSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gKHN0ciA/IGBvbiR7Y2FwaXRhbGl6ZShzdHIpfWAgOiBgYCkpO1xyXG4vLyBjb21wYXJlIHdoZXRoZXIgYSB2YWx1ZSBoYXMgY2hhbmdlZCwgYWNjb3VudGluZyBmb3IgTmFOLlxyXG5jb25zdCBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gdmFsdWUgIT09IG9sZFZhbHVlICYmICh2YWx1ZSA9PT0gdmFsdWUgfHwgb2xkVmFsdWUgPT09IG9sZFZhbHVlKTtcclxuY29uc3QgaW52b2tlQXJyYXlGbnMgPSAoZm5zLCBhcmcpID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZm5zW2ldKGFyZyk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGRlZiA9IChvYmosIGtleSwgdmFsdWUpID0+IHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZVxyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IHRvTnVtYmVyID0gKHZhbCkgPT4ge1xyXG4gICAgY29uc3QgbiA9IHBhcnNlRmxvYXQodmFsKTtcclxuICAgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XHJcbn07XHJcbmxldCBfZ2xvYmFsVGhpcztcclxuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcclxuICAgIHJldHVybiAoX2dsb2JhbFRoaXMgfHxcclxuICAgICAgICAoX2dsb2JhbFRoaXMgPVxyXG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgID8gZ2xvYmFsVGhpc1xyXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICA/IHNlbGZcclxuICAgICAgICAgICAgICAgICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZ2xvYmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHt9KSk7XHJcbn07XG5cbmV4cG9ydCB7IEVNUFRZX0FSUiwgRU1QVFlfT0JKLCBOTywgTk9PUCwgUGF0Y2hGbGFnTmFtZXMsIGJhYmVsUGFyc2VyRGVmYXVsdFBsdWdpbnMsIGNhbWVsaXplLCBjYXBpdGFsaXplLCBkZWYsIGVzY2FwZUh0bWwsIGVzY2FwZUh0bWxDb21tZW50LCBleHRlbmQsIGdlbmVyYXRlQ29kZUZyYW1lLCBnZXRHbG9iYWxUaGlzLCBoYXNDaGFuZ2VkLCBoYXNPd24sIGh5cGhlbmF0ZSwgaW52b2tlQXJyYXlGbnMsIGlzQXJyYXksIGlzQm9vbGVhbkF0dHIsIGlzRGF0ZSwgaXNGdW5jdGlvbiwgaXNHbG9iYWxseVdoaXRlbGlzdGVkLCBpc0hUTUxUYWcsIGlzSW50ZWdlcktleSwgaXNLbm93bkF0dHIsIGlzTWFwLCBpc01vZGVsTGlzdGVuZXIsIGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCwgaXNPYmplY3QsIGlzT24sIGlzUGxhaW5PYmplY3QsIGlzUHJvbWlzZSwgaXNSZXNlcnZlZFByb3AsIGlzU1NSU2FmZUF0dHJOYW1lLCBpc1NWR1RhZywgaXNTZXQsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVm9pZFRhZywgbG9vc2VFcXVhbCwgbG9vc2VJbmRleE9mLCBtYWtlTWFwLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplU3R5bGUsIG9iamVjdFRvU3RyaW5nLCBwYXJzZVN0cmluZ1N0eWxlLCBwcm9wc1RvQXR0ck1hcCwgcmVtb3ZlLCBzbG90RmxhZ3NUZXh0LCBzdHJpbmdpZnlTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXksIHRvTnVtYmVyLCB0b1Jhd1R5cGUsIHRvVHlwZVN0cmluZyB9O1xuIiwiaW1wb3J0IHsgRU1QVFlfT0JKLCBpc0FycmF5LCBpc01hcCwgaXNJbnRlZ2VyS2V5LCBpc1N5bWJvbCwgZXh0ZW5kLCBoYXNPd24sIGlzT2JqZWN0LCBoYXNDaGFuZ2VkLCBtYWtlTWFwLCBjYXBpdGFsaXplLCB0b1Jhd1R5cGUsIGRlZiwgaXNGdW5jdGlvbiwgTk9PUCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgdGFyZ2V0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgZWZmZWN0U3RhY2sgPSBbXTtcclxubGV0IGFjdGl2ZUVmZmVjdDtcclxuY29uc3QgSVRFUkFURV9LRVkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ2l0ZXJhdGUnIDogJycpO1xyXG5jb25zdCBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdNYXAga2V5IGl0ZXJhdGUnIDogJycpO1xyXG5mdW5jdGlvbiBpc0VmZmVjdChmbikge1xyXG4gICAgcmV0dXJuIGZuICYmIGZuLl9pc0VmZmVjdCA9PT0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBlZmZlY3QoZm4sIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcclxuICAgIGlmIChpc0VmZmVjdChmbikpIHtcclxuICAgICAgICBmbiA9IGZuLnJhdztcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdCA9IGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKTtcclxuICAgIGlmICghb3B0aW9ucy5sYXp5KSB7XHJcbiAgICAgICAgZWZmZWN0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWZmZWN0O1xyXG59XHJcbmZ1bmN0aW9uIHN0b3AoZWZmZWN0KSB7XHJcbiAgICBpZiAoZWZmZWN0LmFjdGl2ZSkge1xyXG4gICAgICAgIGNsZWFudXAoZWZmZWN0KTtcclxuICAgICAgICBpZiAoZWZmZWN0Lm9wdGlvbnMub25TdG9wKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uU3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlZmZlY3QuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKSB7XHJcbiAgICBjb25zdCBlZmZlY3QgPSBmdW5jdGlvbiByZWFjdGl2ZUVmZmVjdCgpIHtcclxuICAgICAgICBpZiAoIWVmZmVjdC5hY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZWZmZWN0U3RhY2suaW5jbHVkZXMoZWZmZWN0KSkge1xyXG4gICAgICAgICAgICBjbGVhbnVwKGVmZmVjdCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbmFibGVUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0U3RhY2sucHVzaChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdCA9IGVmZmVjdFN0YWNrW2VmZmVjdFN0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGVmZmVjdC5pZCA9IHVpZCsrO1xyXG4gICAgZWZmZWN0LmFsbG93UmVjdXJzZSA9ICEhb3B0aW9ucy5hbGxvd1JlY3Vyc2U7XHJcbiAgICBlZmZlY3QuX2lzRWZmZWN0ID0gdHJ1ZTtcclxuICAgIGVmZmVjdC5hY3RpdmUgPSB0cnVlO1xyXG4gICAgZWZmZWN0LnJhdyA9IGZuO1xyXG4gICAgZWZmZWN0LmRlcHMgPSBbXTtcclxuICAgIGVmZmVjdC5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIHJldHVybiBlZmZlY3Q7XHJcbn1cclxuZnVuY3Rpb24gY2xlYW51cChlZmZlY3QpIHtcclxuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlcHNbaV0uZGVsZXRlKGVmZmVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcHMubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xyXG5jb25zdCB0cmFja1N0YWNrID0gW107XHJcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XHJcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcclxuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcclxufVxyXG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xyXG4gICAgaWYgKCFzaG91bGRUcmFjayB8fCBhY3RpdmVFZmZlY3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKCFkZXBzTWFwKSB7XHJcbiAgICAgICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIChkZXBzTWFwID0gbmV3IE1hcCgpKSk7XHJcbiAgICB9XHJcbiAgICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcclxuICAgIGlmICghZGVwKSB7XHJcbiAgICAgICAgZGVwc01hcC5zZXQoa2V5LCAoZGVwID0gbmV3IFNldCgpKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWRlcC5oYXMoYWN0aXZlRWZmZWN0KSkge1xyXG4gICAgICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcclxuICAgICAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhY3RpdmVFZmZlY3Qub3B0aW9ucy5vblRyYWNrKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2soe1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0OiBhY3RpdmVFZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAga2V5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xyXG4gICAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmICghZGVwc01hcCkge1xyXG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGVmZmVjdHMgPSBuZXcgU2V0KCk7XHJcbiAgICBjb25zdCBhZGQgPSAoZWZmZWN0c1RvQWRkKSA9PiB7XHJcbiAgICAgICAgaWYgKGVmZmVjdHNUb0FkZCkge1xyXG4gICAgICAgICAgICBlZmZlY3RzVG9BZGQuZm9yRWFjaChlZmZlY3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVmZmVjdCAhPT0gYWN0aXZlRWZmZWN0IHx8IGVmZmVjdC5hbGxvd1JlY3Vyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzLmFkZChlZmZlY3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKHR5cGUgPT09IFwiY2xlYXJcIiAvKiBDTEVBUiAqLykge1xyXG4gICAgICAgIC8vIGNvbGxlY3Rpb24gYmVpbmcgY2xlYXJlZFxyXG4gICAgICAgIC8vIHRyaWdnZXIgYWxsIGVmZmVjdHMgZm9yIHRhcmdldFxyXG4gICAgICAgIGRlcHNNYXAuZm9yRWFjaChhZGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoa2V5ID09PSAnbGVuZ3RoJyAmJiBpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdsZW5ndGgnIHx8IGtleSA+PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYWRkKGRlcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHNjaGVkdWxlIHJ1bnMgZm9yIFNFVCB8IEFERCB8IERFTEVURVxyXG4gICAgICAgIGlmIChrZXkgIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICBhZGQoZGVwc01hcC5nZXQoa2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsc28gcnVuIGZvciBpdGVyYXRpb24ga2V5IG9uIEFERCB8IERFTEVURSB8IE1hcC5TRVRcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFkZFwiIC8qIEFERCAqLzpcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ludGVnZXJLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBpbmRleCBhZGRlZCB0byBhcnJheSAtPiBsZW5ndGggY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldCgnbGVuZ3RoJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZWxldGVcIiAvKiBERUxFVEUgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJzZXRcIiAvKiBTRVQgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcnVuID0gKGVmZmVjdCkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9wdGlvbnMub25UcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdC5vcHRpb25zLm9uVHJpZ2dlcih7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIG9sZFRhcmdldFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVmZmVjdC5vcHRpb25zLnNjaGVkdWxlcikge1xyXG4gICAgICAgICAgICBlZmZlY3Qub3B0aW9ucy5zY2hlZHVsZXIoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBlZmZlY3RzLmZvckVhY2gocnVuKTtcclxufVxuXG5jb25zdCBpc05vblRyYWNrYWJsZUtleXMgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYF9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZWApO1xyXG5jb25zdCBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKVxyXG4gICAgLm1hcChrZXkgPT4gU3ltYm9sW2tleV0pXHJcbiAgICAuZmlsdGVyKGlzU3ltYm9sKSk7XHJcbmNvbnN0IGdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcihmYWxzZSwgdHJ1ZSk7XHJcbmNvbnN0IHJlYWRvbmx5R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIodHJ1ZSk7XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUsIHRydWUpO1xyXG5jb25zdCBhcnJheUluc3RydW1lbnRhdGlvbnMgPSB7fTtcclxuWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgY29uc3QgbWV0aG9kID0gQXJyYXkucHJvdG90eXBlW2tleV07XHJcbiAgICBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gdG9SYXcodGhpcyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIgLyogR0VUICovLCBpICsgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBydW4gdGhlIG1ldGhvZCB1c2luZyB0aGUgb3JpZ2luYWwgYXJncyBmaXJzdCAod2hpY2ggbWF5IGJlIHJlYWN0aXZlKVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IG1ldGhvZC5hcHBseShhcnIsIGFyZ3MpO1xyXG4gICAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gaWYgdGhhdCBkaWRuJ3Qgd29yaywgcnVuIGl0IGFnYWluIHVzaW5nIHJhdyB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybiBtZXRob2QuYXBwbHkoYXJyLCBhcmdzLm1hcCh0b1JhdykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59KTtcclxuWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZSddLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGNvbnN0IG1ldGhvZCA9IEFycmF5LnByb3RvdHlwZVtrZXldO1xyXG4gICAgYXJyYXlJbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBjb25zdCByZXMgPSBtZXRob2QuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59KTtcclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLyAmJlxyXG4gICAgICAgICAgICByZWNlaXZlciA9PT1cclxuICAgICAgICAgICAgICAgIChpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2hhbGxvd1JlYWRvbmx5TWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVhZG9ubHlNYXBcclxuICAgICAgICAgICAgICAgICAgICA6IHNoYWxsb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhY3RpdmVNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFjdGl2ZU1hcCkuZ2V0KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkgJiYgdGFyZ2V0SXNBcnJheSAmJiBoYXNPd24oYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldChhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIGlmIChpc1N5bWJvbChrZXkpID8gYnVpbHRJblN5bWJvbHMuaGFzKGtleSkgOiBpc05vblRyYWNrYWJsZUtleXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzUmVhZG9ubHkpIHtcclxuICAgICAgICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzUmVmKHJlcykpIHtcclxuICAgICAgICAgICAgLy8gcmVmIHVud3JhcHBpbmcgLSBkb2VzIG5vdCBhcHBseSBmb3IgQXJyYXkgKyBpbnRlZ2VyIGtleS5cclxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVW53cmFwID0gIXRhcmdldElzQXJyYXkgfHwgIWlzSW50ZWdlcktleShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hvdWxkVW53cmFwID8gcmVzLnZhbHVlIDogcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xyXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHJldHVybmVkIHZhbHVlIGludG8gYSBwcm94eSBhcyB3ZWxsLiB3ZSBkbyB0aGUgaXNPYmplY3QgY2hlY2tcclxuICAgICAgICAgICAgLy8gaGVyZSB0byBhdm9pZCBpbnZhbGlkIHZhbHVlIHdhcm5pbmcuIEFsc28gbmVlZCB0byBsYXp5IGFjY2VzcyByZWFkb25seVxyXG4gICAgICAgICAgICAvLyBhbmQgcmVhY3RpdmUgaGVyZSB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5LlxyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seSA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBzZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcigpO1xyXG5jb25zdCBzaGFsbG93U2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVTZXR0ZXIodHJ1ZSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHRlcihzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xyXG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIGlmICghc2hhbGxvdykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpXHJcbiAgICAgICAgICAgID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoXHJcbiAgICAgICAgICAgIDogaGFzT3duKHRhcmdldCwga2V5KTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICAvLyBkb24ndCB0cmlnZ2VyIGlmIHRhcmdldCBpcyBzb21ldGhpbmcgdXAgaW4gdGhlIHByb3RvdHlwZSBjaGFpbiBvZiBvcmlnaW5hbFxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRvUmF3KHJlY2VpdmVyKSkge1xyXG4gICAgICAgICAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XHJcbiAgICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiAvKiBERUxFVEUgKi8sIGtleSwgdW5kZWZpbmVkLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5oYXModGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xyXG4gICAgICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XHJcbiAgICB0cmFjayh0YXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIGlzQXJyYXkodGFyZ2V0KSA/ICdsZW5ndGgnIDogSVRFUkFURV9LRVkpO1xyXG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xyXG59XHJcbmNvbnN0IG11dGFibGVIYW5kbGVycyA9IHtcclxuICAgIGdldCxcclxuICAgIHNldCxcclxuICAgIGRlbGV0ZVByb3BlcnR5LFxyXG4gICAgaGFzLFxyXG4gICAgb3duS2V5c1xyXG59O1xyXG5jb25zdCByZWFkb25seUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiByZWFkb25seUdldCxcclxuICAgIHNldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgRGVsZXRlIG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IGV4dGVuZCh7fSwgbXV0YWJsZUhhbmRsZXJzLCB7XHJcbiAgICBnZXQ6IHNoYWxsb3dHZXQsXHJcbiAgICBzZXQ6IHNoYWxsb3dTZXRcclxufSk7XHJcbi8vIFByb3BzIGhhbmRsZXJzIGFyZSBzcGVjaWFsIGluIHRoZSBzZW5zZSB0aGF0IGl0IHNob3VsZCBub3QgdW53cmFwIHRvcC1sZXZlbFxyXG4vLyByZWZzIChpbiBvcmRlciB0byBhbGxvdyByZWZzIHRvIGJlIGV4cGxpY2l0bHkgcGFzc2VkIGRvd24pLCBidXQgc2hvdWxkXHJcbi8vIHJldGFpbiB0aGUgcmVhY3Rpdml0eSBvZiB0aGUgbm9ybWFsIHJlYWRvbmx5IG9iamVjdC5cclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMgPSBleHRlbmQoe30sIHJlYWRvbmx5SGFuZGxlcnMsIHtcclxuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XHJcbn0pO1xuXG5jb25zdCB0b1JlYWN0aXZlID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFjdGl2ZSh2YWx1ZSkgOiB2YWx1ZTtcclxuY29uc3QgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvU2hhbGxvdyA9ICh2YWx1ZSkgPT4gdmFsdWU7XHJcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XHJcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAvLyAjMTc3MjogcmVhZG9ubHkocmVhY3RpdmUoTWFwKSkgc2hvdWxkIHJldHVybiByZWFkb25seSArIHJlYWN0aXZlIHZlcnNpb25cclxuICAgIC8vIG9mIHRoZSB2YWx1ZVxyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiAvKiBHRVQgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCByYXdLZXkpO1xyXG4gICAgY29uc3QgeyBoYXMgfSA9IGdldFByb3RvKHJhd1RhcmdldCk7XHJcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xyXG4gICAgaWYgKGhhcy5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xyXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodGFyZ2V0ICE9PSByYXdUYXJnZXQpIHtcclxuICAgICAgICAvLyAjMzYwMiByZWFkb25seShyZWFjdGl2ZShNYXApKVxyXG4gICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBuZXN0ZWQgcmVhY3RpdmUgYE1hcGAgY2FuIGRvIHRyYWNraW5nIGZvciBpdHNlbGZcclxuICAgICAgICB0YXJnZXQuZ2V0KGtleSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaGFzJDEoa2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XHJcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgaWYgKGtleSAhPT0gcmF3S2V5KSB7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiIC8qIEhBUyAqLywga2V5KTtcclxuICAgIH1cclxuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIHJhd0tleSk7XHJcbiAgICByZXR1cm4ga2V5ID09PSByYXdLZXlcclxuICAgICAgICA/IHRhcmdldC5oYXMoa2V5KVxyXG4gICAgICAgIDogdGFyZ2V0LmhhcyhrZXkpIHx8IHRhcmdldC5oYXMocmF3S2V5KTtcclxufVxyXG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XHJcbiAgICB0YXJnZXQgPSB0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHRvUmF3KHRhcmdldCksIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcclxuICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsICdzaXplJywgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiBhZGQodmFsdWUpIHtcclxuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCBwcm90byA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdGFyZ2V0LmFkZCh2YWx1ZSk7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCB2YWx1ZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuZnVuY3Rpb24gc2V0JDEoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiAvKiBBREQgKi8sIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIgLyogU0VUICovLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxufVxyXG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcclxuICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIGtleSA9IHRvUmF3KGtleSk7XHJcbiAgICAgICAgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IGdldCA/IGdldC5jYWxsKHRhcmdldCwga2V5KSA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuZGVsZXRlKGtleSk7XHJcbiAgICBpZiAoaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIgLyogREVMRVRFICovLCBrZXksIHVuZGVmaW5lZCwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjbGVhcigpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgaGFkSXRlbXMgPSB0YXJnZXQuc2l6ZSAhPT0gMDtcclxuICAgIGNvbnN0IG9sZFRhcmdldCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgID8gaXNNYXAodGFyZ2V0KVxyXG4gICAgICAgICAgICA/IG5ldyBNYXAodGFyZ2V0KVxyXG4gICAgICAgICAgICA6IG5ldyBTZXQodGFyZ2V0KVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgLy8gZm9yd2FyZCB0aGUgb3BlcmF0aW9uIGJlZm9yZSBxdWV1ZWluZyByZWFjdGlvbnNcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5jbGVhcigpO1xyXG4gICAgaWYgKGhhZEl0ZW1zKSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiY2xlYXJcIiAvKiBDTEVBUiAqLywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIG9sZFRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUZvckVhY2goaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xyXG4gICAgICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XHJcbiAgICAgICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiIC8qIElURVJBVEUgKi8sIElURVJBVEVfS0VZKTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgLy8gaW1wb3J0YW50OiBtYWtlIHN1cmUgdGhlIGNhbGxiYWNrIGlzXHJcbiAgICAgICAgICAgIC8vIDEuIGludm9rZWQgd2l0aCB0aGUgcmVhY3RpdmUgbWFwIGFzIGB0aGlzYCBhbmQgM3JkIGFyZ1xyXG4gICAgICAgICAgICAvLyAyLiB0aGUgdmFsdWUgcmVjZWl2ZWQgc2hvdWxkIGJlIGEgY29ycmVzcG9uZGluZyByZWFjdGl2ZS9yZWFkb25seS5cclxuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgd3JhcCh2YWx1ZSksIHdyYXAoa2V5KSwgb2JzZXJ2ZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0SXNNYXAgPSBpc01hcChyYXdUYXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IGlzUGFpciA9IG1ldGhvZCA9PT0gJ2VudHJpZXMnIHx8IChtZXRob2QgPT09IFN5bWJvbC5pdGVyYXRvciAmJiB0YXJnZXRJc01hcCk7XHJcbiAgICAgICAgY29uc3QgaXNLZXlPbmx5ID0gbWV0aG9kID09PSAna2V5cycgJiYgdGFyZ2V0SXNNYXA7XHJcbiAgICAgICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiZcclxuICAgICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVkpO1xyXG4gICAgICAgIC8vIHJldHVybiBhIHdyYXBwZWQgaXRlcmF0b3Igd2hpY2ggcmV0dXJucyBvYnNlcnZlZCB2ZXJzaW9ucyBvZiB0aGVcclxuICAgICAgICAvLyB2YWx1ZXMgZW1pdHRlZCBmcm9tIHRoZSByZWFsIGl0ZXJhdG9yXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLy8gaXRlcmF0b3IgcHJvdG9jb2xcclxuICAgICAgICAgICAgbmV4dCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGlubmVySXRlcmF0b3IubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWUsIGRvbmUgfVxyXG4gICAgICAgICAgICAgICAgICAgIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNQYWlyID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB3cmFwKHZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIGl0ZXJhYmxlIHByb3RvY29sXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGFyZ3NbMF0gPyBgb24ga2V5IFwiJHthcmdzWzBdfVwiIGAgOiBgYDtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGAke2NhcGl0YWxpemUodHlwZSl9IG9wZXJhdGlvbiAke2tleX1mYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0b1Jhdyh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlID09PSBcImRlbGV0ZVwiIC8qIERFTEVURSAqLyA/IGZhbHNlIDogdGhpcztcclxuICAgIH07XHJcbn1cclxuY29uc3QgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNpemUodGhpcyk7XHJcbiAgICB9LFxyXG4gICAgaGFzOiBoYXMkMSxcclxuICAgIGFkZCxcclxuICAgIHNldDogc2V0JDEsXHJcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgY2xlYXIsXHJcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCBmYWxzZSlcclxufTtcclxuY29uc3Qgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgfSxcclxuICAgIGhhczogaGFzJDEsXHJcbiAgICBhZGQsXHJcbiAgICBzZXQ6IHNldCQxLFxyXG4gICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcclxuICAgIGNsZWFyLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgdHJ1ZSlcclxufTtcclxuY29uc3QgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGhhcyhrZXkpIHtcclxuICAgICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xyXG4gICAgfSxcclxuICAgIGFkZDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJhZGRcIiAvKiBBREQgKi8pLFxyXG4gICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcInNldFwiIC8qIFNFVCAqLyksXHJcbiAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogREVMRVRFICovKSxcclxuICAgIGNsZWFyOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImNsZWFyXCIgLyogQ0xFQVIgKi8pLFxyXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCBmYWxzZSlcclxufTtcclxuY29uc3Qgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgIGdldChrZXkpIHtcclxuICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBoYXMoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogQUREICovKSxcclxuICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBTRVQgKi8pLFxyXG4gICAgZGVsZXRlOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImRlbGV0ZVwiIC8qIERFTEVURSAqLyksXHJcbiAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIENMRUFSICovKSxcclxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgdHJ1ZSlcclxufTtcclxuY29uc3QgaXRlcmF0b3JNZXRob2RzID0gWydrZXlzJywgJ3ZhbHVlcycsICdlbnRyaWVzJywgU3ltYm9sLml0ZXJhdG9yXTtcclxuaXRlcmF0b3JNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgIG11dGFibGVJbnN0cnVtZW50YXRpb25zW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xyXG4gICAgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCB0cnVlKTtcclxufSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XHJcbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gc2hhbGxvd1xyXG4gICAgICAgID8gaXNSZWFkb25seVxyXG4gICAgICAgICAgICA/IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiBzaGFsbG93SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgIDogaXNSZWFkb25seVxyXG4gICAgICAgICAgICA/IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IG11dGFibGVJbnN0cnVtZW50YXRpb25zO1xyXG4gICAgcmV0dXJuICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHtcclxuICAgICAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIgLyogSVNfUkVBQ1RJVkUgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSZWFkb25seTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9yYXdcIiAvKiBSQVcgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXRcclxuICAgICAgICAgICAgPyBpbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgICAgIDogdGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcclxuICAgIH07XHJcbn1cclxuY29uc3QgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcclxufTtcclxuY29uc3Qgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxyXG59O1xyXG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKHRydWUsIGZhbHNlKVxyXG59O1xyXG5jb25zdCBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCB0cnVlKVxyXG59O1xyXG5mdW5jdGlvbiBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KSB7XHJcbiAgICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcclxuICAgICAgICBjb25zb2xlLndhcm4oYFJlYWN0aXZlICR7dHlwZX0gY29udGFpbnMgYm90aCB0aGUgcmF3IGFuZCByZWFjdGl2ZSBgICtcclxuICAgICAgICAgICAgYHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCBgICtcclxuICAgICAgICAgICAgYHdoaWNoIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcy4gYCArXHJcbiAgICAgICAgICAgIGBBdm9pZCBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiB0aGUgcmF3IGFuZCByZWFjdGl2ZSB2ZXJzaW9ucyBgICtcclxuICAgICAgICAgICAgYG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYCk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBzaGFsbG93UmVhY3RpdmVNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCByZWFkb25seU1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seU1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xyXG4gICAgc3dpdGNoIChyYXdUeXBlKSB7XHJcbiAgICAgICAgY2FzZSAnT2JqZWN0JzpcclxuICAgICAgICBjYXNlICdBcnJheSc6XHJcbiAgICAgICAgICAgIHJldHVybiAxIC8qIENPTU1PTiAqLztcclxuICAgICAgICBjYXNlICdNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1NldCc6XHJcbiAgICAgICAgY2FzZSAnV2Vha01hcCc6XHJcbiAgICAgICAgY2FzZSAnV2Vha1NldCc6XHJcbiAgICAgICAgICAgIHJldHVybiAyIC8qIENPTExFQ1RJT04gKi87XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuIDAgLyogSU5WQUxJRCAqLztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRUYXJnZXRUeXBlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKVxyXG4gICAgICAgID8gMCAvKiBJTlZBTElEICovXHJcbiAgICAgICAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xyXG59XHJcbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xyXG4gICAgLy8gaWYgdHJ5aW5nIHRvIG9ic2VydmUgYSByZWFkb25seSBwcm94eSwgcmV0dXJuIHRoZSByZWFkb25seSB2ZXJzaW9uLlxyXG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgbXV0YWJsZUhhbmRsZXJzLCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzLCByZWFjdGl2ZU1hcCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybiBhIHNoYWxsb3dseS1yZWFjdGl2ZSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3RcclxuICogbGV2ZWwgcHJvcGVydGllcyBhcmUgcmVhY3RpdmUuIEl0IGFsc28gZG9lcyBub3QgYXV0by11bndyYXAgcmVmcyAoZXZlbiBhdCB0aGVcclxuICogcm9vdCBsZXZlbCkuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsIHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMsIHNoYWxsb3dSZWFjdGl2ZU1hcCk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSByZWFkb25seSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QuIE5vdGUgdGhlIHJldHVybmVkIGNvcHkgaXMgbm90XHJcbiAqIG1hZGUgcmVhY3RpdmUsIGJ1dCBgcmVhZG9ubHlgIGNhbiBiZSBjYWxsZWQgb24gYW4gYWxyZWFkeSByZWFjdGl2ZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIHRydWUsIHJlYWRvbmx5SGFuZGxlcnMsIHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLCByZWFkb25seU1hcCk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgYSByZWFjdGl2ZS1jb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3QgbGV2ZWxcclxuICogcHJvcGVydGllcyBhcmUgcmVhZG9ubHksIGFuZCBkb2VzIE5PVCB1bndyYXAgcmVmcyBub3IgcmVjdXJzaXZlbHkgY29udmVydFxyXG4gKiByZXR1cm5lZCBwcm9wZXJ0aWVzLlxyXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGNyZWF0aW5nIHRoZSBwcm9wcyBwcm94eSBvYmplY3QgZm9yIHN0YXRlZnVsIGNvbXBvbmVudHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGFsbG93UmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCBzaGFsbG93UmVhZG9ubHlIYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLCBzaGFsbG93UmVhZG9ubHlNYXApO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICAvLyB0YXJnZXQgaXMgYWxyZWFkeSBhIFByb3h5LCByZXR1cm4gaXQuXHJcbiAgICAvLyBleGNlcHRpb246IGNhbGxpbmcgcmVhZG9ubHkoKSBvbiBhIHJlYWN0aXZlIG9iamVjdFxyXG4gICAgaWYgKHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dICYmXHJcbiAgICAgICAgIShpc1JlYWRvbmx5ICYmIHRhcmdldFtcIl9fdl9pc1JlYWN0aXZlXCIgLyogSVNfUkVBQ1RJVkUgKi9dKSkge1xyXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICAvLyB0YXJnZXQgYWxyZWFkeSBoYXMgY29ycmVzcG9uZGluZyBQcm94eVxyXG4gICAgY29uc3QgZXhpc3RpbmdQcm94eSA9IHByb3h5TWFwLmdldCh0YXJnZXQpO1xyXG4gICAgaWYgKGV4aXN0aW5nUHJveHkpIHtcclxuICAgICAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcclxuICAgIH1cclxuICAgIC8vIG9ubHkgYSB3aGl0ZWxpc3Qgb2YgdmFsdWUgdHlwZXMgY2FuIGJlIG9ic2VydmVkLlxyXG4gICAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcclxuICAgIGlmICh0YXJnZXRUeXBlID09PSAwIC8qIElOVkFMSUQgKi8pIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB0YXJnZXRUeXBlID09PSAyIC8qIENPTExFQ1RJT04gKi8gPyBjb2xsZWN0aW9uSGFuZGxlcnMgOiBiYXNlSGFuZGxlcnMpO1xyXG4gICAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xyXG4gICAgcmV0dXJuIHByb3h5O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcclxuICAgIGlmIChpc1JlYWRvbmx5KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVhZG9ubHkodmFsdWUpIHtcclxuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi9dKTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcclxuICAgIHJldHVybiAoKG9ic2VydmVkICYmIHRvUmF3KG9ic2VydmVkW1wiX192X3Jhd1wiIC8qIFJBVyAqL10pKSB8fCBvYnNlcnZlZCk7XHJcbn1cclxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xyXG4gICAgZGVmKHZhbHVlLCBcIl9fdl9za2lwXCIgLyogU0tJUCAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuY29uc3QgY29udmVydCA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgPyByZWFjdGl2ZSh2YWwpIDogdmFsO1xyXG5mdW5jdGlvbiBpc1JlZihyKSB7XHJcbiAgICByZXR1cm4gQm9vbGVhbihyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiByZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xyXG59XHJcbmNsYXNzIFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX3Jhd1ZhbHVlLCBfc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5fcmF3VmFsdWUgPSBfcmF3VmFsdWU7XHJcbiAgICAgICAgdGhpcy5fc2hhbGxvdyA9IF9zaGFsbG93O1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IF9zaGFsbG93ID8gX3Jhd1ZhbHVlIDogY29udmVydChfcmF3VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHRyYWNrKHRvUmF3KHRoaXMpLCBcImdldFwiIC8qIEdFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHRvUmF3KG5ld1ZhbCksIHRoaXMuX3Jhd1ZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9zaGFsbG93ID8gbmV3VmFsIDogY29udmVydChuZXdWYWwpO1xyXG4gICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJywgbmV3VmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93ID0gZmFsc2UpIHtcclxuICAgIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gcmF3VmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlZkltcGwocmF3VmFsdWUsIHNoYWxsb3cpO1xyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmKSB7XHJcbiAgICB0cmlnZ2VyKHRvUmF3KHJlZiksIFwic2V0XCIgLyogU0VUICovLCAndmFsdWUnLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyByZWYudmFsdWUgOiB2b2lkIDApO1xyXG59XHJcbmZ1bmN0aW9uIHVucmVmKHJlZikge1xyXG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XHJcbn1cclxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcclxuICAgIHNldDogKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcclxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHByb3h5UmVmcyhvYmplY3RXaXRoUmVmcykge1xyXG4gICAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpXHJcbiAgICAgICAgPyBvYmplY3RXaXRoUmVmc1xyXG4gICAgICAgIDogbmV3IFByb3h5KG9iamVjdFdpdGhSZWZzLCBzaGFsbG93VW53cmFwSGFuZGxlcnMpO1xyXG59XHJcbmNsYXNzIEN1c3RvbVJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB7IGdldCwgc2V0IH0gPSBmYWN0b3J5KCgpID0+IHRyYWNrKHRoaXMsIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKSwgKCkgPT4gdHJpZ2dlcih0aGlzLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJykpO1xyXG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcclxuICAgICAgICB0aGlzLl9zZXQgPSBzZXQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NldChuZXdWYWwpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XHJcbiAgICByZXR1cm4gbmV3IEN1c3RvbVJlZkltcGwoZmFjdG9yeSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNQcm94eShvYmplY3QpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgcmV0W2tleV0gPSB0b1JlZihvYmplY3QsIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmNsYXNzIE9iamVjdFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29iamVjdFt0aGlzLl9rZXldO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdFt0aGlzLl9rZXldID0gbmV3VmFsO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRvUmVmKG9iamVjdCwga2V5KSB7XHJcbiAgICByZXR1cm4gaXNSZWYob2JqZWN0W2tleV0pXHJcbiAgICAgICAgPyBvYmplY3Rba2V5XVxyXG4gICAgICAgIDogbmV3IE9iamVjdFJlZkltcGwob2JqZWN0LCBrZXkpO1xyXG59XG5cbmNsYXNzIENvbXB1dGVkUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIsIF9zZXR0ZXIsIGlzUmVhZG9ubHkpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIgPSBfc2V0dGVyO1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgICAgIGxhenk6IHRydWUsXHJcbiAgICAgICAgICAgIHNjaGVkdWxlcjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKHRvUmF3KHRoaXMpLCBcInNldFwiIC8qIFNFVCAqLywgJ3ZhbHVlJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10gPSBpc1JlYWRvbmx5O1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRvUmF3KHRoaXMpO1xyXG4gICAgICAgIGlmIChzZWxmLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICBzZWxmLl92YWx1ZSA9IHRoaXMuZWZmZWN0KCk7XHJcbiAgICAgICAgICAgIHNlbGYuX2RpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyYWNrKHNlbGYsIFwiZ2V0XCIgLyogR0VUICovLCAndmFsdWUnKTtcclxuICAgICAgICByZXR1cm4gc2VsZi5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9zZXR0ZXIobmV3VmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucykge1xyXG4gICAgbGV0IGdldHRlcjtcclxuICAgIGxldCBzZXR0ZXI7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zO1xyXG4gICAgICAgIHNldHRlciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IE5PT1A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xyXG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkUmVmSW1wbChnZXR0ZXIsIHNldHRlciwgaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpIHx8ICFnZXR0ZXJPck9wdGlvbnMuc2V0KTtcclxufVxuXG5leHBvcnQgeyBJVEVSQVRFX0tFWSwgY29tcHV0ZWQsIGN1c3RvbVJlZiwgZWZmZWN0LCBlbmFibGVUcmFja2luZywgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHBhdXNlVHJhY2tpbmcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHJlc2V0VHJhY2tpbmcsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJhY2ssIHRyaWdnZXIsIHRyaWdnZXJSZWYsIHVucmVmIH07XG4iLCJpbXBvcnQgeyBwYXVzZVRyYWNraW5nLCByZXNldFRyYWNraW5nLCBpc1JlZiwgdG9SYXcsIGlzUmVhY3RpdmUsIGVmZmVjdCwgc3RvcCwgcmVmLCByZWFjdGl2ZSwgcHJveHlSZWZzLCB0b1JlZiwgc2hhbGxvd1JlYWN0aXZlLCB0cmlnZ2VyLCBpc1Byb3h5LCBzaGFsbG93UmVhZG9ubHksIHRyYWNrLCBjb21wdXRlZCBhcyBjb21wdXRlZCQxLCBpc1JlYWRvbmx5IH0gZnJvbSAnQHZ1ZS9yZWFjdGl2aXR5JztcbmV4cG9ydCB7IGN1c3RvbVJlZiwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIG1hcmtSYXcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJpZ2dlclJlZiwgdW5yZWYgfSBmcm9tICdAdnVlL3JlYWN0aXZpdHknO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzRnVuY3Rpb24sIGlzUHJvbWlzZSwgaXNBcnJheSwgZXh0ZW5kLCBoYXNPd24sIEVNUFRZX09CSiwgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgaHlwaGVuYXRlLCBjYW1lbGl6ZSwgaXNPbiwgaXNNb2RlbExpc3RlbmVyLCByZW1vdmUsIE5PT1AsIGhhc0NoYW5nZWQsIGlzT2JqZWN0LCBpc1NldCwgaXNNYXAsIGlzUGxhaW5PYmplY3QsIGludm9rZUFycmF5Rm5zLCBkZWYsIGlzUmVzZXJ2ZWRQcm9wLCBFTVBUWV9BUlIsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgbWFrZU1hcCwgTk8sIGdldEdsb2JhbFRoaXMsIG5vcm1hbGl6ZUNsYXNzLCBub3JtYWxpemVTdHlsZSwgaXNHbG9iYWxseVdoaXRlbGlzdGVkIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgY2FtZWxpemUsIGNhcGl0YWxpemUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdGFjayA9IFtdO1xyXG5mdW5jdGlvbiBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpIHtcclxuICAgIHN0YWNrLnB1c2godm5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIHBvcFdhcm5pbmdDb250ZXh0KCkge1xyXG4gICAgc3RhY2sucG9wKCk7XHJcbn1cclxuZnVuY3Rpb24gd2Fybihtc2csIC4uLmFyZ3MpIHtcclxuICAgIC8vIGF2b2lkIHByb3BzIGZvcm1hdHRpbmcgb3Igd2FybiBoYW5kbGVyIHRyYWNraW5nIGRlcHMgdGhhdCBtaWdodCBiZSBtdXRhdGVkXHJcbiAgICAvLyBkdXJpbmcgcGF0Y2gsIGxlYWRpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBzdGFjay5sZW5ndGggPyBzdGFja1tzdGFjay5sZW5ndGggLSAxXS5jb21wb25lbnQgOiBudWxsO1xyXG4gICAgY29uc3QgYXBwV2FybkhhbmRsZXIgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy53YXJuSGFuZGxlcjtcclxuICAgIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcclxuICAgIGlmIChhcHBXYXJuSGFuZGxlcikge1xyXG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBXYXJuSGFuZGxlciwgaW5zdGFuY2UsIDExIC8qIEFQUF9XQVJOX0hBTkRMRVIgKi8sIFtcclxuICAgICAgICAgICAgbXNnICsgYXJncy5qb2luKCcnKSxcclxuICAgICAgICAgICAgaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHksXHJcbiAgICAgICAgICAgIHRyYWNlXHJcbiAgICAgICAgICAgICAgICAubWFwKCh7IHZub2RlIH0pID0+IGBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCB2bm9kZS50eXBlKX0+YClcclxuICAgICAgICAgICAgICAgIC5qb2luKCdcXG4nKSxcclxuICAgICAgICAgICAgdHJhY2VcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAodHJhY2UubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXHJcbiAgICAgICAgICAgICFmYWxzZSkge1xyXG4gICAgICAgICAgICB3YXJuQXJncy5wdXNoKGBcXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRUcmFja2luZygpO1xyXG59XHJcbmZ1bmN0aW9uIGdldENvbXBvbmVudFRyYWNlKCkge1xyXG4gICAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xyXG4gICAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbiAgICAvLyB3ZSBjYW4ndCBqdXN0IHVzZSB0aGUgc3RhY2sgYmVjYXVzZSBpdCB3aWxsIGJlIGluY29tcGxldGUgZHVyaW5nIHVwZGF0ZXNcclxuICAgIC8vIHRoYXQgZGlkIG5vdCBzdGFydCBmcm9tIHRoZSByb290LiBSZS1jb25zdHJ1Y3QgdGhlIHBhcmVudCBjaGFpbiB1c2luZ1xyXG4gICAgLy8gaW5zdGFuY2UgcGFyZW50IHBvaW50ZXJzLlxyXG4gICAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XHJcbiAgICB3aGlsZSAoY3VycmVudFZOb2RlKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IG5vcm1hbGl6ZWRTdGFja1swXTtcclxuICAgICAgICBpZiAobGFzdCAmJiBsYXN0LnZub2RlID09PSBjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRTdGFjay5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHZub2RlOiBjdXJyZW50Vk5vZGUsXHJcbiAgICAgICAgICAgICAgICByZWN1cnNlQ291bnQ6IDBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmVudEluc3RhbmNlID0gY3VycmVudFZOb2RlLmNvbXBvbmVudCAmJiBjdXJyZW50Vk5vZGUuY29tcG9uZW50LnBhcmVudDtcclxuICAgICAgICBjdXJyZW50Vk5vZGUgPSBwYXJlbnRJbnN0YW5jZSAmJiBwYXJlbnRJbnN0YW5jZS52bm9kZTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVkU3RhY2s7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0VHJhY2UodHJhY2UpIHtcclxuICAgIGNvbnN0IGxvZ3MgPSBbXTtcclxuICAgIHRyYWNlLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XHJcbiAgICAgICAgbG9ncy5wdXNoKC4uLihpID09PSAwID8gW10gOiBbYFxcbmBdKSwgLi4uZm9ybWF0VHJhY2VFbnRyeShlbnRyeSkpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbG9ncztcclxufVxyXG5mdW5jdGlvbiBmb3JtYXRUcmFjZUVudHJ5KHsgdm5vZGUsIHJlY3Vyc2VDb3VudCB9KSB7XHJcbiAgICBjb25zdCBwb3N0Zml4ID0gcmVjdXJzZUNvdW50ID4gMCA/IGAuLi4gKCR7cmVjdXJzZUNvdW50fSByZWN1cnNpdmUgY2FsbHMpYCA6IGBgO1xyXG4gICAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XHJcbiAgICBjb25zdCBvcGVuID0gYCBhdCA8JHtmb3JtYXRDb21wb25lbnROYW1lKHZub2RlLmNvbXBvbmVudCwgdm5vZGUudHlwZSwgaXNSb290KX1gO1xyXG4gICAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xyXG4gICAgcmV0dXJuIHZub2RlLnByb3BzXHJcbiAgICAgICAgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV1cclxuICAgICAgICA6IFtvcGVuICsgY2xvc2VdO1xyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XHJcbiAgICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICByZXMucHVzaCguLi5mb3JtYXRQcm9wKGtleSwgcHJvcHNba2V5XSkpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XHJcbiAgICAgICAgcmVzLnB1c2goYCAuLi5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcclxuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT0ke3ZhbHVlfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8XHJcbiAgICAgICAgdmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZSA9IGZvcm1hdFByb3Aoa2V5LCB0b1Jhdyh2YWx1ZS52YWx1ZSksIHRydWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PVJlZjxgLCB2YWx1ZSwgYD5gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtgJHtrZXl9PWZuJHt2YWx1ZS5uYW1lID8gYDwke3ZhbHVlLm5hbWV9PmAgOiBgYH1gXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcclxuICAgIH1cclxufVxuXG5jb25zdCBFcnJvclR5cGVTdHJpbmdzID0ge1xyXG4gICAgW1wiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovXTogJ2JlZm9yZUNyZWF0ZSBob29rJyxcclxuICAgIFtcImNcIiAvKiBDUkVBVEVEICovXTogJ2NyZWF0ZWQgaG9vaycsXHJcbiAgICBbXCJibVwiIC8qIEJFRk9SRV9NT1VOVCAqL106ICdiZWZvcmVNb3VudCBob29rJyxcclxuICAgIFtcIm1cIiAvKiBNT1VOVEVEICovXTogJ21vdW50ZWQgaG9vaycsXHJcbiAgICBbXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi9dOiAnYmVmb3JlVXBkYXRlIGhvb2snLFxyXG4gICAgW1widVwiIC8qIFVQREFURUQgKi9dOiAndXBkYXRlZCcsXHJcbiAgICBbXCJidW1cIiAvKiBCRUZPUkVfVU5NT1VOVCAqL106ICdiZWZvcmVVbm1vdW50IGhvb2snLFxyXG4gICAgW1widW1cIiAvKiBVTk1PVU5URUQgKi9dOiAndW5tb3VudGVkIGhvb2snLFxyXG4gICAgW1wiYVwiIC8qIEFDVElWQVRFRCAqL106ICdhY3RpdmF0ZWQgaG9vaycsXHJcbiAgICBbXCJkYVwiIC8qIERFQUNUSVZBVEVEICovXTogJ2RlYWN0aXZhdGVkIGhvb2snLFxyXG4gICAgW1wiZWNcIiAvKiBFUlJPUl9DQVBUVVJFRCAqL106ICdlcnJvckNhcHR1cmVkIGhvb2snLFxyXG4gICAgW1wicnRjXCIgLyogUkVOREVSX1RSQUNLRUQgKi9dOiAncmVuZGVyVHJhY2tlZCBob29rJyxcclxuICAgIFtcInJ0Z1wiIC8qIFJFTkRFUl9UUklHR0VSRUQgKi9dOiAncmVuZGVyVHJpZ2dlcmVkIGhvb2snLFxyXG4gICAgWzAgLyogU0VUVVBfRlVOQ1RJT04gKi9dOiAnc2V0dXAgZnVuY3Rpb24nLFxyXG4gICAgWzEgLyogUkVOREVSX0ZVTkNUSU9OICovXTogJ3JlbmRlciBmdW5jdGlvbicsXHJcbiAgICBbMiAvKiBXQVRDSF9HRVRURVIgKi9dOiAnd2F0Y2hlciBnZXR0ZXInLFxyXG4gICAgWzMgLyogV0FUQ0hfQ0FMTEJBQ0sgKi9dOiAnd2F0Y2hlciBjYWxsYmFjaycsXHJcbiAgICBbNCAvKiBXQVRDSF9DTEVBTlVQICovXTogJ3dhdGNoZXIgY2xlYW51cCBmdW5jdGlvbicsXHJcbiAgICBbNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqL106ICduYXRpdmUgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqL106ICdjb21wb25lbnQgZXZlbnQgaGFuZGxlcicsXHJcbiAgICBbNyAvKiBWTk9ERV9IT09LICovXTogJ3Zub2RlIGhvb2snLFxyXG4gICAgWzggLyogRElSRUNUSVZFX0hPT0sgKi9dOiAnZGlyZWN0aXZlIGhvb2snLFxyXG4gICAgWzkgLyogVFJBTlNJVElPTl9IT09LICovXTogJ3RyYW5zaXRpb24gaG9vaycsXHJcbiAgICBbMTAgLyogQVBQX0VSUk9SX0hBTkRMRVIgKi9dOiAnYXBwIGVycm9ySGFuZGxlcicsXHJcbiAgICBbMTEgLyogQVBQX1dBUk5fSEFORExFUiAqL106ICdhcHAgd2FybkhhbmRsZXInLFxyXG4gICAgWzEyIC8qIEZVTkNUSU9OX1JFRiAqL106ICdyZWYgZnVuY3Rpb24nLFxyXG4gICAgWzEzIC8qIEFTWU5DX0NPTVBPTkVOVF9MT0FERVIgKi9dOiAnYXN5bmMgY29tcG9uZW50IGxvYWRlcicsXHJcbiAgICBbMTQgLyogU0NIRURVTEVSICovXTogJ3NjaGVkdWxlciBmbHVzaC4gVGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWxzIGJ1Zy4gJyArXHJcbiAgICAgICAgJ1BsZWFzZSBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vbmV3LWlzc3VlLnZ1ZWpzLm9yZy8/cmVwbz12dWVqcy92dWUtbmV4dCdcclxufTtcclxuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcclxuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgICAgICAgIHJlcy5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XHJcbiAgICAgICAgLy8gdGhlIGV4cG9zZWQgaW5zdGFuY2UgaXMgdGhlIHJlbmRlciBwcm94eSB0byBrZWVwIGl0IGNvbnNpc3RlbnQgd2l0aCAyLnhcclxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcclxuICAgICAgICAvLyBpbiBwcm9kdWN0aW9uIHRoZSBob29rIHJlY2VpdmVzIG9ubHkgdGhlIGVycm9yIGNvZGVcclxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcclxuICAgICAgICB3aGlsZSAoY3VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcclxuICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcC1sZXZlbCBoYW5kbGluZ1xyXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcclxuICAgICAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBFcnJvckhhbmRsZXIsIG51bGwsIDEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovLCBbZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mb10pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xyXG59XHJcbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGNvbnRleHRWTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdhcm4oYFVuaGFuZGxlZCBlcnJvciR7aW5mbyA/IGAgZHVyaW5nIGV4ZWN1dGlvbiBvZiAke2luZm99YCA6IGBgfWApO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3Jhc2ggaW4gZGV2IGJ5IGRlZmF1bHQgc28gaXQncyBtb3JlIG5vdGljZWFibGVcclxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gcmVjb3ZlciBpbiBwcm9kIHRvIHJlZHVjZSB0aGUgaW1wYWN0IG9uIGVuZC11c2VyXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG59XG5cbmxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xyXG5jb25zdCBxdWV1ZSA9IFtdO1xyXG5sZXQgZmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQcmVGbHVzaENicyA9IFtdO1xyXG5sZXQgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG5sZXQgcHJlRmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcclxubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbmxldCBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbmxldCBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XHJcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XHJcbiAgICBjb25zdCBwID0gY3VycmVudEZsdXNoUHJvbWlzZSB8fCByZXNvbHZlZFByb21pc2U7XHJcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xyXG59XHJcbi8vICMyNzY4XHJcbi8vIFVzZSBiaW5hcnktc2VhcmNoIHRvIGZpbmQgYSBzdWl0YWJsZSBwb3NpdGlvbiBpbiB0aGUgcXVldWUsXHJcbi8vIHNvIHRoYXQgdGhlIHF1ZXVlIG1haW50YWlucyB0aGUgaW5jcmVhc2luZyBvcmRlciBvZiBqb2IncyBpZCxcclxuLy8gd2hpY2ggY2FuIHByZXZlbnQgdGhlIGpvYiBmcm9tIGJlaW5nIHNraXBwZWQgYW5kIGFsc28gY2FuIGF2b2lkIHJlcGVhdGVkIHBhdGNoaW5nLlxyXG5mdW5jdGlvbiBmaW5kSW5zZXJ0aW9uSW5kZXgoam9iKSB7XHJcbiAgICAvLyB0aGUgc3RhcnQgaW5kZXggc2hvdWxkIGJlIGBmbHVzaEluZGV4ICsgMWBcclxuICAgIGxldCBzdGFydCA9IGZsdXNoSW5kZXggKyAxO1xyXG4gICAgbGV0IGVuZCA9IHF1ZXVlLmxlbmd0aDtcclxuICAgIGNvbnN0IGpvYklkID0gZ2V0SWQoam9iKTtcclxuICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xyXG4gICAgICAgIGNvbnN0IG1pZGRsZSA9IChzdGFydCArIGVuZCkgPj4+IDE7XHJcbiAgICAgICAgY29uc3QgbWlkZGxlSm9iSWQgPSBnZXRJZChxdWV1ZVttaWRkbGVdKTtcclxuICAgICAgICBtaWRkbGVKb2JJZCA8IGpvYklkID8gKHN0YXJ0ID0gbWlkZGxlICsgMSkgOiAoZW5kID0gbWlkZGxlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGFydDtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUpvYihqb2IpIHtcclxuICAgIC8vIHRoZSBkZWR1cGUgc2VhcmNoIHVzZXMgdGhlIHN0YXJ0SW5kZXggYXJndW1lbnQgb2YgQXJyYXkuaW5jbHVkZXMoKVxyXG4gICAgLy8gYnkgZGVmYXVsdCB0aGUgc2VhcmNoIGluZGV4IGluY2x1ZGVzIHRoZSBjdXJyZW50IGpvYiB0aGF0IGlzIGJlaW5nIHJ1blxyXG4gICAgLy8gc28gaXQgY2Fubm90IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIGFnYWluLlxyXG4gICAgLy8gaWYgdGhlIGpvYiBpcyBhIHdhdGNoKCkgY2FsbGJhY2ssIHRoZSBzZWFyY2ggd2lsbCBzdGFydCB3aXRoIGEgKzEgaW5kZXggdG9cclxuICAgIC8vIGFsbG93IGl0IHJlY3Vyc2l2ZWx5IHRyaWdnZXIgaXRzZWxmIC0gaXQgaXMgdGhlIHVzZXIncyByZXNwb25zaWJpbGl0eSB0b1xyXG4gICAgLy8gZW5zdXJlIGl0IGRvZXNuJ3QgZW5kIHVwIGluIGFuIGluZmluaXRlIGxvb3AuXHJcbiAgICBpZiAoKCFxdWV1ZS5sZW5ndGggfHxcclxuICAgICAgICAhcXVldWUuaW5jbHVkZXMoam9iLCBpc0ZsdXNoaW5nICYmIGpvYi5hbGxvd1JlY3Vyc2UgPyBmbHVzaEluZGV4ICsgMSA6IGZsdXNoSW5kZXgpKSAmJlxyXG4gICAgICAgIGpvYiAhPT0gY3VycmVudFByZUZsdXNoUGFyZW50Sm9iKSB7XHJcbiAgICAgICAgY29uc3QgcG9zID0gZmluZEluc2VydGlvbkluZGV4KGpvYik7XHJcbiAgICAgICAgaWYgKHBvcyA+IC0xKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShwb3MsIDAsIGpvYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGpvYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1ZXVlRmx1c2goKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xyXG4gICAgaWYgKCFpc0ZsdXNoaW5nICYmICFpc0ZsdXNoUGVuZGluZykge1xyXG4gICAgICAgIGlzRmx1c2hQZW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICBjdXJyZW50Rmx1c2hQcm9taXNlID0gcmVzb2x2ZWRQcm9taXNlLnRoZW4oZmx1c2hKb2JzKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbnZhbGlkYXRlSm9iKGpvYikge1xyXG4gICAgY29uc3QgaSA9IHF1ZXVlLmluZGV4T2Yoam9iKTtcclxuICAgIGlmIChpID4gZmx1c2hJbmRleCkge1xyXG4gICAgICAgIHF1ZXVlLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBxdWV1ZUNiKGNiLCBhY3RpdmVRdWV1ZSwgcGVuZGluZ1F1ZXVlLCBpbmRleCkge1xyXG4gICAgaWYgKCFpc0FycmF5KGNiKSkge1xyXG4gICAgICAgIGlmICghYWN0aXZlUXVldWUgfHxcclxuICAgICAgICAgICAgIWFjdGl2ZVF1ZXVlLmluY2x1ZGVzKGNiLCBjYi5hbGxvd1JlY3Vyc2UgPyBpbmRleCArIDEgOiBpbmRleCkpIHtcclxuICAgICAgICAgICAgcGVuZGluZ1F1ZXVlLnB1c2goY2IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGlmIGNiIGlzIGFuIGFycmF5LCBpdCBpcyBhIGNvbXBvbmVudCBsaWZlY3ljbGUgaG9vayB3aGljaCBjYW4gb25seSBiZVxyXG4gICAgICAgIC8vIHRyaWdnZXJlZCBieSBhIGpvYiwgd2hpY2ggaXMgYWxyZWFkeSBkZWR1cGVkIGluIHRoZSBtYWluIHF1ZXVlLCBzb1xyXG4gICAgICAgIC8vIHdlIGNhbiBza2lwIGR1cGxpY2F0ZSBjaGVjayBoZXJlIHRvIGltcHJvdmUgcGVyZlxyXG4gICAgICAgIHBlbmRpbmdRdWV1ZS5wdXNoKC4uLmNiKTtcclxuICAgIH1cclxuICAgIHF1ZXVlRmx1c2goKTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZVByZUZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVByZUZsdXNoQ2JzLCBwZW5kaW5nUHJlRmx1c2hDYnMsIHByZUZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlUG9zdEZsdXNoQ2IoY2IpIHtcclxuICAgIHF1ZXVlQ2IoY2IsIGFjdGl2ZVBvc3RGbHVzaENicywgcGVuZGluZ1Bvc3RGbHVzaENicywgcG9zdEZsdXNoSW5kZXgpO1xyXG59XHJcbmZ1bmN0aW9uIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgcGFyZW50Sm9iID0gbnVsbCkge1xyXG4gICAgaWYgKHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBwYXJlbnRKb2I7XHJcbiAgICAgICAgYWN0aXZlUHJlRmx1c2hDYnMgPSBbLi4ubmV3IFNldChwZW5kaW5nUHJlRmx1c2hDYnMpXTtcclxuICAgICAgICBwZW5kaW5nUHJlRmx1c2hDYnMubGVuZ3RoID0gMDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChwcmVGbHVzaEluZGV4ID0gMDsgcHJlRmx1c2hJbmRleCA8IGFjdGl2ZVByZUZsdXNoQ2JzLmxlbmd0aDsgcHJlRmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBhY3RpdmVQcmVGbHVzaENic1twcmVGbHVzaEluZGV4XSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzW3ByZUZsdXNoSW5kZXhdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzID0gbnVsbDtcclxuICAgICAgICBwcmVGbHVzaEluZGV4ID0gMDtcclxuICAgICAgICBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG4gICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGZsdXNoIHVudGlsIGl0IGRyYWluc1xyXG4gICAgICAgIGZsdXNoUHJlRmx1c2hDYnMoc2VlbiwgcGFyZW50Sm9iKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XHJcbiAgICBpZiAocGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBkZWR1cGVkID0gWy4uLm5ldyBTZXQocGVuZGluZ1Bvc3RGbHVzaENicyldO1xyXG4gICAgICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoID0gMDtcclxuICAgICAgICAvLyAjMTk0NyBhbHJlYWR5IGhhcyBhY3RpdmUgcXVldWUsIG5lc3RlZCBmbHVzaFBvc3RGbHVzaENicyBjYWxsXHJcbiAgICAgICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xyXG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMucHVzaCguLi5kZWR1cGVkKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBkZWR1cGVkO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgc2VlbiA9IHNlZW4gfHwgbmV3IE1hcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnMuc29ydCgoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKSk7XHJcbiAgICAgICAgZm9yIChwb3N0Rmx1c2hJbmRleCA9IDA7IHBvc3RGbHVzaEluZGV4IDwgYWN0aXZlUG9zdEZsdXNoQ2JzLmxlbmd0aDsgcG9zdEZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgYWN0aXZlUG9zdEZsdXNoQ2JzW3Bvc3RGbHVzaEluZGV4XSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gbnVsbDtcclxuICAgICAgICBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IEluZmluaXR5IDogam9iLmlkO1xyXG5mdW5jdGlvbiBmbHVzaEpvYnMoc2Vlbikge1xyXG4gICAgaXNGbHVzaFBlbmRpbmcgPSBmYWxzZTtcclxuICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGZsdXNoUHJlRmx1c2hDYnMoc2Vlbik7XHJcbiAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cclxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxyXG4gICAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xyXG4gICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkIHNvIGl0cyByZW5kZXIgZWZmZWN0IHdpbGwgaGF2ZSBzbWFsbGVyXHJcbiAgICAvLyAgICBwcmlvcml0eSBudW1iZXIpXHJcbiAgICAvLyAyLiBJZiBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHVwZGF0ZSxcclxuICAgIC8vICAgIGl0cyB1cGRhdGUgY2FuIGJlIHNraXBwZWQuXHJcbiAgICBxdWV1ZS5zb3J0KChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ZsdXNoSW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoam9iICYmIGpvYi5hY3RpdmUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBqb2IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoam9iLCBudWxsLCAxNCAvKiBTQ0hFRFVMRVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZmx1c2hJbmRleCA9IDA7XHJcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicyhzZWVuKTtcclxuICAgICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgLy8gc29tZSBwb3N0Rmx1c2hDYiBxdWV1ZWQgam9icyFcclxuICAgICAgICAvLyBrZWVwIGZsdXNoaW5nIHVudGlsIGl0IGRyYWlucy5cclxuICAgICAgICBpZiAocXVldWUubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgIHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGggfHxcclxuICAgICAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcclxuICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XHJcbiAgICAgICAgc2Vlbi5zZXQoZm4sIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XHJcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gZm4ub3duZXJJbnN0YW5jZTtcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGluc3RhbmNlICYmIGdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UudHlwZSk7XHJcbiAgICAgICAgICAgIHdhcm4oYE1heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQke2NvbXBvbmVudE5hbWUgPyBgIGluIGNvbXBvbmVudCA8JHtjb21wb25lbnROYW1lfT5gIDogYGB9LiBgICtcclxuICAgICAgICAgICAgICAgIGBUaGlzIG1lYW5zIHlvdSBoYXZlIGEgcmVhY3RpdmUgZWZmZWN0IHRoYXQgaXMgbXV0YXRpbmcgaXRzIG93biBgICtcclxuICAgICAgICAgICAgICAgIGBkZXBlbmRlbmNpZXMgYW5kIHRodXMgcmVjdXJzaXZlbHkgdHJpZ2dlcmluZyBpdHNlbGYuIFBvc3NpYmxlIHNvdXJjZXMgYCArXHJcbiAgICAgICAgICAgICAgICBgaW5jbHVkZSBjb21wb25lbnQgdGVtcGxhdGUsIHJlbmRlciBmdW5jdGlvbiwgdXBkYXRlZCBob29rIG9yIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoZXIgc291cmNlIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gbmV3IFNldCgpO1xyXG4vLyBFeHBvc2UgdGhlIEhNUiBydW50aW1lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XHJcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcclxuLy8gaXQgZWFzaWVyIHRvIGJlIHVzZWQgaW4gdG9vbGluZ3MgbGlrZSB2dWUtbG9hZGVyXHJcbi8vIE5vdGU6IGZvciBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgSE1SIGl0IGFsc28gbmVlZHMgdGhlIF9faG1ySWQgb3B0aW9uXHJcbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICBjb25zdCBnbG9iYWxPYmplY3QgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gZ2xvYmFsXHJcbiAgICAgICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgPyBzZWxmXHJcbiAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgID8gd2luZG93XHJcbiAgICAgICAgICAgICAgICA6IHt9O1xyXG4gICAgZ2xvYmFsT2JqZWN0Ll9fVlVFX0hNUl9SVU5USU1FX18gPSB7XHJcbiAgICAgICAgY3JlYXRlUmVjb3JkOiB0cnlXcmFwKGNyZWF0ZVJlY29yZCksXHJcbiAgICAgICAgcmVyZW5kZXI6IHRyeVdyYXAocmVyZW5kZXIpLFxyXG4gICAgICAgIHJlbG9hZDogdHJ5V3JhcChyZWxvYWQpXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IG1hcCA9IG5ldyBNYXAoKTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xyXG4gICAgbGV0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgaWYgKCFyZWNvcmQpIHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQoaWQsIGluc3RhbmNlLnR5cGUpO1xyXG4gICAgICAgIHJlY29yZCA9IG1hcC5nZXQoaWQpO1xyXG4gICAgfVxyXG4gICAgcmVjb3JkLmluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xyXG59XHJcbmZ1bmN0aW9uIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpIHtcclxuICAgIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWNvcmQoaWQsIGNvbXBvbmVudCkge1xyXG4gICAgaWYgKCFjb21wb25lbnQpIHtcclxuICAgICAgICB3YXJuKGBITVIgQVBJIHVzYWdlIGlzIG91dCBvZiBkYXRlLlxcbmAgK1xyXG4gICAgICAgICAgICBgUGxlYXNlIHVwZ3JhZGUgdnVlLWxvYWRlci92aXRlL3JvbGx1cC1wbHVnaW4tdnVlIG9yIG90aGVyIHJlbGV2YW50IGAgK1xyXG4gICAgICAgICAgICBgZGVwZW5kZW5jeSB0aGF0IGhhbmRsZXMgVnVlIFNGQyBjb21waWxhdGlvbi5gKTtcclxuICAgICAgICBjb21wb25lbnQgPSB7fTtcclxuICAgIH1cclxuICAgIGlmIChtYXAuaGFzKGlkKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIG1hcC5zZXQoaWQsIHtcclxuICAgICAgICBjb21wb25lbnQ6IGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQsXHJcbiAgICAgICAgaW5zdGFuY2VzOiBuZXcgU2V0KClcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBpZiAobmV3UmVuZGVyKVxyXG4gICAgICAgIHJlY29yZC5jb21wb25lbnQucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgLy8gQXJyYXkuZnJvbSBjcmVhdGVzIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmdcclxuICAgIC8vIHVwZGF0ZXNcclxuICAgIEFycmF5LmZyb20ocmVjb3JkLmluc3RhbmNlcykuZm9yRWFjaChpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgaWYgKG5ld1JlbmRlcikge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSBuZXdSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XHJcbiAgICAgICAgLy8gdGhpcyBmbGFnIGZvcmNlcyBjaGlsZCBjb21wb25lbnRzIHdpdGggc2xvdCBjb250ZW50IHRvIHVwZGF0ZVxyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHJlbG9hZChpZCwgbmV3Q29tcCkge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBBcnJheS5mcm9tIGNyZWF0ZXMgYSBzbmFwc2hvdCB3aGljaCBhdm9pZHMgdGhlIHNldCBiZWluZyBtdXRhdGVkIGR1cmluZ1xyXG4gICAgLy8gdXBkYXRlc1xyXG4gICAgY29uc3QgeyBjb21wb25lbnQsIGluc3RhbmNlcyB9ID0gcmVjb3JkO1xyXG4gICAgaWYgKCFobXJEaXJ0eUNvbXBvbmVudHMuaGFzKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAvLyAxLiBVcGRhdGUgZXhpc3RpbmcgY29tcCBkZWZpbml0aW9uIHRvIG1hdGNoIG5ldyBvbmVcclxuICAgICAgICBuZXdDb21wID0gaXNDbGFzc0NvbXBvbmVudChuZXdDb21wKSA/IG5ld0NvbXAuX192Y2NPcHRzIDogbmV3Q29tcDtcclxuICAgICAgICBleHRlbmQoY29tcG9uZW50LCBuZXdDb21wKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ19fZmlsZScgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBjb21wb25lbnRba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAyLiBNYXJrIGNvbXBvbmVudCBkaXJ0eS4gVGhpcyBmb3JjZXMgdGhlIHJlbmRlcmVyIHRvIHJlcGxhY2UgdGhlIGNvbXBvbmVudFxyXG4gICAgICAgIC8vIG9uIHBhdGNoLlxyXG4gICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQoY29tcG9uZW50KTtcclxuICAgICAgICAvLyAzLiBNYWtlIHN1cmUgdG8gdW5tYXJrIHRoZSBjb21wb25lbnQgYWZ0ZXIgdGhlIHJlbG9hZC5cclxuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKCgpID0+IHtcclxuICAgICAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmRlbGV0ZShjb21wb25lbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgQXJyYXkuZnJvbShpbnN0YW5jZXMpLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgLy8gNC4gRm9yY2UgdGhlIHBhcmVudCBpbnN0YW5jZSB0byByZS1yZW5kZXIuIFRoaXMgd2lsbCBjYXVzZSBhbGwgdXBkYXRlZFxyXG4gICAgICAgICAgICAvLyBjb21wb25lbnRzIHRvIGJlIHVubW91bnRlZCBhbmQgcmUtbW91bnRlZC4gUXVldWUgdGhlIHVwZGF0ZSBzbyB0aGF0IHdlXHJcbiAgICAgICAgICAgIC8vIGRvbid0IGVuZCB1cCBmb3JjaW5nIHRoZSBzYW1lIHBhcmVudCB0byByZS1yZW5kZXIgbXVsdGlwbGUgdGltZXMuXHJcbiAgICAgICAgICAgIHF1ZXVlSm9iKGluc3RhbmNlLnBhcmVudC51cGRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCkge1xyXG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIG1vdW50ZWQgdmlhIGNyZWF0ZUFwcCgpIGhhcyBhIHJlbG9hZCBtZXRob2RcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBpbnN0YW5jZSBpbnNpZGUgdHJlZSBjcmVhdGVkIHZpYSByYXcgcmVuZGVyKCkuIEZvcmNlIHJlbG9hZC5cclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbSE1SXSBSb290IG9yIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UgbW9kaWZpZWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLicpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcclxuICAgIHJldHVybiAoaWQsIGFyZykgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbihpZCwgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSE1SXSBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBgICtcclxuICAgICAgICAgICAgICAgIGBGdWxsIHJlbG9hZCByZXF1aXJlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbmxldCBkZXZ0b29scztcclxuZnVuY3Rpb24gc2V0RGV2dG9vbHNIb29rKGhvb2spIHtcclxuICAgIGRldnRvb2xzID0gaG9vaztcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKSB7XHJcbiAgICAvLyBUT0RPIHF1ZXVlIGlmIGRldnRvb2xzIGlzIHVuZGVmaW5lZFxyXG4gICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXZ0b29scy5lbWl0KFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XHJcbiAgICAgICAgRnJhZ21lbnQsXHJcbiAgICAgICAgVGV4dCxcclxuICAgICAgICBDb21tZW50OiBDb21tZW50JDEsXHJcbiAgICAgICAgU3RhdGljXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBkZXZ0b29sc1VubW91bnRBcHAoYXBwKSB7XHJcbiAgICBpZiAoIWRldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGRldnRvb2xzLmVtaXQoXCJhcHA6dW5tb3VudFwiIC8qIEFQUF9VTk1PVU5UICovLCBhcHApO1xyXG59XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDphZGRlZFwiIC8qIENPTVBPTkVOVF9BRERFRCAqLyk7XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnVwZGF0ZWRcIiAvKiBDT01QT05FTlRfVVBEQVRFRCAqLyk7XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OnJlbW92ZWRcIiAvKiBDT01QT05FTlRfUkVNT1ZFRCAqLyk7XHJcbmZ1bmN0aW9uIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhob29rKSB7XHJcbiAgICByZXR1cm4gKGNvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkZXZ0b29scy5lbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LnBhcmVudCA/IGNvbXBvbmVudC5wYXJlbnQudWlkIDogdW5kZWZpbmVkLCBjb21wb25lbnQpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOnN0YXJ0XCIgLyogUEVSRk9STUFOQ0VfU1RBUlQgKi8pO1xyXG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKFwicGVyZjplbmRcIiAvKiBQRVJGT1JNQU5DRV9FTkQgKi8pO1xyXG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XHJcbiAgICByZXR1cm4gKGNvbXBvbmVudCwgdHlwZSwgdGltZSkgPT4ge1xyXG4gICAgICAgIGlmICghZGV2dG9vbHMpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkZXZ0b29scy5lbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNDb21wb25lbnRFbWl0KGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcykge1xyXG4gICAgaWYgKCFkZXZ0b29scylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBkZXZ0b29scy5lbWl0KFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLywgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLCBjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpO1xyXG59XG5cbmNvbnN0IGRlcHJlY2F0aW9uRGF0YSA9IHtcclxuICAgIFtcIkdMT0JBTF9NT1VOVFwiIC8qIEdMT0JBTF9NT1VOVCAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVGhlIGdsb2JhbCBhcHAgYm9vdHN0cmFwcGluZyBBUEkgaGFzIGNoYW5nZWQ6IHZtLiRtb3VudCgpIGFuZCB0aGUgXCJlbFwiIGAgK1xyXG4gICAgICAgICAgICBgb3B0aW9uIGhhdmUgYmVlbiByZW1vdmVkLiBVc2UgY3JlYXRlQXBwKFJvb3RDb21wb25lbnQpLm1vdW50KCkgaW5zdGVhZC5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZ2xvYmFsLWFwaS5odG1sI21vdW50aW5nLWFwcC1pbnN0YW5jZWBcclxuICAgIH0sXHJcbiAgICBbXCJHTE9CQUxfTU9VTlRfQ09OVEFJTkVSXCIgLyogR0xPQkFMX01PVU5UX0NPTlRBSU5FUiAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVnVlIGRldGVjdGVkIGRpcmVjdGl2ZXMgb24gdGhlIG1vdW50IGNvbnRhaW5lci4gYCArXHJcbiAgICAgICAgICAgIGBJbiBWdWUgMywgdGhlIGNvbnRhaW5lciBpcyBubyBsb25nZXIgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSB0ZW1wbGF0ZSBgICtcclxuICAgICAgICAgICAgYGFuZCB3aWxsIG5vdCBiZSBwcm9jZXNzZWQvcmVwbGFjZWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL21vdW50LWNoYW5nZXMuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJHTE9CQUxfRVhURU5EXCIgLyogR0xPQkFMX0VYVEVORCAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVnVlLmV4dGVuZCgpIGhhcyBiZWVuIHJlbW92ZWQgaW4gVnVlIDMuIGAgK1xyXG4gICAgICAgICAgICBgVXNlIGRlZmluZUNvbXBvbmVudCgpIGluc3RlYWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvYXBpL2dsb2JhbC1hcGkuaHRtbCNkZWZpbmVjb21wb25lbnRgXHJcbiAgICB9LFxyXG4gICAgW1wiR0xPQkFMX1BST1RPVFlQRVwiIC8qIEdMT0JBTF9QUk9UT1RZUEUgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFZ1ZS5wcm90b3R5cGUgaXMgbm8gbG9uZ2VyIGF2YWlsYWJsZSBpbiBWdWUgMy4gYCArXHJcbiAgICAgICAgICAgIGBVc2UgYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzIGluc3RlYWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL2dsb2JhbC1hcGkuaHRtbCN2dWUtcHJvdG90eXBlLXJlcGxhY2VkLWJ5LWNvbmZpZy1nbG9iYWxwcm9wZXJ0aWVzYFxyXG4gICAgfSxcclxuICAgIFtcIkdMT0JBTF9TRVRcIiAvKiBHTE9CQUxfU0VUICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBWdWUuc2V0KCkgaGFzIGJlZW4gcmVtb3ZlZCBhcyBpdCBpcyBubyBsb25nZXIgbmVlZGVkIGluIFZ1ZSAzLiBgICtcclxuICAgICAgICAgICAgYFNpbXBseSB1c2UgbmF0aXZlIEphdmFTY3JpcHQgbXV0YXRpb25zLmBcclxuICAgIH0sXHJcbiAgICBbXCJHTE9CQUxfREVMRVRFXCIgLyogR0xPQkFMX0RFTEVURSAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVnVlLmRlbGV0ZSgpIGhhcyBiZWVuIHJlbW92ZWQgYXMgaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZCBpbiBWdWUgMy4gYCArXHJcbiAgICAgICAgICAgIGBTaW1wbHkgdXNlIG5hdGl2ZSBKYXZhU2NyaXB0IG11dGF0aW9ucy5gXHJcbiAgICB9LFxyXG4gICAgW1wiR0xPQkFMX09CU0VSVkFCTEVcIiAvKiBHTE9CQUxfT0JTRVJWQUJMRSAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVnVlLm9ic2VydmFibGUoKSBoYXMgYmVlbiByZW1vdmVkLiBgICtcclxuICAgICAgICAgICAgYFVzZSBcXGBpbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gXCJ2dWVcIlxcYCBmcm9tIENvbXBvc2l0aW9uIEFQSSBpbnN0ZWFkLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2FwaS9iYXNpYy1yZWFjdGl2aXR5Lmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiR0xPQkFMX1BSSVZBVEVfVVRJTFwiIC8qIEdMT0JBTF9QUklWQVRFX1VUSUwgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFZ1ZS51dGlsIGhhcyBiZWVuIHJlbW92ZWQuIFBsZWFzZSByZWZhY3RvciB0byBhdm9pZCBpdHMgdXNhZ2UgYCArXHJcbiAgICAgICAgICAgIGBzaW5jZSBpdCB3YXMgYW4gaW50ZXJuYWwgQVBJIGV2ZW4gaW4gVnVlIDIuYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTkZJR19TSUxFTlRcIiAvKiBDT05GSUdfU0lMRU5UICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBjb25maWcuc2lsZW50IGhhcyBiZWVuIHJlbW92ZWQgYmVjYXVzZSBpdCBpcyBub3QgZ29vZCBwcmFjdGljZSB0byBgICtcclxuICAgICAgICAgICAgYGludGVudGlvbmFsbHkgc3VwcHJlc3Mgd2FybmluZ3MuIFlvdSBjYW4gdXNlIHlvdXIgYnJvd3NlciBjb25zb2xlJ3MgYCArXHJcbiAgICAgICAgICAgIGBmaWx0ZXIgZmVhdHVyZXMgdG8gZm9jdXMgb24gcmVsZXZhbnQgbWVzc2FnZXMuYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTkZJR19ERVZUT09MU1wiIC8qIENPTkZJR19ERVZUT09MUyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgY29uZmlnLmRldnRvb2xzIGhhcyBiZWVuIHJlbW92ZWQuIFRvIGVuYWJsZSBkZXZ0b29scyBmb3IgYCArXHJcbiAgICAgICAgICAgIGBwcm9kdWN0aW9uLCBjb25maWd1cmUgdGhlIF9fVlVFX1BST0RfREVWVE9PTFNfXyBjb21waWxlLXRpbWUgZmxhZy5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLW5leHQvdHJlZS9tYXN0ZXIvcGFja2FnZXMvdnVlI2J1bmRsZXItYnVpbGQtZmVhdHVyZS1mbGFnc2BcclxuICAgIH0sXHJcbiAgICBbXCJDT05GSUdfS0VZX0NPREVTXCIgLyogQ09ORklHX0tFWV9DT0RFUyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgY29uZmlnLmtleUNvZGVzIGhhcyBiZWVuIHJlbW92ZWQuIGAgK1xyXG4gICAgICAgICAgICBgSW4gVnVlIDMsIHlvdSBjYW4gZGlyZWN0bHkgdXNlIHRoZSBrZWJhYi1jYXNlIGtleSBuYW1lcyBhcyB2LW9uIG1vZGlmaWVycy5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24va2V5Y29kZS1tb2RpZmllcnMuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJDT05GSUdfUFJPRFVDVElPTl9USVBcIiAvKiBDT05GSUdfUFJPRFVDVElPTl9USVAgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYGNvbmZpZy5wcm9kdWN0aW9uVGlwIGhhcyBiZWVuIHJlbW92ZWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL2dsb2JhbC1hcGkuaHRtbCNjb25maWctcHJvZHVjdGlvbnRpcC1yZW1vdmVkYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTkZJR19JR05PUkVEX0VMRU1FTlRTXCIgLyogQ09ORklHX0lHTk9SRURfRUxFTUVOVFMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbXNnID0gYGNvbmZpZy5pZ25vcmVkRWxlbWVudHMgaGFzIGJlZW4gcmVtb3ZlZC5gO1xyXG4gICAgICAgICAgICBpZiAoaXNSdW50aW1lT25seSgpKSB7XHJcbiAgICAgICAgICAgICAgICBtc2cgKz0gYCBQYXNzIHRoZSBcImlzQ3VzdG9tRWxlbWVudFwiIG9wdGlvbiB0byBAdnVlL2NvbXBpbGVyLWRvbSBpbnN0ZWFkLmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtc2cgKz0gYCBVc2UgY29uZmlnLmlzQ3VzdG9tRWxlbWVudCBpbnN0ZWFkLmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1zZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZ2xvYmFsLWFwaS5odG1sI2NvbmZpZy1pZ25vcmVkZWxlbWVudHMtaXMtbm93LWNvbmZpZy1pc2N1c3RvbWVsZW1lbnRgXHJcbiAgICB9LFxyXG4gICAgW1wiQ09ORklHX1dISVRFU1BBQ0VcIiAvKiBDT05GSUdfV0hJVEVTUEFDRSAqL106IHtcclxuICAgICAgICAvLyB0aGlzIHdhcm5pbmcgaXMgb25seSByZWxldmFudCBpbiB0aGUgZnVsbCBidWlsZCB3aGVuIHVzaW5nIHJ1bnRpbWVcclxuICAgICAgICAvLyBjb21waWxhdGlvbiwgc28gaXQncyBwdXQgaW4gdGhlIHJ1bnRpbWUgY29tcGF0Q29uZmlnIGxpc3QuXHJcbiAgICAgICAgbWVzc2FnZTogYFZ1ZSAzIGNvbXBpbGVyJ3Mgd2hpdGVzcGFjZSBvcHRpb24gd2lsbCBkZWZhdWx0IHRvIFwiY29uZGVuc2VcIiBpbnN0ZWFkIG9mIGAgK1xyXG4gICAgICAgICAgICBgXCJwcmVzZXJ2ZVwiLiBUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcsIHByb3ZpZGUgYW4gZXhwbGljaXQgdmFsdWUgZm9yIGAgK1xyXG4gICAgICAgICAgICBgXFxgY29uZmlnLmNvbXBpbGVyT3B0aW9ucy53aGl0ZXNwYWNlXFxgLmBcclxuICAgIH0sXHJcbiAgICBbXCJDT05GSUdfT1BUSU9OX01FUkdFX1NUUkFUU1wiIC8qIENPTkZJR19PUFRJT05fTUVSR0VfU1RSQVRTICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzIG5vIGxvbmdlciBleHBvc2VzIGludGVybmFsIHN0cmF0ZWdpZXMuIGAgK1xyXG4gICAgICAgICAgICBgVXNlIGN1c3RvbSBtZXJnZSBmdW5jdGlvbnMgaW5zdGVhZC5gXHJcbiAgICB9LFxyXG4gICAgW1wiSU5TVEFOQ0VfU0VUXCIgLyogSU5TVEFOQ0VfU0VUICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGB2bS4kc2V0KCkgaGFzIGJlZW4gcmVtb3ZlZCBhcyBpdCBpcyBubyBsb25nZXIgbmVlZGVkIGluIFZ1ZSAzLiBgICtcclxuICAgICAgICAgICAgYFNpbXBseSB1c2UgbmF0aXZlIEphdmFTY3JpcHQgbXV0YXRpb25zLmBcclxuICAgIH0sXHJcbiAgICBbXCJJTlNUQU5DRV9ERUxFVEVcIiAvKiBJTlNUQU5DRV9ERUxFVEUgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYHZtLiRkZWxldGUoKSBoYXMgYmVlbiByZW1vdmVkIGFzIGl0IGlzIG5vIGxvbmdlciBuZWVkZWQgaW4gVnVlIDMuIGAgK1xyXG4gICAgICAgICAgICBgU2ltcGx5IHVzZSBuYXRpdmUgSmF2YVNjcmlwdCBtdXRhdGlvbnMuYFxyXG4gICAgfSxcclxuICAgIFtcIklOU1RBTkNFX0RFU1RST1lcIiAvKiBJTlNUQU5DRV9ERVNUUk9ZICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGB2bS4kZGVzdHJveSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhcHAudW5tb3VudCgpIGluc3RlYWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvYXBpL2FwcGxpY2F0aW9uLWFwaS5odG1sI3VubW91bnRgXHJcbiAgICB9LFxyXG4gICAgW1wiSU5TVEFOQ0VfRVZFTlRfRU1JVFRFUlwiIC8qIElOU1RBTkNFX0VWRU5UX0VNSVRURVIgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYHZtLiRvbi8kb25jZS8kb2ZmKCkgaGF2ZSBiZWVuIHJlbW92ZWQuIGAgK1xyXG4gICAgICAgICAgICBgVXNlIGFuIGV4dGVybmFsIGV2ZW50IGVtaXR0ZXIgbGlicmFyeSBpbnN0ZWFkLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9ldmVudHMtYXBpLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiSU5TVEFOQ0VfRVZFTlRfSE9PS1NcIiAvKiBJTlNUQU5DRV9FVkVOVF9IT09LUyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBldmVudCA9PiBgXCIke2V2ZW50fVwiIGxpZmVjeWNsZSBldmVudHMgYXJlIG5vIGxvbmdlciBzdXBwb3J0ZWQuIEZyb20gdGVtcGxhdGVzLCBgICtcclxuICAgICAgICAgICAgYHVzZSB0aGUgXCJ2bm9kZVwiIHByZWZpeCBpbnN0ZWFkIG9mIFwiaG9vazpcIi4gRm9yIGV4YW1wbGUsIEAke2V2ZW50fSBgICtcclxuICAgICAgICAgICAgYHNob3VsZCBiZSBjaGFuZ2VkIHRvIEB2bm9kZS0ke2V2ZW50LnNsaWNlKDUpfS4gYCArXHJcbiAgICAgICAgICAgIGBGcm9tIEphdmFTY3JpcHQsIHVzZSBDb21wb3NpdGlvbiBBUEkgdG8gZHluYW1pY2FsbHkgcmVnaXN0ZXIgbGlmZWN5Y2xlIGAgK1xyXG4gICAgICAgICAgICBgaG9va3MuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3Zub2RlLWxpZmVjeWNsZS1ldmVudHMuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJJTlNUQU5DRV9DSElMRFJFTlwiIC8qIElOU1RBTkNFX0NISUxEUkVOICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGB2bS4kY2hpbGRyZW4gaGFzIGJlZW4gcmVtb3ZlZC4gQ29uc2lkZXIgcmVmYWN0b3JpbmcgeW91ciBsb2dpYyBgICtcclxuICAgICAgICAgICAgYHRvIGF2b2lkIHJlbHlpbmcgb24gZGlyZWN0IGFjY2VzcyB0byBjaGlsZCBjb21wb25lbnRzLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9jaGlsZHJlbi5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIklOU1RBTkNFX0xJU1RFTkVSU1wiIC8qIElOU1RBTkNFX0xJU1RFTkVSUyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgdm0uJGxpc3RlbmVycyBoYXMgYmVlbiByZW1vdmVkLiBJbiBWdWUgMywgcGFyZW50IHYtb24gbGlzdGVuZXJzIGFyZSBgICtcclxuICAgICAgICAgICAgYGluY2x1ZGVkIGluIHZtLiRhdHRycyBhbmQgaXQgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeSB0byBzZXBhcmF0ZWx5IHVzZSBgICtcclxuICAgICAgICAgICAgYHYtb249XCIkbGlzdGVuZXJzXCIgaWYgeW91IGFyZSBhbHJlYWR5IHVzaW5nIHYtYmluZD1cIiRhdHRyc1wiLiBgICtcclxuICAgICAgICAgICAgYChOb3RlOiB0aGUgVnVlIDMgYmVoYXZpb3Igb25seSBhcHBsaWVzIGlmIHRoaXMgY29tcGF0IGNvbmZpZyBpcyBkaXNhYmxlZClgLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vbGlzdGVuZXJzLXJlbW92ZWQuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJJTlNUQU5DRV9TQ09QRURfU0xPVFNcIiAvKiBJTlNUQU5DRV9TQ09QRURfU0xPVFMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYHZtLiRzY29wZWRTbG90cyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugdm0uJHNsb3RzIGluc3RlYWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3Nsb3RzLXVuaWZpY2F0aW9uLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiSU5TVEFOQ0VfQVRUUlNfQ0xBU1NfU1RZTEVcIiAvKiBJTlNUQU5DRV9BVFRSU19DTEFTU19TVFlMRSAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBjb21wb25lbnROYW1lID0+IGBDb21wb25lbnQgPCR7Y29tcG9uZW50TmFtZSB8fFxyXG4gICAgICAgICAgICAnQW5vbnltb3VzJ30+IGhhcyBcXGBpbmhlcml0QXR0cnM6IGZhbHNlXFxgIGJ1dCBpcyBgICtcclxuICAgICAgICAgICAgYHJlbHlpbmcgb24gY2xhc3Mvc3R5bGUgZmFsbHRocm91Z2ggZnJvbSBwYXJlbnQuIEluIFZ1ZSAzLCBjbGFzcy9zdHlsZSBgICtcclxuICAgICAgICAgICAgYGFyZSBub3cgaW5jbHVkZWQgaW4gJGF0dHJzIGFuZCB3aWxsIG5vIGxvbmdlciBmYWxsdGhyb3VnaCB3aGVuIGAgK1xyXG4gICAgICAgICAgICBgaW5oZXJpdEF0dHJzIGlzIGZhbHNlLiBJZiB5b3UgYXJlIGFscmVhZHkgdXNpbmcgdi1iaW5kPVwiJGF0dHJzXCIgb24gYCArXHJcbiAgICAgICAgICAgIGBjb21wb25lbnQgcm9vdCBpdCBzaG91bGQgcmVuZGVyIHRoZSBzYW1lIGVuZCByZXN1bHQuIGAgK1xyXG4gICAgICAgICAgICBgSWYgeW91IGFyZSBiaW5kaW5nICRhdHRycyB0byBhIG5vbi1yb290IGVsZW1lbnQgYW5kIGV4cGVjdGluZyBgICtcclxuICAgICAgICAgICAgYGNsYXNzL3N0eWxlIHRvIGZhbGx0aHJvdWdoIG9uIHJvb3QsIHlvdSB3aWxsIG5lZWQgdG8gbm93IG1hbnVhbGx5IGJpbmQgYCArXHJcbiAgICAgICAgICAgIGB0aGVtIG9uIHJvb3QgdmlhIDpjbGFzcz1cIiRhdHRycy5jbGFzc1wiLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9hdHRycy1pbmNsdWRlcy1jbGFzcy1zdHlsZS5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIk9QVElPTlNfREFUQV9GTlwiIC8qIE9QVElPTlNfREFUQV9GTiAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgVGhlIFwiZGF0YVwiIG9wdGlvbiBjYW4gbm8gbG9uZ2VyIGJlIGEgcGxhaW4gb2JqZWN0LiBgICtcclxuICAgICAgICAgICAgYEFsd2F5cyB1c2UgYSBmdW5jdGlvbi5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZGF0YS1vcHRpb24uaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJPUFRJT05TX0RBVEFfTUVSR0VcIiAvKiBPUFRJT05TX0RBVEFfTUVSR0UgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKGtleSkgPT4gYERldGVjdGVkIGNvbmZsaWN0aW5nIGtleSBcIiR7a2V5fVwiIHdoZW4gbWVyZ2luZyBkYXRhIG9wdGlvbiB2YWx1ZXMuIGAgK1xyXG4gICAgICAgICAgICBgSW4gVnVlIDMsIGRhdGEga2V5cyBhcmUgbWVyZ2VkIHNoYWxsb3dseSBhbmQgd2lsbCBvdmVycmlkZSBvbmUgYW5vdGhlci5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZGF0YS1vcHRpb24uaHRtbCNtaXhpbi1tZXJnZS1iZWhhdmlvci1jaGFuZ2VgXHJcbiAgICB9LFxyXG4gICAgW1wiT1BUSU9OU19CRUZPUkVfREVTVFJPWVwiIC8qIE9QVElPTlNfQkVGT1JFX0RFU1RST1kgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFxcYGJlZm9yZURlc3Ryb3lcXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGBiZWZvcmVVbm1vdW50XFxgLmBcclxuICAgIH0sXHJcbiAgICBbXCJPUFRJT05TX0RFU1RST1lFRFwiIC8qIE9QVElPTlNfREVTVFJPWUVEICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBcXGBkZXN0cm95ZWRcXGAgaGFzIGJlZW4gcmVuYW1lZCB0byBcXGB1bm1vdW50ZWRcXGAuYFxyXG4gICAgfSxcclxuICAgIFtcIldBVENIX0FSUkFZXCIgLyogV0FUQ0hfQVJSQVkgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFwid2F0Y2hcIiBvcHRpb24gb3Igdm0uJHdhdGNoIG9uIGFuIGFycmF5IHZhbHVlIHdpbGwgbm8gbG9uZ2VyIGAgK1xyXG4gICAgICAgICAgICBgdHJpZ2dlciBvbiBhcnJheSBtdXRhdGlvbiB1bmxlc3MgdGhlIFwiZGVlcFwiIG9wdGlvbiBpcyBzcGVjaWZpZWQuIGAgK1xyXG4gICAgICAgICAgICBgSWYgY3VycmVudCB1c2FnZSBpcyBpbnRlbmRlZCwgeW91IGNhbiBkaXNhYmxlIHRoZSBjb21wYXQgYmVoYXZpb3IgYW5kIGAgK1xyXG4gICAgICAgICAgICBgc3VwcHJlc3MgdGhpcyB3YXJuaW5nIHdpdGg6YCArXHJcbiAgICAgICAgICAgIGBcXG5cXG4gIGNvbmZpZ3VyZUNvbXBhdCh7ICR7XCJXQVRDSF9BUlJBWVwiIC8qIFdBVENIX0FSUkFZICovfTogZmFsc2UgfSlcXG5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vd2F0Y2guaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJQUk9QU19ERUZBVUxUX1RISVNcIiAvKiBQUk9QU19ERUZBVUxUX1RISVMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKGtleSkgPT4gYHByb3BzIGRlZmF1bHQgdmFsdWUgZnVuY3Rpb24gbm8gbG9uZ2VyIGhhcyBhY2Nlc3MgdG8gXCJ0aGlzXCIuIFRoZSBjb21wYXQgYCArXHJcbiAgICAgICAgICAgIGBidWlsZCBvbmx5IG9mZmVycyBhY2Nlc3MgdG8gdGhpcy4kb3B0aW9ucy5gICtcclxuICAgICAgICAgICAgYChmb3VuZCBpbiBwcm9wIFwiJHtrZXl9XCIpYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3Byb3BzLWRlZmF1bHQtdGhpcy5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIkNVU1RPTV9ESVJcIiAvKiBDVVNUT01fRElSICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IChsZWdhY3lIb29rLCBuZXdIb29rKSA9PiBgQ3VzdG9tIGRpcmVjdGl2ZSBob29rIFwiJHtsZWdhY3lIb29rfVwiIGhhcyBiZWVuIHJlbW92ZWQuIGAgK1xyXG4gICAgICAgICAgICBgVXNlIFwiJHtuZXdIb29rfVwiIGluc3RlYWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL2N1c3RvbS1kaXJlY3RpdmVzLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiVl9GT1JfUkVGXCIgLyogVl9GT1JfUkVGICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBSZWYgdXNhZ2Ugb24gdi1mb3Igbm8gbG9uZ2VyIGNyZWF0ZXMgYXJyYXkgcmVmIHZhbHVlcyBpbiBWdWUgMy4gYCArXHJcbiAgICAgICAgICAgIGBDb25zaWRlciB1c2luZyBmdW5jdGlvbiByZWZzIG9yIHJlZmFjdG9yIHRvIGF2b2lkIHJlZiB1c2FnZSBhbHRvZ2V0aGVyLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9hcnJheS1yZWZzLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiVl9PTl9LRVlDT0RFX01PRElGSUVSXCIgLyogVl9PTl9LRVlDT0RFX01PRElGSUVSICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGBVc2luZyBrZXlDb2RlIGFzIHYtb24gbW9kaWZpZXIgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gYCArXHJcbiAgICAgICAgICAgIGBVc2Uga2ViYWItY2FzZSBrZXkgbmFtZSBtb2RpZmllcnMgaW5zdGVhZC5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24va2V5Y29kZS1tb2RpZmllcnMuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJBVFRSX0ZBTFNFX1ZBTFVFXCIgLyogQVRUUl9GQUxTRV9WQUxVRSAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiAobmFtZSkgPT4gYEF0dHJpYnV0ZSBcIiR7bmFtZX1cIiB3aXRoIHYtYmluZCB2YWx1ZSBcXGBmYWxzZVxcYCB3aWxsIHJlbmRlciBgICtcclxuICAgICAgICAgICAgYCR7bmFtZX09XCJmYWxzZVwiIGluc3RlYWQgb2YgcmVtb3ZpbmcgaXQgaW4gVnVlIDMuIFRvIHJlbW92ZSB0aGUgYXR0cmlidXRlLCBgICtcclxuICAgICAgICAgICAgYHVzZSBcXGBudWxsXFxgIG9yIFxcYHVuZGVmaW5lZFxcYCBpbnN0ZWFkLiBJZiB0aGUgdXNhZ2UgaXMgaW50ZW5kZWQsIGAgK1xyXG4gICAgICAgICAgICBgeW91IGNhbiBkaXNhYmxlIHRoZSBjb21wYXQgYmVoYXZpb3IgYW5kIHN1cHByZXNzIHRoaXMgd2FybmluZyB3aXRoOmAgK1xyXG4gICAgICAgICAgICBgXFxuXFxuICBjb25maWd1cmVDb21wYXQoeyAke1wiQVRUUl9GQUxTRV9WQUxVRVwiIC8qIEFUVFJfRkFMU0VfVkFMVUUgKi99OiBmYWxzZSB9KVxcbmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9hdHRyaWJ1dGUtY29lcmNpb24uaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJBVFRSX0VOVU1FUkFURURfQ09FUkNJT05cIiAvKiBBVFRSX0VOVU1FUkFURURfQ09FUkNJT04gKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKG5hbWUsIHZhbHVlLCBjb2VyY2VkKSA9PiBgRW51bWVyYXRlZCBhdHRyaWJ1dGUgXCIke25hbWV9XCIgd2l0aCB2LWJpbmQgdmFsdWUgXFxgJHt2YWx1ZX1cXGAgd2lsbCBgICtcclxuICAgICAgICAgICAgYCR7dmFsdWUgPT09IG51bGwgPyBgYmUgcmVtb3ZlZGAgOiBgcmVuZGVyIHRoZSB2YWx1ZSBhcy1pc2B9IGluc3RlYWQgb2YgY29lcmNpbmcgdGhlIHZhbHVlIHRvIFwiJHtjb2VyY2VkfVwiIGluIFZ1ZSAzLiBgICtcclxuICAgICAgICAgICAgYEFsd2F5cyB1c2UgZXhwbGljaXQgXCJ0cnVlXCIgb3IgXCJmYWxzZVwiIHZhbHVlcyBmb3IgZW51bWVyYXRlZCBhdHRyaWJ1dGVzLiBgICtcclxuICAgICAgICAgICAgYElmIHRoZSB1c2FnZSBpcyBpbnRlbmRlZCwgYCArXHJcbiAgICAgICAgICAgIGB5b3UgY2FuIGRpc2FibGUgdGhlIGNvbXBhdCBiZWhhdmlvciBhbmQgc3VwcHJlc3MgdGhpcyB3YXJuaW5nIHdpdGg6YCArXHJcbiAgICAgICAgICAgIGBcXG5cXG4gIGNvbmZpZ3VyZUNvbXBhdCh7ICR7XCJBVFRSX0VOVU1FUkFURURfQ09FUkNJT05cIiAvKiBBVFRSX0VOVU1FUkFURURfQ09FUkNJT04gKi99OiBmYWxzZSB9KVxcbmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9hdHRyaWJ1dGUtY29lcmNpb24uaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJUUkFOU0lUSU9OX0NMQVNTRVNcIiAvKiBUUkFOU0lUSU9OX0NMQVNTRVMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYGAgLy8gdGhpcyBmZWF0dXJlIGNhbm5vdCBiZSBydW50aW1lLWRldGVjdGVkXHJcbiAgICB9LFxyXG4gICAgW1wiVFJBTlNJVElPTl9HUk9VUF9ST09UXCIgLyogVFJBTlNJVElPTl9HUk9VUF9ST09UICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGA8VHJhbnNpdGlvbkdyb3VwPiBubyBsb25nZXIgcmVuZGVycyBhIHJvb3QgPHNwYW4+IGVsZW1lbnQgYnkgYCArXHJcbiAgICAgICAgICAgIGBkZWZhdWx0IGlmIG5vIFwidGFnXCIgcHJvcCBpcyBzcGVjaWZpZWQuIElmIHlvdSBkbyBub3QgcmVseSBvbiB0aGUgc3BhbiBgICtcclxuICAgICAgICAgICAgYGZvciBzdHlsaW5nLCB5b3UgY2FuIGRpc2FibGUgdGhlIGNvbXBhdCBiZWhhdmlvciBhbmQgc3VwcHJlc3MgdGhpcyBgICtcclxuICAgICAgICAgICAgYHdhcm5pbmcgd2l0aDpgICtcclxuICAgICAgICAgICAgYFxcblxcbiAgY29uZmlndXJlQ29tcGF0KHsgJHtcIlRSQU5TSVRJT05fR1JPVVBfUk9PVFwiIC8qIFRSQU5TSVRJT05fR1JPVVBfUk9PVCAqL306IGZhbHNlIH0pXFxuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3RyYW5zaXRpb24tZ3JvdXAuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJDT01QT05FTlRfQVNZTkNcIiAvKiBDT01QT05FTlRfQVNZTkMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKGNvbXApID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoYEFzeW5jIGNvbXBvbmVudCR7bmFtZSA/IGAgPCR7bmFtZX0+YCA6IGBzYH0gc2hvdWxkIGJlIGV4cGxpY2l0bHkgY3JlYXRlZCB2aWEgXFxgZGVmaW5lQXN5bmNDb21wb25lbnQoKVxcYCBgICtcclxuICAgICAgICAgICAgICAgIGBpbiBWdWUgMy4gUGxhaW4gZnVuY3Rpb25zIHdpbGwgYmUgdHJlYXRlZCBhcyBmdW5jdGlvbmFsIGNvbXBvbmVudHMgaW4gYCArXHJcbiAgICAgICAgICAgICAgICBgbm9uLWNvbXBhdCBidWlsZC4gSWYgeW91IGhhdmUgYWxyZWFkeSBtaWdyYXRlZCBhbGwgYXN5bmMgY29tcG9uZW50IGAgK1xyXG4gICAgICAgICAgICAgICAgYHVzYWdlIGFuZCBpbnRlbmQgdG8gdXNlIHBsYWluIGZ1bmN0aW9ucyBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLCBgICtcclxuICAgICAgICAgICAgICAgIGB5b3UgY2FuIGRpc2FibGUgdGhlIGNvbXBhdCBiZWhhdmlvciBhbmQgc3VwcHJlc3MgdGhpcyBgICtcclxuICAgICAgICAgICAgICAgIGB3YXJuaW5nIHdpdGg6YCArXHJcbiAgICAgICAgICAgICAgICBgXFxuXFxuICBjb25maWd1cmVDb21wYXQoeyAke1wiQ09NUE9ORU5UX0FTWU5DXCIgLyogQ09NUE9ORU5UX0FTWU5DICovfTogZmFsc2UgfSlcXG5gKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vYXN5bmMtY29tcG9uZW50cy5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTVBPTkVOVF9GVU5DVElPTkFMXCIgLyogQ09NUE9ORU5UX0ZVTkNUSU9OQUwgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKGNvbXApID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoYEZ1bmN0aW9uYWwgY29tcG9uZW50JHtuYW1lID8gYCA8JHtuYW1lfT5gIDogYHNgfSBzaG91bGQgYmUgZGVmaW5lZCBhcyBhIHBsYWluIGZ1bmN0aW9uIGluIFZ1ZSAzLiBUaGUgXCJmdW5jdGlvbmFsXCIgYCArXHJcbiAgICAgICAgICAgICAgICBgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIE5PVEU6IEJlZm9yZSBtaWdyYXRpbmcgdG8gdXNlIHBsYWluIGAgK1xyXG4gICAgICAgICAgICAgICAgYGZ1bmN0aW9ucyBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLCBmaXJzdCBtYWtlIHN1cmUgdGhhdCBhbGwgYXN5bmMgYCArXHJcbiAgICAgICAgICAgICAgICBgY29tcG9uZW50cyB1c2FnZSBoYXZlIGJlZW4gbWlncmF0ZWQgYW5kIGl0cyBjb21wYXQgYmVoYXZpb3IgaGFzIGAgK1xyXG4gICAgICAgICAgICAgICAgYGJlZW4gZGlzYWJsZWQuYCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL2Z1bmN0aW9uYWwtY29tcG9uZW50cy5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTVBPTkVOVF9WX01PREVMXCIgLyogQ09NUE9ORU5UX1ZfTU9ERUwgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogKGNvbXApID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY29uZmlnTXNnID0gYG9wdC1pbiB0byBgICtcclxuICAgICAgICAgICAgICAgIGBWdWUgMyBiZWhhdmlvciBvbiBhIHBlci1jb21wb25lbnQgYmFzaXMgd2l0aCBcXGBjb21wYXRDb25maWc6IHsgJHtcIkNPTVBPTkVOVF9WX01PREVMXCIgLyogQ09NUE9ORU5UX1ZfTU9ERUwgKi99OiBmYWxzZSB9XFxgLmA7XHJcbiAgICAgICAgICAgIGlmIChjb21wLnByb3BzICYmIGlzQXJyYXkoY29tcC5wcm9wcylcclxuICAgICAgICAgICAgICAgID8gY29tcC5wcm9wcy5pbmNsdWRlcygnbW9kZWxWYWx1ZScpXHJcbiAgICAgICAgICAgICAgICA6IGhhc093bihjb21wLnByb3BzLCAnbW9kZWxWYWx1ZScpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGBDb21wb25lbnQgZGVsY2FyZXMgXCJtb2RlbFZhbHVlXCIgcHJvcCwgd2hpY2ggaXMgVnVlIDMgdXNhZ2UsIGJ1dCBgICtcclxuICAgICAgICAgICAgICAgICAgICBgaXMgcnVubmluZyB1bmRlciBWdWUgMiBjb21wYXQgdi1tb2RlbCBiZWhhdmlvci4gWW91IGNhbiAke2NvbmZpZ01zZ31gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKGB2LW1vZGVsIHVzYWdlIG9uIGNvbXBvbmVudCBoYXMgY2hhbmdlZCBpbiBWdWUgMy4gQ29tcG9uZW50IHRoYXQgZXhwZWN0cyBgICtcclxuICAgICAgICAgICAgICAgIGB0byB3b3JrIHdpdGggdi1tb2RlbCBzaG91bGQgbm93IHVzZSB0aGUgXCJtb2RlbFZhbHVlXCIgcHJvcCBhbmQgZW1pdCB0aGUgYCArXHJcbiAgICAgICAgICAgICAgICBgXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiIGV2ZW50LiBZb3UgY2FuIHVwZGF0ZSB0aGUgdXNhZ2UgYW5kIHRoZW4gJHtjb25maWdNc2d9YCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3YtbW9kZWwuaHRtbGBcclxuICAgIH0sXHJcbiAgICBbXCJSRU5ERVJfRlVOQ1RJT05cIiAvKiBSRU5ERVJfRlVOQ1RJT04gKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFZ1ZSAzJ3MgcmVuZGVyIGZ1bmN0aW9uIEFQSSBoYXMgY2hhbmdlZC4gYCArXHJcbiAgICAgICAgICAgIGBZb3UgY2FuIG9wdC1pbiB0byB0aGUgbmV3IEFQSSB3aXRoOmAgK1xyXG4gICAgICAgICAgICBgXFxuXFxuICBjb25maWd1cmVDb21wYXQoeyAke1wiUkVOREVSX0ZVTkNUSU9OXCIgLyogUkVOREVSX0ZVTkNUSU9OICovfTogZmFsc2UgfSlcXG5gICtcclxuICAgICAgICAgICAgYFxcbiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBwZXItY29tcG9uZW50IHZpYSB0aGUgXCJjb21wYXRDb25maWdcIiBvcHRpb24uKWAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi9yZW5kZXItZnVuY3Rpb24tYXBpLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiRklMVEVSU1wiIC8qIEZJTFRFUlMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYGZpbHRlcnMgaGF2ZSBiZWVuIHJlbW92ZWQgaW4gVnVlIDMuIGAgK1xyXG4gICAgICAgICAgICBgVGhlIFwifFwiIHN5bWJvbCB3aWxsIGJlIHRyZWF0ZWQgYXMgbmF0aXZlIEphdmFTY3JpcHQgYml0d2lzZSBPUiBvcGVyYXRvci4gYCArXHJcbiAgICAgICAgICAgIGBVc2UgbWV0aG9kIGNhbGxzIG9yIGNvbXB1dGVkIHByb3BlcnRpZXMgaW5zdGVhZC5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZmlsdGVycy5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIlBSSVZBVEVfQVBJU1wiIC8qIFBSSVZBVEVfQVBJUyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBuYW1lID0+IGBcIiR7bmFtZX1cIiBpcyBhIFZ1ZSAyIHByaXZhdGUgQVBJIHRoYXQgbm8gbG9uZ2VyIGV4aXN0cyBpbiBWdWUgMy4gYCArXHJcbiAgICAgICAgICAgIGBJZiB5b3UgYXJlIHNlZWluZyB0aGlzIHdhcm5pbmcgb25seSBkdWUgdG8gYSBkZXBlbmRlbmN5LCB5b3UgY2FuIGAgK1xyXG4gICAgICAgICAgICBgc3VwcHJlc3MgdGhpcyB3YXJuaW5nIHZpYSB7IFBSSVZBVEVfQVBJUzogJ3N1cHJlc3Mtd2FybmluZycgfS5gXHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGluc3RhbmNlV2FybmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuY29uc3Qgd2FybkNvdW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuZnVuY3Rpb24gd2FybkRlcHJlY2F0aW9uKGtleSwgaW5zdGFuY2UsIC4uLmFyZ3MpIHtcclxuICAgIGlmICghKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaW5zdGFuY2UgPSBpbnN0YW5jZSB8fCBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIC8vIGNoZWNrIHVzZXIgY29uZmlnXHJcbiAgICBjb25zdCBjb25maWcgPSBnZXRDb21wYXRDb25maWdGb3JLZXkoa2V5LCBpbnN0YW5jZSk7XHJcbiAgICBpZiAoY29uZmlnID09PSAnc3VwcHJlc3Mtd2FybmluZycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBkdXBLZXkgPSBrZXkgKyBhcmdzLmpvaW4oJycpO1xyXG4gICAgbGV0IGNvbXBJZCA9IGluc3RhbmNlICYmIGZvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpO1xyXG4gICAgaWYgKGNvbXBJZCA9PT0gJ0Fub255bW91cycgJiYgaW5zdGFuY2UpIHtcclxuICAgICAgICBjb21wSWQgPSBpbnN0YW5jZS51aWQ7XHJcbiAgICB9XHJcbiAgICAvLyBza2lwIGlmIHRoZSBzYW1lIHdhcm5pbmcgaXMgZW1pdHRlZCBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHR5cGVcclxuICAgIGNvbnN0IGNvbXBvbmVudER1cEtleSA9IGR1cEtleSArIGNvbXBJZDtcclxuICAgIGlmIChjb21wb25lbnREdXBLZXkgaW4gaW5zdGFuY2VXYXJuZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpbnN0YW5jZVdhcm5lZFtjb21wb25lbnREdXBLZXldID0gdHJ1ZTtcclxuICAgIC8vIHNhbWUgd2FybmluZywgYnV0IGRpZmZlcmVudCBjb21wb25lbnQuIHNraXAgdGhlIGxvbmcgbWVzc2FnZSBhbmQganVzdFxyXG4gICAgLy8gbG9nIHRoZSBrZXkgYW5kIGNvdW50LlxyXG4gICAgaWYgKGR1cEtleSBpbiB3YXJuQ291bnQpIHtcclxuICAgICAgICB3YXJuKGAoZGVwcmVjYXRpb24gJHtrZXl9KSAoJHsrK3dhcm5Db3VudFtkdXBLZXldICsgMX0pYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgd2FybkNvdW50W2R1cEtleV0gPSAwO1xyXG4gICAgY29uc3QgeyBtZXNzYWdlLCBsaW5rIH0gPSBkZXByZWNhdGlvbkRhdGFba2V5XTtcclxuICAgIHdhcm4oYChkZXByZWNhdGlvbiAke2tleX0pICR7dHlwZW9mIG1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyBtZXNzYWdlKC4uLmFyZ3MpIDogbWVzc2FnZX0ke2xpbmsgPyBgXFxuICBEZXRhaWxzOiAke2xpbmt9YCA6IGBgfWApO1xyXG4gICAgaWYgKCFpc0NvbXBhdEVuYWJsZWQoa2V5LCBpbnN0YW5jZSwgdHJ1ZSkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBeIFRoZSBhYm92ZSBkZXByZWNhdGlvbidzIGNvbXBhdCBiZWhhdmlvciBpcyBkaXNhYmxlZCBhbmQgd2lsbCBsaWtlbHkgYCArXHJcbiAgICAgICAgICAgIGBsZWFkIHRvIHJ1bnRpbWUgZXJyb3JzLmApO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGdsb2JhbENvbXBhdENvbmZpZyA9IHtcclxuICAgIE1PREU6IDJcclxufTtcclxuZnVuY3Rpb24gZ2V0Q29tcGF0Q29uZmlnRm9yS2V5KGtleSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlQ29uZmlnID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5jb21wYXRDb25maWc7XHJcbiAgICBpZiAoaW5zdGFuY2VDb25maWcgJiYga2V5IGluIGluc3RhbmNlQ29uZmlnKSB7XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlQ29uZmlnW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ2xvYmFsQ29tcGF0Q29uZmlnW2tleV07XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wYXRFbmFibGVkKGtleSwgaW5zdGFuY2UsIGVuYWJsZUZvckJ1aWx0SW4gPSBmYWxzZSkge1xyXG4gICAgLy8gc2tpcCBjb21wYXQgZm9yIGJ1aWx0LWluIGNvbXBvbmVudHNcclxuICAgIGlmICghZW5hYmxlRm9yQnVpbHRJbiAmJiBpbnN0YW5jZSAmJiBpbnN0YW5jZS50eXBlLl9faXNCdWlsdEluKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3TW9kZSA9IGdldENvbXBhdENvbmZpZ0ZvcktleSgnTU9ERScsIGluc3RhbmNlKSB8fCAyO1xyXG4gICAgY29uc3QgdmFsID0gZ2V0Q29tcGF0Q29uZmlnRm9yS2V5KGtleSwgaW5zdGFuY2UpO1xyXG4gICAgY29uc3QgbW9kZSA9IGlzRnVuY3Rpb24ocmF3TW9kZSlcclxuICAgICAgICA/IHJhd01vZGUoaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZSlcclxuICAgICAgICA6IHJhd01vZGU7XHJcbiAgICBpZiAobW9kZSA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiB2YWwgIT09IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09ICdzdXBwcmVzcy13YXJuaW5nJztcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xyXG4gICAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgeyBlbWl0c09wdGlvbnMsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChlbWl0c09wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKCEoZXZlbnQgaW4gZW1pdHNPcHRpb25zKSAmJlxyXG4gICAgICAgICAgICAgICAgIShmYWxzZSApKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BzT3B0aW9ucyB8fCAhKHRvSGFuZGxlcktleShldmVudCkgaW4gcHJvcHNPcHRpb25zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHRoZSBlbWl0cyBvcHRpb24gbm9yIGFzIGFuIFwiJHt0b0hhbmRsZXJLZXkoZXZlbnQpfVwiIHByb3AuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBlbWl0c09wdGlvbnNbZXZlbnRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgZXZlbnQgYXJndW1lbnRzOiBldmVudCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgZXZlbnQgXCIke2V2ZW50fVwiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBhcmdzID0gcmF3QXJncztcclxuICAgIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoJ3VwZGF0ZTonKTtcclxuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhcHBseSBtb2RpZmllcnMgb24gYXJnc1xyXG4gICAgY29uc3QgbW9kZWxBcmcgPSBpc01vZGVsTGlzdGVuZXIgJiYgZXZlbnQuc2xpY2UoNyk7XHJcbiAgICBpZiAobW9kZWxBcmcgJiYgbW9kZWxBcmcgaW4gcHJvcHMpIHtcclxuICAgICAgICBjb25zdCBtb2RpZmllcnNLZXkgPSBgJHttb2RlbEFyZyA9PT0gJ21vZGVsVmFsdWUnID8gJ21vZGVsJyA6IG1vZGVsQXJnfU1vZGlmaWVyc2A7XHJcbiAgICAgICAgY29uc3QgeyBudW1iZXIsIHRyaW0gfSA9IHByb3BzW21vZGlmaWVyc0tleV0gfHwgRU1QVFlfT0JKO1xyXG4gICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChhID0+IGEudHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcCh0b051bWJlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEVtaXQoaW5zdGFuY2UsIGV2ZW50LCBhcmdzKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xyXG4gICAgICAgICAgICB3YXJuKGBFdmVudCBcIiR7bG93ZXJDYXNlRXZlbnR9XCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgYCArXHJcbiAgICAgICAgICAgICAgICBgJHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0gYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFwiJHtldmVudH1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICBgTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgYCArXHJcbiAgICAgICAgICAgICAgICBgdi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiJHtoeXBoZW5hdGUoZXZlbnQpfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBoYW5kbGVyTmFtZTtcclxuICAgIGxldCBoYW5kbGVyID0gcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGV2ZW50KSldIHx8XHJcbiAgICAgICAgLy8gYWxzbyB0cnkgY2FtZWxDYXNlIGV2ZW50IGhhbmRsZXIgKCMyMjQ5KVxyXG4gICAgICAgIHByb3BzWyhoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpKV07XHJcbiAgICAvLyBmb3Igdi1tb2RlbCB1cGRhdGU6eHh4IGV2ZW50cywgYWxzbyB0cmlnZ2VyIGtlYmFiLWNhc2UgZXF1aXZhbGVudFxyXG4gICAgLy8gZm9yIHByb3BzIHBhc3NlZCB2aWEga2ViYWItY2FzZVxyXG4gICAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xyXG4gICAgICAgIGhhbmRsZXIgPSBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSkpXTtcclxuICAgIH1cclxuICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UsIDYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XHJcbiAgICBpZiAob25jZUhhbmRsZXIpIHtcclxuICAgICAgICBpZiAoIWluc3RhbmNlLmVtaXR0ZWQpIHtcclxuICAgICAgICAgICAgKGluc3RhbmNlLmVtaXR0ZWQgPSB7fSlbaGFuZGxlck5hbWVdID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhvbmNlSGFuZGxlciwgaW5zdGFuY2UsIDYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi8sIGFyZ3MpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5lbWl0c0NhY2hlO1xyXG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xyXG4gICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XHJcbiAgICBsZXQgbm9ybWFsaXplZCA9IHt9O1xyXG4gICAgLy8gYXBwbHkgbWl4aW4vZXh0ZW5kcyBwcm9wc1xyXG4gICAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcclxuICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5kRW1pdHMgPSAocmF3KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcm9tRXh0ZW5kID0gbm9ybWFsaXplRW1pdHNPcHRpb25zKHJhdywgYXBwQ29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkRnJvbUV4dGVuZCkge1xyXG4gICAgICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgbm9ybWFsaXplZEZyb21FeHRlbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5leHRlbmRzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZEVtaXRzKGNvbXAuZXh0ZW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLm1peGlucykge1xyXG4gICAgICAgICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xyXG4gICAgICAgIGNhY2hlLnNldChjb21wLCBudWxsKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcclxuICAgICAgICByYXcuZm9yRWFjaChrZXkgPT4gKG5vcm1hbGl6ZWRba2V5XSA9IG51bGwpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV4dGVuZChub3JtYWxpemVkLCByYXcpO1xyXG4gICAgfVxyXG4gICAgY2FjaGUuc2V0KGNvbXAsIG5vcm1hbGl6ZWQpO1xyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XHJcbn1cclxuLy8gQ2hlY2sgaWYgYW4gaW5jb21pbmcgcHJvcCBrZXkgaXMgYSBkZWNsYXJlZCBlbWl0IGV2ZW50IGxpc3RlbmVyLlxyXG4vLyBlLmcuIFdpdGggYGVtaXRzOiB7IGNsaWNrOiBudWxsIH1gLCBwcm9wcyBuYW1lZCBgb25DbGlja2AgYW5kIGBvbmNsaWNrYCBhcmVcclxuLy8gYm90aCBjb25zaWRlcmVkIG1hdGNoZWQgbGlzdGVuZXJzLlxyXG5mdW5jdGlvbiBpc0VtaXRMaXN0ZW5lcihvcHRpb25zLCBrZXkpIHtcclxuICAgIGlmICghb3B0aW9ucyB8fCAhaXNPbihrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAga2V5ID0ga2V5LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLywgJycpO1xyXG4gICAgcmV0dXJuIChoYXNPd24ob3B0aW9ucywga2V5WzBdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSkpIHx8XHJcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGh5cGhlbmF0ZShrZXkpKSB8fFxyXG4gICAgICAgIGhhc093bihvcHRpb25zLCBrZXkpKTtcclxufVxuXG4vKipcclxuICogbWFyayB0aGUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2UgZm9yIGFzc2V0IHJlc29sdXRpb24gKGUuZy5cclxuICogcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSkgZHVyaW5nIHJlbmRlclxyXG4gKi9cclxubGV0IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XHJcbi8qKlxyXG4gKiBOb3RlOiByZW5kZXJpbmcgY2FsbHMgbWF5YmUgbmVzdGVkLiBUaGUgZnVuY3Rpb24gcmV0dXJucyB0aGUgcGFyZW50IHJlbmRlcmluZ1xyXG4gKiBpbnN0YW5jZSBpZiBwcmVzZW50LCB3aGljaCBzaG91bGQgYmUgcmVzdG9yZWQgYWZ0ZXIgdGhlIHJlbmRlciBpcyBkb25lOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBjb25zdCBwcmV2ID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGkpXHJcbiAqIC8vIC4uLnJlbmRlclxyXG4gKiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldilcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHByZXYgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgIGN1cnJlbnRTY29wZUlkID0gKGluc3RhbmNlICYmIGluc3RhbmNlLnR5cGUuX19zY29wZUlkKSB8fCBudWxsO1xyXG4gICAgcmV0dXJuIHByZXY7XHJcbn1cclxuLyoqXHJcbiAqIFNldCBzY29wZSBpZCB3aGVuIGNyZWF0aW5nIGhvaXN0ZWQgdm5vZGVzLlxyXG4gKiBAcHJpdmF0ZSBjb21waWxlciBoZWxwZXJcclxuICovXHJcbmZ1bmN0aW9uIHB1c2hTY29wZUlkKGlkKSB7XHJcbiAgICBjdXJyZW50U2NvcGVJZCA9IGlkO1xyXG59XHJcbi8qKlxyXG4gKiBUZWNobmljYWxseSB3ZSBubyBsb25nZXIgbmVlZCB0aGlzIGFmdGVyIDMuMC44IGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHNhbWVcclxuICogQVBJIGZvciBiYWNrd2FyZHMgY29tcGF0IHcvIGNvZGUgZ2VuZXJhdGVkIGJ5IGNvbXBpbGVycy5cclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHBvcFNjb3BlSWQoKSB7XHJcbiAgICBjdXJyZW50U2NvcGVJZCA9IG51bGw7XHJcbn1cclxuLyoqXHJcbiAqIE9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhTY29wZUlkID0gKF9pZCkgPT4gd2l0aEN0eDtcclxuLyoqXHJcbiAqIFdyYXAgYSBzbG90IGZ1bmN0aW9uIHRvIG1lbW9pemUgY3VycmVudCByZW5kZXJpbmcgaW5zdGFuY2VcclxuICogQHByaXZhdGUgY29tcGlsZXIgaGVscGVyXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoQ3R4KGZuLCBjdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIGlzTm9uU2NvcGVkU2xvdCAvLyBmYWxzZSBvbmx5XHJcbikge1xyXG4gICAgaWYgKCFjdHgpXHJcbiAgICAgICAgcmV0dXJuIGZuO1xyXG4gICAgLy8gYWxyZWFkeSBub3JtYWxpemVkXHJcbiAgICBpZiAoZm4uX24pIHtcclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW5kZXJGbldpdGhDb250ZXh0ID0gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAvLyBJZiBhIHVzZXIgY2FsbHMgYSBjb21waWxlZCBzbG90IGluc2lkZSBhIHRlbXBsYXRlIGV4cHJlc3Npb24gKCMxNzQ1KSwgaXRcclxuICAgICAgICAvLyBjYW4gbWVzcyB1cCBibG9jayB0cmFja2luZywgc28gYnkgZGVmYXVsdCB3ZSBkaXNhYmxlIGJsb2NrIHRyYWNraW5nIGFuZFxyXG4gICAgICAgIC8vIGZvcmNlIGJhaWwgb3V0IHdoZW4gaW52b2tpbmcgYSBjb21waWxlZCBzbG90IChpbmRpY2F0ZWQgYnkgdGhlIC5fZCBmbGFnKS5cclxuICAgICAgICAvLyBUaGlzIGlzbid0IG5lY2Vzc2FyeSBpZiByZW5kZXJpbmcgYSBjb21waWxlZCBgPHNsb3Q+YCwgc28gd2UgZmxpcCB0aGVcclxuICAgICAgICAvLyAuX2QgZmxhZyBvZmYgd2hlbiBpbnZva2luZyB0aGUgd3JhcHBlZCBmbiBpbnNpZGUgYHJlbmRlclNsb3RgLlxyXG4gICAgICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XHJcbiAgICAgICAgICAgIHNldEJsb2NrVHJhY2tpbmcoLTEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcmV2SW5zdGFuY2UgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoY3R4KTtcclxuICAgICAgICBjb25zdCByZXMgPSBmbiguLi5hcmdzKTtcclxuICAgICAgICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldkluc3RhbmNlKTtcclxuICAgICAgICBpZiAocmVuZGVyRm5XaXRoQ29udGV4dC5fZCkge1xyXG4gICAgICAgICAgICBzZXRCbG9ja1RyYWNraW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoY3R4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH07XHJcbiAgICAvLyBtYXJrIG5vcm1hbGl6ZWQgdG8gYXZvaWQgZHVwbGljYXRlZCB3cmFwcGluZ1xyXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fbiA9IHRydWU7XHJcbiAgICAvLyBtYXJrIHRoaXMgYXMgY29tcGlsZWQgYnkgZGVmYXVsdFxyXG4gICAgLy8gdGhpcyBpcyB1c2VkIGluIHZub2RlLnRzIC0+IG5vcm1hbGl6ZUNoaWxkcmVuKCkgdG8gc2V0IHRoZSBzbG90XHJcbiAgICAvLyByZW5kZXJpbmcgZmxhZy5cclxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2MgPSB0cnVlO1xyXG4gICAgLy8gZGlzYWJsZSBibG9jayB0cmFja2luZyBieSBkZWZhdWx0XHJcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9kID0gdHJ1ZTtcclxuICAgIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xyXG59XG5cbi8qKlxyXG4gKiBkZXYgb25seSBmbGFnIHRvIHRyYWNrIHdoZXRoZXIgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIuXHJcbiAqIElmICRhdHRycyB3YXMgdXNlZCBkdXJpbmcgcmVuZGVyIHRoZW4gdGhlIHdhcm5pbmcgZm9yIGZhaWxlZCBhdHRyc1xyXG4gKiBmYWxsdGhyb3VnaCBjYW4gYmUgc3VwcHJlc3NlZC5cclxuICovXHJcbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XHJcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xyXG4gICAgYWNjZXNzZWRBdHRycyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyB0eXBlOiBDb21wb25lbnQsIHZub2RlLCBwcm94eSwgd2l0aFByb3h5LCBwcm9wcywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSwgc2xvdHMsIGF0dHJzLCBlbWl0LCByZW5kZXIsIHJlbmRlckNhY2hlLCBkYXRhLCBzZXR1cFN0YXRlLCBjdHgsIGluaGVyaXRBdHRycyB9ID0gaW5zdGFuY2U7XHJcbiAgICBsZXQgcmVzdWx0O1xyXG4gICAgY29uc3QgcHJldiA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgYWNjZXNzZWRBdHRycyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgZmFsbHRocm91Z2hBdHRycztcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgLy8gd2l0aFByb3h5IGlzIGEgcHJveHkgd2l0aCBhIGRpZmZlcmVudCBgaGFzYCB0cmFwIG9ubHkgZm9yXHJcbiAgICAgICAgICAgIC8vIHJ1bnRpbWUtY29tcGlsZWQgcmVuZGVyIGZ1bmN0aW9ucyB1c2luZyBgd2l0aGAgYmxvY2suXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3h5VG9Vc2UgPSB3aXRoUHJveHkgfHwgcHJveHk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5jYWxsKHByb3h5VG9Vc2UsIHByb3h5VG9Vc2UsIHJlbmRlckNhY2hlLCBwcm9wcywgc2V0dXBTdGF0ZSwgZGF0YSwgY3R4KSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWxcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyID0gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAvLyBpbiBkZXYsIG1hcmsgYXR0cnMgYWNjZXNzZWQgaWYgb3B0aW9uYWwgcHJvcHMgKGF0dHJzID09PSBwcm9wcylcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBhdHRycyA9PT0gcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0ID0gbm9ybWFsaXplVk5vZGUocmVuZGVyLmxlbmd0aCA+IDFcclxuICAgICAgICAgICAgICAgID8gcmVuZGVyKHByb3BzLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0IGF0dHJzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9KVxyXG4gICAgICAgICAgICAgICAgOiByZW5kZXIocHJvcHMsIG51bGwgLyogd2Uga25vdyBpdCBkb2Vzbid0IG5lZWQgaXQgKi8pKTtcclxuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wc1xyXG4gICAgICAgICAgICAgICAgPyBhdHRyc1xyXG4gICAgICAgICAgICAgICAgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdHRyIG1lcmdpbmdcclxuICAgICAgICAvLyBpbiBkZXYgbW9kZSwgY29tbWVudHMgYXJlIHByZXNlcnZlZCwgYW5kIGl0J3MgcG9zc2libGUgZm9yIGEgdGVtcGxhdGVcclxuICAgICAgICAvLyB0byBoYXZlIGNvbW1lbnRzIGFsb25nIHNpZGUgdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtYWtlcyBpdCBhIGZyYWdtZW50XHJcbiAgICAgICAgbGV0IHJvb3QgPSByZXN1bHQ7XHJcbiAgICAgICAgbGV0IHNldFJvb3QgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICByZXN1bHQucGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICByZXN1bHQucGF0Y2hGbGFnICYgMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqLykge1xyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmFsbHRocm91Z2hBdHRycyAmJiBpbmhlcml0QXR0cnMgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmYWxsdGhyb3VnaEF0dHJzKTtcclxuICAgICAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHJvb3Q7XHJcbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzT3B0aW9ucyAmJiBrZXlzLnNvbWUoaXNNb2RlbExpc3RlbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHYtbW9kZWwgbGlzdGVuZXIgKG9uVXBkYXRlOnh4eCkgaGFzIGEgY29ycmVzcG9uZGluZyBkZWNsYXJlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9wLCBpdCBpbmRpY2F0ZXMgdGhpcyBjb21wb25lbnQgZXhwZWN0cyB0byBoYW5kbGUgdi1tb2RlbCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXQgc2hvdWxkIG5vdCBmYWxsdGhyb3VnaC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsYXRlZDogIzE1NDMsICMxNjQzLCAjMTk4OVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoZmFsbHRocm91Z2hBdHRycywgcHJvcHNPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCwgZmFsbHRocm91Z2hBdHRycyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWFjY2Vzc2VkQXR0cnMgJiYgcm9vdC50eXBlICE9PSBDb21tZW50JDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudEF0dHJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBoYW5kbGVycyB3aGVuIHRoZXkgZmFpbCB0byBmYWxsdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWNjdXJhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QXR0cnMucHVzaChrZXlbMl0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tcHJvcHMgYXR0cmlidXRlcyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtleHRyYUF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtldmVudEF0dHJzLmpvaW4oJywgJyl9KSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgcm9vdCBub2Rlcy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgSWYgdGhlIGxpc3RlbmVyIGlzIGludGVuZGVkIHRvIGJlIGEgY29tcG9uZW50IGN1c3RvbSBldmVudCBsaXN0ZW5lciBvbmx5LCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmFsc2UgJiZcclxuICAgICAgICAgICAgaXNDb21wYXRFbmFibGVkKFwiSU5TVEFOQ0VfQVRUUlNfQ0xBU1NfU1RZTEVcIiAvKiBJTlNUQU5DRV9BVFRSU19DTEFTU19TVFlMRSAqLywgaW5zdGFuY2UpICYmXHJcbiAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovICYmXHJcbiAgICAgICAgICAgIChyb290LnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgcm9vdC5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykpIDtcclxuICAgICAgICAvLyBpbmhlcml0IGRpcmVjdGl2ZXNcclxuICAgICAgICBpZiAodm5vZGUuZGlycykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0VsZW1lbnRSb290KHJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBSdW50aW1lIGRpcmVjdGl2ZSB1c2VkIG9uIGNvbXBvbmVudCB3aXRoIG5vbi1lbGVtZW50IHJvb3Qgbm9kZS4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJvb3QuZGlycyA9IHJvb3QuZGlycyA/IHJvb3QuZGlycy5jb25jYXQodm5vZGUuZGlycykgOiB2bm9kZS5kaXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmhlcml0IHRyYW5zaXRpb24gZGF0YVxyXG4gICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGB0aGF0IGNhbm5vdCBiZSBhbmltYXRlZC5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb290LnRyYW5zaXRpb24gPSB2bm9kZS50cmFuc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldFJvb3QpIHtcclxuICAgICAgICAgICAgc2V0Um9vdChyb290KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHJvb3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGJsb2NrU3RhY2subGVuZ3RoID0gMDtcclxuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxIC8qIFJFTkRFUl9GVU5DVElPTiAqLyk7XHJcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlVk5vZGUoQ29tbWVudCQxKTtcclxuICAgIH1cclxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXHJcbiAqIHRlbXBsYXRlIGludG8gYSBmcmFnbWVudCByb290LCBidXQgd2UgbmVlZCB0byBsb2NhdGUgdGhlIHNpbmdsZSBlbGVtZW50XHJcbiAqIHJvb3QgZm9yIGF0dHJzIGFuZCBzY29wZSBpZCBwcm9jZXNzaW5nLlxyXG4gKi9cclxuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XHJcbiAgICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgY29uc3QgY2hpbGRSb290ID0gZmlsdGVyU2luZ2xlUm9vdChyYXdDaGlsZHJlbik7XHJcbiAgICBpZiAoIWNoaWxkUm9vdCkge1xyXG4gICAgICAgIHJldHVybiBbdm5vZGUsIHVuZGVmaW5lZF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcclxuICAgIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcclxuICAgIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcclxuICAgICAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVkUm9vdC5wYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcclxufTtcclxuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbikge1xyXG4gICAgbGV0IHNpbmdsZVJvb3Q7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHVzZXIgY29tbWVudFxyXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCQxIHx8IGNoaWxkLmNoaWxkcmVuID09PSAndi1pZicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaW5nbGVSb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFzIG1vcmUgdGhhbiAxIG5vbi1jb21tZW50IGNoaWxkLCByZXR1cm4gbm93XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2luZ2xlUm9vdCA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNpbmdsZVJvb3Q7XHJcbn1cclxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnIHx8IGtleSA9PT0gJ3N0eWxlJyB8fCBpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59O1xyXG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpIHx8ICEoa2V5LnNsaWNlKDkpIGluIHByb3BzKSkge1xyXG4gICAgICAgICAgICByZXNba2V5XSA9IGF0dHJzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuY29uc3QgaXNFbGVtZW50Um9vdCA9ICh2bm9kZSkgPT4ge1xyXG4gICAgcmV0dXJuICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyB8fFxyXG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgIHZub2RlLnR5cGUgPT09IENvbW1lbnQkMSAvLyBwb3RlbnRpYWwgdi1pZiBicmFuY2ggc3dpdGNoXHJcbiAgICApO1xyXG59O1xyXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVDb21wb25lbnQocHJldlZOb2RlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkge1xyXG4gICAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcclxuICAgIGNvbnN0IHsgcHJvcHM6IG5leHRQcm9wcywgY2hpbGRyZW46IG5leHRDaGlsZHJlbiwgcGF0Y2hGbGFnIH0gPSBuZXh0Vk5vZGU7XHJcbiAgICBjb25zdCBlbWl0cyA9IGNvbXBvbmVudC5lbWl0c09wdGlvbnM7XHJcbiAgICAvLyBQYXJlbnQgY29tcG9uZW50J3MgcmVuZGVyIGZ1bmN0aW9uIHdhcyBob3QtdXBkYXRlZC4gU2luY2UgdGhpcyBtYXkgaGF2ZVxyXG4gICAgLy8gY2F1c2VkIHRoZSBjaGlsZCBjb21wb25lbnQncyBzbG90cyBjb250ZW50IHRvIGhhdmUgY2hhbmdlZCwgd2UgbmVlZCB0b1xyXG4gICAgLy8gZm9yY2UgdGhlIGNoaWxkIHRvIHVwZGF0ZSBhcyB3ZWxsLlxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gZm9yY2UgY2hpbGQgdXBkYXRlIGZvciBydW50aW1lIGRpcmVjdGl2ZSBvciB0cmFuc2l0aW9uIG9uIGNvbXBvbmVudCB2bm9kZS5cclxuICAgIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGltaXplZCAmJiBwYXRjaEZsYWcgPj0gMCkge1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi8pIHtcclxuICAgICAgICAgICAgLy8gc2xvdCBjb250ZW50IHRoYXQgcmVmZXJlbmNlcyB2YWx1ZXMgdGhhdCBtaWdodCBoYXZlIGNoYW5nZWQsXHJcbiAgICAgICAgICAgIC8vIGUuZy4gaW4gYSB2LWZvclxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcmVzZW5jZSBvZiB0aGlzIGZsYWcgaW5kaWNhdGVzIHByb3BzIGFyZSBhbHdheXMgbm9uLW51bGxcclxuICAgICAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGR5bmFtaWNQcm9wcyA9IG5leHRWTm9kZS5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBkeW5hbWljUHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyB0aGlzIHBhdGggaXMgb25seSB0YWtlbiBieSBtYW51YWxseSB3cml0dGVuIHJlbmRlciBmdW5jdGlvbnNcclxuICAgICAgICAvLyBzbyBwcmVzZW5jZSBvZiBhbnkgY2hpbGRyZW4gbGVhZHMgdG8gYSBmb3JjZWQgdXBkYXRlXHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXByZXZQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcclxuICAgIGNvbnN0IG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcclxuICAgIGlmIChuZXh0S2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByZXZQcm9wcykubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XHJcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxyXG4gICAgICAgICAgICAhaXNFbWl0TGlzdGVuZXIoZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsIC8vIEhvc3ROb2RlXHJcbikge1xyXG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuc3ViVHJlZSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAodm5vZGUgPSBwYXJlbnQudm5vZGUpLmVsID0gZWw7XHJcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgIH1cclxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xyXG4vLyBTdXNwZW5zZSBleHBvc2VzIGEgY29tcG9uZW50LWxpa2UgQVBJLCBhbmQgaXMgdHJlYXRlZCBsaWtlIGEgY29tcG9uZW50XHJcbi8vIGluIHRoZSBjb21waWxlciwgYnV0IGludGVybmFsbHkgaXQncyBhIHNwZWNpYWwgYnVpbHQtaW4gdHlwZSB0aGF0IGhvb2tzXHJcbi8vIGRpcmVjdGx5IGludG8gdGhlIHJlbmRlcmVyLlxyXG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XHJcbiAgICBuYW1lOiAnU3VzcGVuc2UnLFxyXG4gICAgLy8gSW4gb3JkZXIgdG8gbWFrZSBTdXNwZW5zZSB0cmVlLXNoYWthYmxlLCB3ZSBuZWVkIHRvIGF2b2lkIGltcG9ydGluZyBpdFxyXG4gICAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcclxuICAgIC8vIG9uIGEgdm5vZGUncyB0eXBlIGFuZCBjYWxscyB0aGUgYHByb2Nlc3NgIG1ldGhvZCwgcGFzc2luZyBpbiByZW5kZXJlclxyXG4gICAgLy8gaW50ZXJuYWxzLlxyXG4gICAgX19pc1N1c3BlbnNlOiB0cnVlLFxyXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIFxyXG4gICAgLy8gcGxhdGZvcm0tc3BlY2lmaWMgaW1wbCBwYXNzZWQgZnJvbSByZW5kZXJlclxyXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBtb3VudFN1c3BlbnNlKG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcclxuICAgIGNyZWF0ZTogY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSxcclxuICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlblxyXG59O1xyXG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxyXG5jb25zdCBTdXNwZW5zZSA9IChTdXNwZW5zZUltcGxcclxuICAgICk7XHJcbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XHJcbiAgICBjb25zdCB7IHA6IHBhdGNoLCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XHJcbiAgICBjb25zdCBoaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykpO1xyXG4gICAgLy8gc3RhcnQgbW91bnRpbmcgdGhlIGNvbnRlbnQgc3VidHJlZSBpbiBhbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgcGF0Y2gobnVsbCwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBoaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xyXG4gICAgLy8gbm93IGNoZWNrIGlmIHdlIGhhdmUgZW5jb3VudGVyZWQgYW55IGFzeW5jIGRlcHNcclxuICAgIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xyXG4gICAgICAgIC8vIGhhcyBhc3luY1xyXG4gICAgICAgIC8vIG1vdW50IHRoZSBmYWxsYmFjayB0cmVlXHJcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUuc3NGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHZub2RlLnNzRmFsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gU3VzcGVuc2UgaGFzIG5vIGFzeW5jIGRlcHMuIEp1c3QgcmVzb2x2ZS5cclxuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBwOiBwYXRjaCwgdW06IHVubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0pIHtcclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2UpO1xyXG4gICAgc3VzcGVuc2Uudm5vZGUgPSBuMjtcclxuICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XHJcbiAgICBjb25zdCBuZXdGYWxsYmFjayA9IG4yLnNzRmFsbGJhY2s7XHJcbiAgICBjb25zdCB7IGFjdGl2ZUJyYW5jaCwgcGVuZGluZ0JyYW5jaCwgaXNJbkZhbGxiYWNrLCBpc0h5ZHJhdGluZyB9ID0gc3VzcGVuc2U7XHJcbiAgICBpZiAocGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XHJcbiAgICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIHBlbmRpbmdCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgIC8vIHNhbWUgcm9vdCB0eXBlIGJ1dCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXHJcbiAgICAgICAgICAgIHBhdGNoKHBlbmRpbmdCcmFuY2gsIG5ld0JyYW5jaCwgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2dnbGVkIGJlZm9yZSBwZW5kaW5nIHRyZWUgaXMgcmVzb2x2ZWRcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkKys7XHJcbiAgICAgICAgICAgIGlmIChpc0h5ZHJhdGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdG9nZ2xlZCBiZWZvcmUgaHlkcmF0aW9uIGlzIGZpbmlzaGVkLCB0aGUgY3VycmVudCBET00gdHJlZSBpc1xyXG4gICAgICAgICAgICAgICAgLy8gbm8gbG9uZ2VyIHZhbGlkLiBzZXQgaXQgYXMgdGhlIGFjdGl2ZSBicmFuY2ggc28gaXQgd2lsbCBiZSB1bm1vdW50ZWRcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gcmVzb2x2ZWRcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBwZW5kaW5nQnJhbmNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChwZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgcGVuZGluZyBJRC4gdGhpcyBpcyB1c2VkIHRvIGludmFsaWRhdGUgYXN5bmMgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIC8vIHJlc2V0IHN1c3BlbnNlIHN0YXRlXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMgPSAwO1xyXG4gICAgICAgICAgICAvLyBkaXNjYXJkIGVmZmVjdHMgZnJvbSBwZW5kaW5nIGJyYW5jaFxyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIC8vIGRpc2NhcmQgcHJldmlvdXMgY29udGFpbmVyXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBpZiAoaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IGluIGZhbGxiYWNrIHN0YXRlXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0ZhbGxiYWNrLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRvZ2dsZWQgXCJiYWNrXCIgdG8gY3VycmVudCBhY3RpdmUgYnJhbmNoXHJcbiAgICAgICAgICAgICAgICBwYXRjaChhY3RpdmVCcmFuY2gsIG5ld0JyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSByZXNvbHZlXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoZWQgdG8gYSAzcmQgYnJhbmNoXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBkaWQgbm90IGNoYW5nZSwganVzdCBub3JtYWwgcGF0Y2hcclxuICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByb290IG5vZGUgdG9nZ2xlZFxyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHBlbmRpbmcgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25QZW5kaW5nID0gbjIucHJvcHMgJiYgbjIucHJvcHMub25QZW5kaW5nO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblBlbmRpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICBvblBlbmRpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtb3VudCBwZW5kaW5nIGJyYW5jaCBpbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIGluY29taW5nIGJyYW5jaCBoYXMgbm8gYXN5bmMgZGVwcywgcmVzb2x2ZSBub3cuXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxubGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnQsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXHJcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgdGltZW91dCA9IHRvTnVtYmVyKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnRpbWVvdXQpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSB7XHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcclxuICAgICAgICBpc1NWRyxcclxuICAgICAgICBjb250YWluZXIsXHJcbiAgICAgICAgaGlkZGVuQ29udGFpbmVyLFxyXG4gICAgICAgIGFuY2hvcixcclxuICAgICAgICBkZXBzOiAwLFxyXG4gICAgICAgIHBlbmRpbmdJZDogMCxcclxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXHJcbiAgICAgICAgYWN0aXZlQnJhbmNoOiBudWxsLFxyXG4gICAgICAgIHBlbmRpbmdCcmFuY2g6IG51bGwsXHJcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxyXG4gICAgICAgIGlzSHlkcmF0aW5nLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBlZmZlY3RzOiBbXSxcclxuICAgICAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIHBlbmRpbmdJZCwgZWZmZWN0cywgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdJZCA9PT0gc3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGluaXRpYWwgYW5jaG9yIG9uIG1vdW50XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBhbmNob3IgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZhbGxiYWNrIHRyZWUgd2FzIG1vdW50ZWQsIGl0IG1heSBoYXZlIGJlZW4gbW92ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNvbnRlbnQgZnJvbSBvZmYtZG9tIGNvbnRhaW5lciB0byBhY3R1YWwgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2VcclxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcclxuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRvIHRoYXQgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBubyBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZSwgZmx1c2ggYWxsIGpvYnNcclxuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHJlc29sdmUgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25SZXNvbHZlID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25SZXNvbHZlO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvblJlc29sdmUpKSB7XHJcbiAgICAgICAgICAgICAgICBvblJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFsbGJhY2soZmFsbGJhY2tWTm9kZSkge1xyXG4gICAgICAgICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBpc1NWRyB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBAZmFsbGJhY2sgZXZlbnRcclxuICAgICAgICAgICAgY29uc3Qgb25GYWxsYmFjayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uRmFsbGJhY2s7XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG9uRmFsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICBvbkZhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dChhY3RpdmVCcmFuY2gpO1xyXG4gICAgICAgICAgICBjb25zdCBtb3VudEZhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgZmFsbGJhY2tWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGZhbGxiYWNrVk5vZGUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheUVudGVyID0gZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uICYmIGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVubW91bnQgY3VycmVudCBhY3RpdmUgYnJhbmNoXHJcbiAgICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIG5vIHN1c3BlbnNlIHNvIHVubW91bnQgaG9va3MgZmlyZSBub3dcclxuICAgICAgICAgICAgdHJ1ZSAvLyBzaG91bGRSZW1vdmVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudEZhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmUoY29udGFpbmVyLCBhbmNob3IsIHR5cGUpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmXHJcbiAgICAgICAgICAgICAgICBtb3ZlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgY29udGFpbmVyLCBhbmNob3IsIHR5cGUpO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG5leHQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0luUGVuZGluZ1N1c3BlbnNlID0gISFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoO1xyXG4gICAgICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuZGVwcysrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVkRWwgPSBpbnN0YW5jZS52bm9kZS5lbDtcclxuICAgICAgICAgICAgaW5zdGFuY2VcclxuICAgICAgICAgICAgICAgIC5hc3luY0RlcC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMCAvKiBTRVRVUF9GVU5DVElPTiAqLyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihhc3luY1NldHVwUmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIHJldHJ5IHdoZW4gdGhlIHNldHVwKCkgcHJvbWlzZSByZXNvbHZlcy5cclxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIHVubW91bnRlZCBiZWZvcmUgcmVzb2x2ZS5cclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5pc1VubW91bnRlZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzVW5tb3VudGVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcmV0cnkgZnJvbSB0aGlzIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChoeWRyYXRlZEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgbWF5IGhhdmUgYmVlbiByZXBsYWNlZCBpZiBhbiB1cGRhdGUgaGFwcGVuZWQgYmVmb3JlIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzeW5jIGRlcCBpcyByZXNvbHZlZC5cclxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGh5ZHJhdGVkRWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgdm5vZGUsIFxyXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBoYXZlIGJlZW4gbW92ZWQgYmVmb3JlIHJlc29sdmUuXHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XHJcbiAgICAgICAgICAgICAgICAvLyBwbGFjZWhvbGRlci5cclxuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUoaHlkcmF0ZWRFbCB8fCBpbnN0YW5jZS5zdWJUcmVlLmVsKSwgXHJcbiAgICAgICAgICAgICAgICAvLyBhbmNob3Igd2lsbCBub3QgYmUgdXNlZCBpZiB0aGlzIGlzIGh5ZHJhdGlvbiwgc28gb25seSBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgY29tbWVudCBwbGFjZWhvbGRlciBjYXNlLlxyXG4gICAgICAgICAgICAgICAgaHlkcmF0ZWRFbCA/IG51bGwgOiBuZXh0KGluc3RhbmNlLnN1YlRyZWUpLCBzdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUocGxhY2Vob2xkZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZS5lbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgZGVjcmVhc2UgZGVwcyBjb3VudCBpZiBzdXNwZW5zZSBpcyBub3QgYWxyZWFkeSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UgJiYgLS1zdXNwZW5zZS5kZXBzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHN1c3BlbnNlO1xyXG59XHJcbmZ1bmN0aW9uIGh5ZHJhdGVTdXNwZW5zZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBub2RlLnBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBudWxsLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCB0cnVlIC8qIGh5ZHJhdGluZyAqLykpO1xyXG4gICAgLy8gdGhlcmUgYXJlIHR3byBwb3NzaWJsZSBzY2VuYXJpb3MgZm9yIHNlcnZlci1yZW5kZXJlZCBzdXNwZW5zZTpcclxuICAgIC8vIC0gc3VjY2Vzczogc3NyIGNvbnRlbnQgc2hvdWxkIGJlIGZ1bGx5IHJlc29sdmVkXHJcbiAgICAvLyAtIGZhaWx1cmU6IHNzciBjb250ZW50IHNob3VsZCBiZSB0aGUgZmFsbGJhY2sgYnJhbmNoLlxyXG4gICAgLy8gaG93ZXZlciwgb24gdGhlIGNsaWVudCB3ZSBkb24ndCByZWFsbHkga25vdyBpZiBpdCBoYXMgZmFpbGVkIG9yIG5vdFxyXG4gICAgLy8gYXR0ZW1wdCB0byBoeWRyYXRlIHRoZSBET00gYXNzdW1pbmcgaXQgaGFzIHN1Y2NlZWRlZCwgYnV0IHdlIHN0aWxsXHJcbiAgICAvLyBuZWVkIHRvIGNvbnN0cnVjdCBhIHN1c3BlbnNlIGJvdW5kYXJ5IGZpcnN0XHJcbiAgICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShub2RlLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgIGlmIChzdXNwZW5zZS5kZXBzID09PSAwKSB7XHJcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbih2bm9kZSkge1xyXG4gICAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcclxuICAgIGNvbnN0IGlzU2xvdENoaWxkcmVuID0gc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICB2bm9kZS5zc0NvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoaXNTbG90Q2hpbGRyZW4gPyBjaGlsZHJlbi5kZWZhdWx0IDogY2hpbGRyZW4pO1xyXG4gICAgdm5vZGUuc3NGYWxsYmFjayA9IGlzU2xvdENoaWxkcmVuXHJcbiAgICAgICAgPyBub3JtYWxpemVTdXNwZW5zZVNsb3QoY2hpbGRyZW4uZmFsbGJhY2spXHJcbiAgICAgICAgOiBjcmVhdGVWTm9kZShDb21tZW50KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVTdXNwZW5zZVNsb3Qocykge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ocykpIHtcclxuICAgICAgICBjb25zdCBpc0NvbXBpbGVkU2xvdCA9IHMuX2M7XHJcbiAgICAgICAgaWYgKGlzQ29tcGlsZWRTbG90KSB7XHJcbiAgICAgICAgICAgIC8vIGRpc2FibGVUcmFja2luZzogZmFsc2VcclxuICAgICAgICAgICAgLy8gYWxsb3cgYmxvY2sgdHJhY2tpbmcgZm9yIGNvbXBpbGVkIHNsb3RzXHJcbiAgICAgICAgICAgIC8vIChzZWUgLi9jb21wb25lbnRSZW5kZXJDb250ZXh0LnRzKVxyXG4gICAgICAgICAgICBzLl9kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG9wZW5CbG9jaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzID0gcygpO1xyXG4gICAgICAgIGlmIChpc0NvbXBpbGVkU2xvdCkge1xyXG4gICAgICAgICAgICBzLl9kID0gdHJ1ZTtcclxuICAgICAgICAgICAgYmxvY2sgPSBjdXJyZW50QmxvY2s7XHJcbiAgICAgICAgICAgIGNsb3NlQmxvY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheShzKSkge1xyXG4gICAgICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZmlsdGVyU2luZ2xlUm9vdChzKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFzaW5nbGVDaGlsZCkge1xyXG4gICAgICAgICAgICB3YXJuKGA8U3VzcGVuc2U+IHNsb3RzIGV4cGVjdCBhIHNpbmdsZSByb290IG5vZGUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHMgPSBzaW5nbGVDaGlsZDtcclxuICAgIH1cclxuICAgIHMgPSBub3JtYWxpemVWTm9kZShzKTtcclxuICAgIGlmIChibG9jaykge1xyXG4gICAgICAgIHMuZHluYW1pY0NoaWxkcmVuID0gYmxvY2suZmlsdGVyKGMgPT4gYyAhPT0gcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcztcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcclxuICAgIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgYnJhbmNoKSB7XHJcbiAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBicmFuY2g7XHJcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xyXG4gICAgY29uc3QgZWwgPSAodm5vZGUuZWwgPSBicmFuY2guZWwpO1xyXG4gICAgLy8gaW4gY2FzZSBzdXNwZW5zZSBpcyB0aGUgcm9vdCBub2RlIG9mIGEgY29tcG9uZW50LFxyXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcclxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LnZub2RlLmVsID0gZWw7XHJcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcclxuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcclxuICAgICAgICAvLyBidXQgd2hlbiBpdCBuZWVkcyB0byBwcm92aWRlIHZhbHVlcyBvZiBpdHMgb3duLCBpdCBjcmVhdGVzIGl0c1xyXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXHJcbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcclxuICAgICAgICAvLyBwYXJlbnQgYW5kIGxldCB0aGUgcHJvdG90eXBlIGNoYWluIGRvIHRoZSB3b3JrLlxyXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwYXJlbnRQcm92aWRlcyA9PT0gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgIHByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XHJcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxyXG4gICAgLy8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gIzI0MDBcclxuICAgICAgICAvLyB0byBzdXBwb3J0IGBhcHAudXNlYCBwbHVnaW5zLFxyXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnRhbmNlIGlzIGF0IHJvb3RcclxuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGluc3RhbmNlLnBhcmVudCA9PSBudWxsXHJcbiAgICAgICAgICAgID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzXHJcbiAgICAgICAgICAgIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSlcclxuICAgICAgICAgICAgICAgID8gZGVmYXVsdFZhbHVlKClcclxuICAgICAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSBvciBmdW5jdGlvbmFsIGNvbXBvbmVudHMuYCk7XHJcbiAgICB9XHJcbn1cblxuLy8gU2ltcGxlIGVmZmVjdC5cclxuZnVuY3Rpb24gd2F0Y2hFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xyXG59XHJcbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXHJcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xyXG4gICAgICAgIHdhcm4oYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBgICtcclxuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xyXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgeyBpbW1lZGlhdGUsIGRlZXAsIGZsdXNoLCBvblRyYWNrLCBvblRyaWdnZXIgfSA9IEVNUFRZX09CSiwgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNiKSB7XHJcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgYCArXHJcbiAgICAgICAgICAgICAgICBgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZXAgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3YXJuKGB3YXRjaCgpIFwiZGVlcFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcclxuICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCwgcywgYEEgd2F0Y2ggc291cmNlIGNhbiBvbmx5IGJlIGEgZ2V0dGVyL2VmZmVjdCBmdW5jdGlvbiwgYSByZWYsIGAgK1xyXG4gICAgICAgICAgICBgYSByZWFjdGl2ZSBvYmplY3QsIG9yIGFuIGFycmF5IG9mIHRoZXNlIHR5cGVzLmApO1xyXG4gICAgfTtcclxuICAgIGxldCBnZXR0ZXI7XHJcbiAgICBsZXQgZm9yY2VUcmlnZ2VyID0gZmFsc2U7XHJcbiAgICBsZXQgaXNNdWx0aVNvdXJjZSA9IGZhbHNlO1xyXG4gICAgaWYgKGlzUmVmKHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UudmFsdWU7XHJcbiAgICAgICAgZm9yY2VUcmlnZ2VyID0gISFzb3VyY2UuX3NoYWxsb3c7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2U7XHJcbiAgICAgICAgZGVlcCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcclxuICAgICAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcclxuICAgICAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZShpc1JlYWN0aXZlKTtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNSZWYocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzZShzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHMsIGluc3RhbmNlLCAyIC8qIFdBVENIX0dFVFRFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICAvLyBnZXR0ZXIgd2l0aCBjYlxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMiAvKiBXQVRDSF9HRVRURVIgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbm8gY2IgLT4gc2ltcGxlIGVmZmVjdFxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbb25JbnZhbGlkYXRlXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gTk9PUDtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcclxuICAgIH1cclxuICAgIGlmIChjYiAmJiBkZWVwKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xyXG4gICAgfVxyXG4gICAgbGV0IGNsZWFudXA7XHJcbiAgICBsZXQgb25JbnZhbGlkYXRlID0gKGZuKSA9PiB7XHJcbiAgICAgICAgY2xlYW51cCA9IHJ1bm5lci5vcHRpb25zLm9uU3RvcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgNCAvKiBXQVRDSF9DTEVBTlVQICovKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIGxldCBvbGRWYWx1ZSA9IGlzTXVsdGlTb3VyY2UgPyBbXSA6IElOSVRJQUxfV0FUQ0hFUl9WQUxVRTtcclxuICAgIGNvbnN0IGpvYiA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXJ1bm5lci5hY3RpdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2IpIHtcclxuICAgICAgICAgICAgLy8gd2F0Y2goc291cmNlLCBjYilcclxuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBydW5uZXIoKTtcclxuICAgICAgICAgICAgaWYgKGRlZXAgfHxcclxuICAgICAgICAgICAgICAgIGZvcmNlVHJpZ2dlciB8fFxyXG4gICAgICAgICAgICAgICAgKGlzTXVsdGlTb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlLnNvbWUoKHYsIGkpID0+IGhhc0NoYW5nZWQodiwgb2xkVmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgIDogaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGZhbHNlICApKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIGJlZm9yZSBydW5uaW5nIGNiIGFnYWluXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBXQVRDSF9DQUxMQkFDSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA/IHVuZGVmaW5lZCA6IG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW52YWxpZGF0ZVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxyXG4gICAgICAgICAgICBydW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8gaW1wb3J0YW50OiBtYXJrIHRoZSBqb2IgYXMgYSB3YXRjaGVyIGNhbGxiYWNrIHNvIHRoYXQgc2NoZWR1bGVyIGtub3dzXHJcbiAgICAvLyBpdCBpcyBhbGxvd2VkIHRvIHNlbGYtdHJpZ2dlciAoIzE3MjcpXHJcbiAgICBqb2IuYWxsb3dSZWN1cnNlID0gISFjYjtcclxuICAgIGxldCBzY2hlZHVsZXI7XHJcbiAgICBpZiAoZmx1c2ggPT09ICdzeW5jJykge1xyXG4gICAgICAgIHNjaGVkdWxlciA9IGpvYjsgLy8gdGhlIHNjaGVkdWxlciBmdW5jdGlvbiBnZXRzIGNhbGxlZCBkaXJlY3RseVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xyXG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRlZmF1bHQ6ICdwcmUnXHJcbiAgICAgICAgc2NoZWR1bGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlIHx8IGluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcXVldWVQcmVGbHVzaENiKGpvYik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aXRoICdwcmUnIG9wdGlvbiwgdGhlIGZpcnN0IGNhbGwgbXVzdCBoYXBwZW4gYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgc28gaXQgaXMgY2FsbGVkIHN5bmNocm9ub3VzbHkuXHJcbiAgICAgICAgICAgICAgICBqb2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW5uZXIgPSBlZmZlY3QoZ2V0dGVyLCB7XHJcbiAgICAgICAgbGF6eTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrLFxyXG4gICAgICAgIG9uVHJpZ2dlcixcclxuICAgICAgICBzY2hlZHVsZXJcclxuICAgIH0pO1xyXG4gICAgcmVjb3JkSW5zdGFuY2VCb3VuZEVmZmVjdChydW5uZXIsIGluc3RhbmNlKTtcclxuICAgIC8vIGluaXRpYWwgcnVuXHJcbiAgICBpZiAoY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgICAgIGpvYigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSBydW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnKSB7XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHJ1bm5lciwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcnVubmVyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIHN0b3AocnVubmVyKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmVtb3ZlKGluc3RhbmNlLmVmZmVjdHMsIHJ1bm5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyB0aGlzLiR3YXRjaFxyXG5mdW5jdGlvbiBpbnN0YW5jZVdhdGNoKHNvdXJjZSwgdmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IHB1YmxpY1RoaXMgPSB0aGlzLnByb3h5O1xyXG4gICAgY29uc3QgZ2V0dGVyID0gaXNTdHJpbmcoc291cmNlKVxyXG4gICAgICAgID8gc291cmNlLmluY2x1ZGVzKCcuJylcclxuICAgICAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIHNvdXJjZSlcclxuICAgICAgICAgICAgOiAoKSA9PiBwdWJsaWNUaGlzW3NvdXJjZV1cclxuICAgICAgICA6IHNvdXJjZS5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpO1xyXG4gICAgbGV0IGNiO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XHJcbiAgICAgICAgY2IgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNiID0gdmFsdWUuaGFuZGxlcjtcclxuICAgICAgICBvcHRpb25zID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZG9XYXRjaChnZXR0ZXIsIGNiLmJpbmQocHVibGljVGhpcyksIG9wdGlvbnMsIHRoaXMpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XHJcbiAgICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGN1ciA9IGN0eDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xyXG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWx1ZSwgc2VlbiA9IG5ldyBTZXQoKSkge1xyXG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHxcclxuICAgICAgICBzZWVuLmhhcyh2YWx1ZSkgfHxcclxuICAgICAgICB2YWx1ZVtcIl9fdl9za2lwXCIgLyogU0tJUCAqL10pIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZWVuLmFkZCh2YWx1ZSk7XHJcbiAgICBpZiAoaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgdHJhdmVyc2UodmFsdWUudmFsdWUsIHNlZW4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyYXZlcnNlKHZhbHVlW2ldLCBzZWVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1NldCh2YWx1ZSkgfHwgaXNNYXAodmFsdWUpKSB7XHJcbiAgICAgICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2LCBzZWVuKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgc2Vlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XG5cbmZ1bmN0aW9uIHVzZVRyYW5zaXRpb25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IHN0YXRlID0ge1xyXG4gICAgICAgIGlzTW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNMZWF2aW5nOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRpbmc6IGZhbHNlLFxyXG4gICAgICAgIGxlYXZpbmdWTm9kZXM6IG5ldyBNYXAoKVxyXG4gICAgfTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc1VubW91bnRpbmcgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc3RhdGU7XHJcbn1cclxuY29uc3QgVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IgPSBbRnVuY3Rpb24sIEFycmF5XTtcclxuY29uc3QgQmFzZVRyYW5zaXRpb25JbXBsID0ge1xyXG4gICAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbW9kZTogU3RyaW5nLFxyXG4gICAgICAgIGFwcGVhcjogQm9vbGVhbixcclxuICAgICAgICBwZXJzaXN0ZWQ6IEJvb2xlYW4sXHJcbiAgICAgICAgLy8gZW50ZXJcclxuICAgICAgICBvbkJlZm9yZUVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkVudGVyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGxlYXZlXHJcbiAgICAgICAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25MZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICAvLyBhcHBlYXJcclxuICAgICAgICBvbkJlZm9yZUFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJBcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQXBwZWFyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvclxyXG4gICAgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XHJcbiAgICAgICAgbGV0IHByZXZUcmFuc2l0aW9uS2V5O1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCAmJiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpLCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQgb3IgY29tcG9uZW50LiBVc2UgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIHRyYWNrIHJlYWN0aXZpdHkgZm9yIHRoZXNlIHByb3BzIHNvIHVzZSB0aGUgcmF3XHJcbiAgICAgICAgICAgIC8vIHByb3BzIGZvciBhIGJpdCBiZXR0ZXIgcGVyZlxyXG4gICAgICAgICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcclxuICAgICAgICAgICAgLy8gY2hlY2sgbW9kZVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1vZGUgJiYgIVsnaW4tb3V0JywgJ291dC1pbicsICdkZWZhdWx0J10uaW5jbHVkZXMobW9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYGludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICR7bW9kZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50IGNoaWxkcmVuIGhhcyBhIGd1YXJhbnRlZWQgbGVuZ3RoIG9mIDEuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc0xlYXZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiA8dHJhbnNpdGlvbj48a2VlcC1hbGl2ZS8+PC90cmFuc2l0aW9uPiwgd2UgbmVlZCB0b1xyXG4gICAgICAgICAgICAvLyBjb21wYXJlIHRoZSB0eXBlIG9mIHRoZSBrZXB0LWFsaXZlIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBjb25zdCBpbm5lckNoaWxkID0gZ2V0S2VlcEFsaXZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoIWlubmVyQ2hpbGQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbXB0eVBsYWNlaG9sZGVyKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlbnRlckhvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhpbm5lckNoaWxkLCByYXdQcm9wcywgc3RhdGUsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIGVudGVySG9va3MpO1xyXG4gICAgICAgICAgICBjb25zdCBvbGRDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWU7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZElubmVyQ2hpbGQgPSBvbGRDaGlsZCAmJiBnZXRLZWVwQWxpdmVDaGlsZChvbGRDaGlsZCk7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCB7IGdldFRyYW5zaXRpb25LZXkgfSA9IGlubmVyQ2hpbGQudHlwZTtcclxuICAgICAgICAgICAgaWYgKGdldFRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGdldFRyYW5zaXRpb25LZXkoKTtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2VHJhbnNpdGlvbktleSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09IHByZXZUcmFuc2l0aW9uS2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldlRyYW5zaXRpb25LZXkgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbktleUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtb2RlXHJcbiAgICAgICAgICAgIGlmIChvbGRJbm5lckNoaWxkICYmXHJcbiAgICAgICAgICAgICAgICBvbGRJbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQkMSAmJlxyXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9sZCB0cmVlJ3MgaG9va3MgaW4gY2FzZSBvZiBkeW5hbWljIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHZpZXdzXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0JyAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQkMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5kZWxheUxlYXZlID0gKGVsLCBlYXJseVJlbW92ZSwgZGVsYXllZExlYXZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIG9sZElubmVyQ2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlYXJseSByZW1vdmFsIGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFybHlSZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVudGVySG9va3MuZGVsYXllZExlYXZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZSA9IGRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XHJcbmZ1bmN0aW9uIGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKSB7XHJcbiAgICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xyXG4gICAgbGV0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGxlYXZpbmdWTm9kZXMuZ2V0KHZub2RlLnR5cGUpO1xyXG4gICAgaWYgKCFsZWF2aW5nVk5vZGVzQ2FjaGUpIHtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIGxlYXZpbmdWTm9kZXMuc2V0KHZub2RlLnR5cGUsIGxlYXZpbmdWTm9kZXNDYWNoZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xyXG59XHJcbi8vIFRoZSB0cmFuc2l0aW9uIGhvb2tzIGFyZSBhdHRhY2hlZCB0byB0aGUgdm5vZGUgYXMgdm5vZGUudHJhbnNpdGlvblxyXG4vLyBhbmQgd2lsbCBiZSBjYWxsZWQgYXQgYXBwcm9wcmlhdGUgdGltaW5nIGluIHRoZSByZW5kZXJlci5cclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBhcHBlYXIsIG1vZGUsIHBlcnNpc3RlZCA9IGZhbHNlLCBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkFmdGVyRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uQmVmb3JlTGVhdmUsIG9uTGVhdmUsIG9uQWZ0ZXJMZWF2ZSwgb25MZWF2ZUNhbmNlbGxlZCwgb25CZWZvcmVBcHBlYXIsIG9uQXBwZWFyLCBvbkFmdGVyQXBwZWFyLCBvbkFwcGVhckNhbmNlbGxlZCB9ID0gcHJvcHM7XHJcbiAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgIGNvbnN0IGxlYXZpbmdWTm9kZXNDYWNoZSA9IGdldExlYXZpbmdOb2Rlc0ZvclR5cGUoc3RhdGUsIHZub2RlKTtcclxuICAgIGNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MpID0+IHtcclxuICAgICAgICBob29rICYmXHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA5IC8qIFRSQU5TSVRJT05fSE9PSyAqLywgYXJncyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaG9va3MgPSB7XHJcbiAgICAgICAgbW9kZSxcclxuICAgICAgICBwZXJzaXN0ZWQsXHJcbiAgICAgICAgYmVmb3JlRW50ZXIoZWwpIHtcclxuICAgICAgICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciBzYW1lIGVsZW1lbnQgKHYtc2hvdylcclxuICAgICAgICAgICAgaWYgKGVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZm9yIHRvZ2dsZWQgZWxlbWVudCB3aXRoIHNhbWUga2V5ICh2LWlmKVxyXG4gICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGUgPSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJlxyXG4gICAgICAgICAgICAgICAgaXNTYW1lVk5vZGVUeXBlKHZub2RlLCBsZWF2aW5nVk5vZGUpICYmXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGVhcmx5IHJlbW92YWwgKG5vdCBjYW5jZWxsZWQpXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nVk5vZGUuZWwuX2xlYXZlQ2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYWxsSG9vayhob29rLCBbZWxdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25FbnRlcjtcclxuICAgICAgICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgbGV0IGNhbmNlbEhvb2sgPSBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFwcGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2sgPSBvbkFwcGVhciB8fCBvbkVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySG9vayA9IG9uQWZ0ZXJBcHBlYXIgfHwgb25BZnRlckVudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEhvb2sgPSBvbkFwcGVhckNhbmNlbGxlZCB8fCBvbkVudGVyQ2FuY2VsbGVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fZW50ZXJDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKGFmdGVySG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9va3MuZGVsYXllZExlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9va3MuZGVsYXllZExlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChob29rKSB7XHJcbiAgICAgICAgICAgICAgICBob29rKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IFN0cmluZyh2bm9kZS5rZXkpO1xyXG4gICAgICAgICAgICBpZiAoZWwuX2VudGVyQ2IpIHtcclxuICAgICAgICAgICAgICAgIGVsLl9lbnRlckNiKHRydWUgLyogY2FuY2VsbGVkICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNVbm1vdW50aW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZG9uZSA9IChlbC5fbGVhdmVDYiA9IChjYW5jZWxsZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2sob25BZnRlckxlYXZlLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsLl9sZWF2ZUNiID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID09PSB2bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldID0gdm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChvbkxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICBvbkxlYXZlKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgICAgIGlmIChvbkxlYXZlLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjbG9uZSh2bm9kZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBob29rcztcclxufVxyXG4vLyB0aGUgcGxhY2Vob2xkZXIgcmVhbGx5IG9ubHkgaGFuZGxlcyBvbmUgc3BlY2lhbCBjYXNlOiBLZWVwQWxpdmVcclxuLy8gaW4gdGhlIGNhc2Ugb2YgYSBLZWVwQWxpdmUgaW4gYSBsZWF2ZSBwaGFzZSB3ZSBuZWVkIHRvIHJldHVybiBhIEtlZXBBbGl2ZVxyXG4vLyBwbGFjZWhvbGRlciB3aXRoIGVtcHR5IGNvbnRlbnQgdG8gYXZvaWQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBmcm9tIGJlaW5nXHJcbi8vIHVubW91bnRlZC5cclxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xyXG4gICAgaWYgKGlzS2VlcEFsaXZlKHZub2RlKSkge1xyXG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRLZWVwQWxpdmVDaGlsZCh2bm9kZSkge1xyXG4gICAgcmV0dXJuIGlzS2VlcEFsaXZlKHZub2RlKVxyXG4gICAgICAgID8gdm5vZGUuY2hpbGRyZW5cclxuICAgICAgICAgICAgPyB2bm9kZS5jaGlsZHJlblswXVxyXG4gICAgICAgICAgICA6IHVuZGVmaW5lZFxyXG4gICAgICAgIDogdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCBob29rcykge1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovICYmIHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgaG9va3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgdm5vZGUuc3NDb250ZW50LnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0NvbnRlbnQpO1xyXG4gICAgICAgIHZub2RlLnNzRmFsbGJhY2sudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzRmFsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZHJlbiwga2VlcENvbW1lbnQgPSBmYWxzZSkge1xyXG4gICAgbGV0IHJldCA9IFtdO1xyXG4gICAgbGV0IGtleWVkRnJhZ21lbnRDb3VudCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAvLyBoYW5kbGUgZnJhZ21lbnQgY2hpbGRyZW4gY2FzZSwgZS5nLiB2LWZvclxyXG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQucGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKVxyXG4gICAgICAgICAgICAgICAga2V5ZWRGcmFnbWVudENvdW50Kys7XHJcbiAgICAgICAgICAgIHJldCA9IHJldC5jb25jYXQoZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKGNoaWxkLmNoaWxkcmVuLCBrZWVwQ29tbWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb21tZW50IHBsYWNlaG9sZGVycyBzaG91bGQgYmUgc2tpcHBlZCwgZS5nLiB2LWlmXHJcbiAgICAgICAgZWxzZSBpZiAoa2VlcENvbW1lbnQgfHwgY2hpbGQudHlwZSAhPT0gQ29tbWVudCQxKSB7XHJcbiAgICAgICAgICAgIHJldC5wdXNoKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAjMTEyNiBpZiBhIHRyYW5zaXRpb24gY2hpbGRyZW4gbGlzdCBjb250YWlucyBtdWx0aXBsZSBzdWIgZnJhZ21lbnRzLCB0aGVzZVxyXG4gICAgLy8gZnJhZ21lbnRzIHdpbGwgYmUgbWVyZ2VkIGludG8gYSBmbGF0IGNoaWxkcmVuIGFycmF5LiBTaW5jZSBlYWNoIHYtZm9yXHJcbiAgICAvLyBmcmFnbWVudCBtYXkgY29udGFpbiBkaWZmZXJlbnQgc3RhdGljIGJpbmRpbmdzIGluc2lkZSwgd2UgbmVlZCB0byBkZS1vcFxyXG4gICAgLy8gdGhlc2UgY2hpbGRyZW4gdG8gZm9yY2UgZnVsbCBkaWZmcyB0byBlbnN1cmUgY29ycmVjdCBiZWhhdmlvci5cclxuICAgIGlmIChrZXllZEZyYWdtZW50Q291bnQgPiAxKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yIC8qIEJBSUwgKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vLyBpbXBsZW1lbnRhdGlvbiwgY2xvc2UgdG8gbm8tb3BcclxuZnVuY3Rpb24gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8geyBzZXR1cDogb3B0aW9ucywgbmFtZTogb3B0aW9ucy5uYW1lIH0gOiBvcHRpb25zO1xyXG59XG5cbmNvbnN0IGlzQXN5bmNXcmFwcGVyID0gKGkpID0+ICEhaS50eXBlLl9fYXN5bmNMb2FkZXI7XHJcbmZ1bmN0aW9uIGRlZmluZUFzeW5jQ29tcG9uZW50KHNvdXJjZSkge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xyXG4gICAgICAgIHNvdXJjZSA9IHsgbG9hZGVyOiBzb3VyY2UgfTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbG9hZGVyLCBsb2FkaW5nQ29tcG9uZW50LCBlcnJvckNvbXBvbmVudCwgZGVsYXkgPSAyMDAsIHRpbWVvdXQsIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxyXG4gICAgc3VzcGVuc2libGUgPSB0cnVlLCBvbkVycm9yOiB1c2VyT25FcnJvciB9ID0gc291cmNlO1xyXG4gICAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcclxuICAgIGxldCByZXNvbHZlZENvbXA7XHJcbiAgICBsZXQgcmV0cmllcyA9IDA7XHJcbiAgICBjb25zdCByZXRyeSA9ICgpID0+IHtcclxuICAgICAgICByZXRyaWVzKys7XHJcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgIHJldHVybiBsb2FkKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICBsZXQgdGhpc1JlcXVlc3Q7XHJcbiAgICAgICAgcmV0dXJuIChwZW5kaW5nUmVxdWVzdCB8fFxyXG4gICAgICAgICAgICAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9IGxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJSZXRyeSA9ICgpID0+IHJlc29sdmUocmV0cnkoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJGYWlsID0gKCkgPT4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGNvbXApID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzUmVxdWVzdCAhPT0gcGVuZGluZ1JlcXVlc3QgJiYgcGVuZGluZ1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXN5bmMgY29tcG9uZW50IGxvYWRlciByZXNvbHZlZCB0byB1bmRlZmluZWQuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IGFyZSB1c2luZyByZXRyeSgpLCBtYWtlIHN1cmUgdG8gcmV0dXJuIGl0cyByZXR1cm4gdmFsdWUuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRlcm9wIG1vZHVsZSBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhc3luYyBjb21wb25lbnQgbG9hZCByZXN1bHQ6ICR7Y29tcH1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmVkQ29tcCA9IGNvbXA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICAgICAgfSkpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcclxuICAgICAgICBuYW1lOiAnQXN5bmNDb21wb25lbnRXcmFwcGVyJyxcclxuICAgICAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxyXG4gICAgICAgIGdldCBfX2FzeW5jUmVzb2x2ZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZENvbXA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXR1cCgpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICAgICAgICAgIC8vIGFscmVhZHkgcmVzb2x2ZWRcclxuICAgICAgICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvbkVycm9yID0gKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgMTMgLyogQVNZTkNfQ09NUE9ORU5UX0xPQURFUiAqLywgIWVycm9yQ29tcG9uZW50IC8qIGRvIG5vdCB0aHJvdyBpbiBkZXYgaWYgdXNlciBwcm92aWRlZCBlcnJvciBjb21wb25lbnQgKi8pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBzdXNwZW5zZS1jb250cm9sbGVkIG9yIFNTUi5cclxuICAgICAgICAgICAgaWYgKChzdXNwZW5zaWJsZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSkgfHxcclxuICAgICAgICAgICAgICAgIChmYWxzZSApKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oY29tcCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGNyZWF0ZUlubmVyQ29tcChjb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheWVkID0gcmVmKCEhZGVsYXkpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQudmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvYWRlZC52YWx1ZSAmJiAhZXJyb3IudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2FkKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50ICYmIGlzS2VlcEFsaXZlKGluc3RhbmNlLnBhcmVudC52bm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgaXMga2VlcC1hbGl2ZSwgZm9yY2UgdXBkYXRlIHNvIHRoZSBsb2FkZWQgY29tcG9uZW50J3NcclxuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lIGlzIHRha2VuIGludG8gYWNjb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlSm9iKGluc3RhbmNlLnBhcmVudC51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICBlcnJvci52YWx1ZSA9IGVycjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvci52YWx1ZSAmJiBlcnJvckNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxvYWRpbmdDb21wb25lbnQgJiYgIWRlbGF5ZWQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW5uZXJDb21wKGNvbXAsIHsgdm5vZGU6IHsgcmVmLCBwcm9wcywgY2hpbGRyZW4gfSB9KSB7XHJcbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKGNvbXAsIHByb3BzLCBjaGlsZHJlbik7XHJcbiAgICAvLyBlbnN1cmUgaW5uZXIgY29tcG9uZW50IGluaGVyaXRzIHRoZSBhc3luYyB3cmFwcGVyJ3MgcmVmIG93bmVyXHJcbiAgICB2bm9kZS5yZWYgPSByZWY7XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cblxuY29uc3QgaXNLZWVwQWxpdmUgPSAodm5vZGUpID0+IHZub2RlLnR5cGUuX19pc0tlZXBBbGl2ZTtcclxuY29uc3QgS2VlcEFsaXZlSW1wbCA9IHtcclxuICAgIG5hbWU6IGBLZWVwQWxpdmVgLFxyXG4gICAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cclxuICAgIC8vIGNoZWNrIGRpcmVjdGx5IG9uIEtlZXBBbGl2ZSBpbiB0aGUgcmVuZGVyZXIsIGJlY2F1c2UgaW1wb3J0aW5nIGl0IGRpcmVjdGx5XHJcbiAgICAvLyB3b3VsZCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgdHJlZS1zaGFrZW4uXHJcbiAgICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBpbmNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBleGNsdWRlOiBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XSxcclxuICAgICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cclxuICAgIH0sXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICAvLyBLZWVwQWxpdmUgY29tbXVuaWNhdGVzIHdpdGggdGhlIGluc3RhbnRpYXRlZCByZW5kZXJlciB2aWEgdGhlXHJcbiAgICAgICAgLy8gY3R4IHdoZXJlIHRoZSByZW5kZXJlciBwYXNzZXMgaW4gaXRzIGludGVybmFscyxcclxuICAgICAgICAvLyBhbmQgdGhlIEtlZXBBbGl2ZSBpbnN0YW5jZSBleHBvc2VzIGFjdGl2YXRlL2RlYWN0aXZhdGUgaW1wbGVtZW50YXRpb25zLlxyXG4gICAgICAgIC8vIFRoZSB3aG9sZSBwb2ludCBvZiB0aGlzIGlzIHRvIGF2b2lkIGltcG9ydGluZyBLZWVwQWxpdmUgZGlyZWN0bHkgaW4gdGhlXHJcbiAgICAgICAgLy8gcmVuZGVyZXIgdG8gZmFjaWxpdGF0ZSB0cmVlLXNoYWtpbmcuXHJcbiAgICAgICAgY29uc3Qgc2hhcmVkQ29udGV4dCA9IGluc3RhbmNlLmN0eDtcclxuICAgICAgICAvLyBpZiB0aGUgaW50ZXJuYWwgcmVuZGVyZXIgaXMgbm90IHJlZ2lzdGVyZWQsIGl0IGluZGljYXRlcyB0aGF0IHRoaXMgaXMgc2VydmVyLXNpZGUgcmVuZGVyaW5nLFxyXG4gICAgICAgIC8vIGZvciBLZWVwQWxpdmUsIHdlIGp1c3QgbmVlZCB0byByZW5kZXIgaXRzIGNoaWxkcmVuXHJcbiAgICAgICAgaWYgKCFzaGFyZWRDb250ZXh0LnJlbmRlcmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzbG90cy5kZWZhdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjYWNoZSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5fX3ZfY2FjaGUgPSBjYWNoZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyZW50U3VzcGVuc2UgPSBpbnN0YW5jZS5zdXNwZW5zZTtcclxuICAgICAgICBjb25zdCB7IHJlbmRlcmVyOiB7IHA6IHBhdGNoLCBtOiBtb3ZlLCB1bTogX3VubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gfSA9IHNoYXJlZENvbnRleHQ7XHJcbiAgICAgICAgY29uc3Qgc3RvcmFnZUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHNoYXJlZENvbnRleHQuYWN0aXZhdGUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBtb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLywgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAvLyBpbiBjYXNlIHByb3BzIGhhdmUgY2hhbmdlZFxyXG4gICAgICAgICAgICBwYXRjaChpbnN0YW5jZS52bm9kZSwgdm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCB2bm9kZS5zbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjb21wb25lbnRzIHRyZWVcclxuICAgICAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBzaGFyZWRDb250ZXh0LmRlYWN0aXZhdGUgPSAodm5vZGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEgLyogTEVBVkUgKi8sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5kYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGluc3RhbmNlLmRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGVIb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UucGFyZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudHMgdHJlZVxyXG4gICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHVubW91bnQodm5vZGUpIHtcclxuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHNoYXBlRmxhZyBzbyBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkXHJcbiAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcclxuICAgICAgICAgICAgX3VubW91bnQodm5vZGUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGUoZmlsdGVyKSB7XHJcbiAgICAgICAgICAgIGNhY2hlLmZvckVhY2goKHZub2RlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHZub2RlLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgJiYgKCFmaWx0ZXIgfHwgIWZpbHRlcihuYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeShrZXkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudCB8fCBjYWNoZWQudHlwZSAhPT0gY3VycmVudC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgaW5zdGFuY2Ugc2hvdWxkIG5vIGxvbmdlciBiZSBrZXB0LWFsaXZlLlxyXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdW5tb3VudCBpdCBub3cgYnV0IGl0IG1pZ2h0IGJlIGxhdGVyLCBzbyByZXNldCBpdHMgZmxhZyBub3cuXHJcbiAgICAgICAgICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYWNoZS5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAga2V5cy5kZWxldGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJ1bmUgY2FjaGUgb24gaW5jbHVkZS9leGNsdWRlIHByb3AgY2hhbmdlXHJcbiAgICAgICAgd2F0Y2goKCkgPT4gW3Byb3BzLmluY2x1ZGUsIHByb3BzLmV4Y2x1ZGVdLCAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XHJcbiAgICAgICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+IG1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpO1xyXG4gICAgICAgICAgICBleGNsdWRlICYmIHBydW5lQ2FjaGUobmFtZSA9PiAhbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSk7XHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgLy8gcHJ1bmUgcG9zdC1yZW5kZXIgYWZ0ZXIgYGN1cnJlbnRgIGhhcyBiZWVuIHVwZGF0ZWRcclxuICAgICAgICB7IGZsdXNoOiAncG9zdCcsIGRlZXA6IHRydWUgfSk7XHJcbiAgICAgICAgLy8gY2FjaGUgc3ViIHRyZWUgYWZ0ZXIgcmVuZGVyXHJcbiAgICAgICAgbGV0IHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgY2FjaGVTdWJ0cmVlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBmaXggIzE2MjEsIHRoZSBwZW5kaW5nQ2FjaGVLZXkgY291bGQgYmUgMFxyXG4gICAgICAgICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnNldChwZW5kaW5nQ2FjaGVLZXksIGdldElubmVyQ2hpbGQoaW5zdGFuY2Uuc3ViVHJlZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBvbk1vdW50ZWQoY2FjaGVTdWJ0cmVlKTtcclxuICAgICAgICBvblVwZGF0ZWQoY2FjaGVTdWJ0cmVlKTtcclxuICAgICAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjYWNoZS5mb3JFYWNoKGNhY2hlZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHN1YlRyZWUsIHN1c3BlbnNlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChzdWJUcmVlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWQudHlwZSA9PT0gdm5vZGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgaW5zdGFuY2Ugd2lsbCBiZSB1bm1vdW50ZWQgYXMgcGFydCBvZiBrZWVwLWFsaXZlJ3MgdW5tb3VudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaW52b2tlIGl0cyBkZWFjdGl2YXRlZCBob29rIGhlcmVcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYSA9IHZub2RlLmNvbXBvbmVudC5kYTtcclxuICAgICAgICAgICAgICAgICAgICBkYSAmJiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZGEsIHN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNhY2hlZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghc2xvdHMuZGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1ZOb2RlID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgS2VlcEFsaXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIGNvbXBvbmVudCBjaGlsZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc1ZOb2RlKHJhd1ZOb2RlKSB8fFxyXG4gICAgICAgICAgICAgICAgKCEocmF3Vk5vZGUuc2hhcGVGbGFnICYgNCAvKiBTVEFURUZVTF9DT01QT05FTlQgKi8pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChyYXdWTm9kZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xyXG4gICAgICAgICAgICAvLyBmb3IgYXN5bmMgY29tcG9uZW50cywgbmFtZSBjaGVjayBzaG91bGQgYmUgYmFzZWQgaW4gaXRzIGxvYWRlZFxyXG4gICAgICAgICAgICAvLyBpbm5lciBjb21wb25lbnQgaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGlzQXN5bmNXcmFwcGVyKHZub2RlKVxyXG4gICAgICAgICAgICAgICAgPyB2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCB8fCB7fVxyXG4gICAgICAgICAgICAgICAgOiBjb21wKTtcclxuICAgICAgICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xyXG4gICAgICAgICAgICBpZiAoKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcclxuICAgICAgICAgICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZFZOb2RlID0gY2FjaGUuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIC8vIGNsb25lIHZub2RlIGlmIGl0J3MgcmV1c2VkIGJlY2F1c2Ugd2UgYXJlIGdvaW5nIHRvIG11dGF0ZSBpdFxyXG4gICAgICAgICAgICBpZiAodm5vZGUuZWwpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmF3Vk5vZGUuc3NDb250ZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gIzE1MTMgaXQncyBwb3NzaWJsZSBmb3IgdGhlIHJldHVybmVkIHZub2RlIHRvIGJlIGNsb25lZCBkdWUgdG8gYXR0clxyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBvciBzY29wZUlkLCBzbyB0aGUgdm5vZGUgaGVyZSBtYXkgbm90IGJlIHRoZSBmaW5hbCB2bm9kZVxyXG4gICAgICAgICAgICAvLyB0aGF0IGlzIG1vdW50ZWQuIEluc3RlYWQgb2YgY2FjaGluZyBpdCBkaXJlY3RseSwgd2Ugc3RvcmUgdGhlIHBlbmRpbmdcclxuICAgICAgICAgICAgLy8ga2V5IGFuZCBjYWNoZSBgaW5zdGFuY2Uuc3ViVHJlZWAgKHRoZSBub3JtYWxpemVkIHZub2RlKSBpblxyXG4gICAgICAgICAgICAvLyBiZWZvcmVNb3VudC9iZWZvcmVVcGRhdGUgaG9va3MuXHJcbiAgICAgICAgICAgIHBlbmRpbmdDYWNoZUtleSA9IGtleTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb3B5IG92ZXIgbW91bnRlZCBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBjYWNoZWRWTm9kZS5lbDtcclxuICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRyYW5zaXRpb24gaG9va3Mgb24gc3ViVHJlZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgdm5vZGUudHJhbnNpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhdm9pZCB2bm9kZSBiZWluZyBtb3VudGVkIGFzIGZyZXNoXHJcbiAgICAgICAgICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovO1xyXG4gICAgICAgICAgICAgICAgLy8gbWFrZSB0aGlzIGtleSB0aGUgZnJlc2hlc3RcclxuICAgICAgICAgICAgICAgIGtleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAga2V5cy5hZGQoa2V5KTtcclxuICAgICAgICAgICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxyXG4gICAgICAgICAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXlzLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYXZvaWQgdm5vZGUgYmVpbmcgdW5tb3VudGVkXHJcbiAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovO1xyXG4gICAgICAgICAgICBjdXJyZW50ID0gdm5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4vLyBleHBvcnQgdGhlIHB1YmxpYyB0eXBlIGZvciBoL3RzeCBpbmZlcmVuY2VcclxuLy8gYWxzbyB0byBhdm9pZCBpbmxpbmUgaW1wb3J0KCkgaW4gZ2VuZXJhdGVkIGQudHMgZmlsZXNcclxuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcclxuZnVuY3Rpb24gbWF0Y2hlcyhwYXR0ZXJuLCBuYW1lKSB7XHJcbiAgICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTdHJpbmcocGF0dGVybikpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHBhdHRlcm4udGVzdCkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG9uQWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xyXG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiYVwiIC8qIEFDVElWQVRFRCAqLywgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiBvbkRlYWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xyXG4gICAgcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIFwiZGFcIiAvKiBERUFDVElWQVRFRCAqLywgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgdHlwZSwgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAvLyBjYWNoZSB0aGUgZGVhY3RpdmF0ZSBicmFuY2ggY2hlY2sgd3JhcHBlciBmb3IgaW5qZWN0ZWQgaG9va3Mgc28gdGhlIHNhbWVcclxuICAgIC8vIGhvb2sgY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dkY1wiIHN0YW5kcyBmb3IgXCJ3aXRoXHJcbiAgICAvLyBkZWFjdGl2YXRpb24gY2hlY2tcIi5cclxuICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dkYyB8fFxyXG4gICAgICAgIChob29rLl9fd2RjID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBvbmx5IGZpcmUgdGhlIGhvb2sgaWYgdGhlIHRhcmdldCBpbnN0YW5jZSBpcyBOT1QgaW4gYSBkZWFjdGl2YXRlZCBicmFuY2guXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQuaXNEZWFjdGl2YXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBob29rKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xyXG4gICAgLy8gSW4gYWRkaXRpb24gdG8gcmVnaXN0ZXJpbmcgaXQgb24gdGhlIHRhcmdldCBpbnN0YW5jZSwgd2Ugd2FsayB1cCB0aGUgcGFyZW50XHJcbiAgICAvLyBjaGFpbiBhbmQgcmVnaXN0ZXIgaXQgb24gYWxsIGFuY2VzdG9yIGluc3RhbmNlcyB0aGF0IGFyZSBrZWVwLWFsaXZlIHJvb3RzLlxyXG4gICAgLy8gVGhpcyBhdm9pZHMgdGhlIG5lZWQgdG8gd2FsayB0aGUgZW50aXJlIGNvbXBvbmVudCB0cmVlIHdoZW4gaW52b2tpbmcgdGhlc2VcclxuICAgIC8vIGhvb2tzLCBhbmQgbW9yZSBpbXBvcnRhbnRseSwgYXZvaWRzIHRoZSBuZWVkIHRvIHRyYWNrIGNoaWxkIGNvbXBvbmVudHMgaW5cclxuICAgIC8vIGFycmF5cy5cclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldC5wYXJlbnQ7XHJcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaW5qZWN0VG9LZWVwQWxpdmVSb290KHdyYXBwZWRIb29rLCB0eXBlLCB0YXJnZXQsIGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5qZWN0VG9LZWVwQWxpdmVSb290KGhvb2ssIHR5cGUsIHRhcmdldCwga2VlcEFsaXZlUm9vdCkge1xyXG4gICAgLy8gaW5qZWN0SG9vayB3cmFwcyB0aGUgb3JpZ2luYWwgZm9yIGVycm9yIGhhbmRsaW5nLCBzbyBtYWtlIHN1cmUgdG8gcmVtb3ZlXHJcbiAgICAvLyB0aGUgd3JhcHBlZCB2ZXJzaW9uLlxyXG4gICAgY29uc3QgaW5qZWN0ZWQgPSBpbmplY3RIb29rKHR5cGUsIGhvb2ssIGtlZXBBbGl2ZVJvb3QsIHRydWUgLyogcHJlcGVuZCAqLyk7XHJcbiAgICBvblVubW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcclxuICAgIH0sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcclxuICAgIGxldCBzaGFwZUZsYWcgPSB2bm9kZS5zaGFwZUZsYWc7XHJcbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xyXG4gICAgICAgIHNoYXBlRmxhZyAtPSAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovO1xyXG4gICAgfVxyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLykge1xyXG4gICAgICAgIHNoYXBlRmxhZyAtPSA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XHJcbiAgICB9XHJcbiAgICB2bm9kZS5zaGFwZUZsYWcgPSBzaGFwZUZsYWc7XHJcbn1cclxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xyXG4gICAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLyA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xyXG59XG5cbmZ1bmN0aW9uIGluamVjdEhvb2sodHlwZSwgaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlLCBwcmVwZW5kID0gZmFsc2UpIHtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xyXG4gICAgICAgIC8vIGNhY2hlIHRoZSBlcnJvciBoYW5kbGluZyB3cmFwcGVyIGZvciBpbmplY3RlZCBob29rcyBzbyB0aGUgc2FtZSBob29rXHJcbiAgICAgICAgLy8gY2FuIGJlIHByb3Blcmx5IGRlZHVwZWQgYnkgdGhlIHNjaGVkdWxlci4gXCJfX3dlaFwiIHN0YW5kcyBmb3IgXCJ3aXRoIGVycm9yXHJcbiAgICAgICAgLy8gaGFuZGxpbmdcIi5cclxuICAgICAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZWggfHxcclxuICAgICAgICAgICAgKGhvb2suX193ZWggPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgdHJhY2tpbmcgaW5zaWRlIGFsbCBsaWZlY3ljbGUgaG9va3NcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgY2FuIHBvdGVudGlhbGx5IGJlIGNhbGxlZCBpbnNpZGUgZWZmZWN0cy5cclxuICAgICAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIC8vIFNldCBjdXJyZW50SW5zdGFuY2UgZHVyaW5nIGhvb2sgaW52b2NhdGlvbi5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgYXNzdW1lcyB0aGUgaG9vayBkb2VzIG5vdCBzeW5jaHJvbm91c2x5IHRyaWdnZXIgb3RoZXIgaG9va3MsIHdoaWNoXHJcbiAgICAgICAgICAgICAgICAvLyBjYW4gb25seSBiZSBmYWxzZSB3aGVuIHRoZSB1c2VyIGRvZXMgc29tZXRoaW5nIHJlYWxseSBmdW5reS5cclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgdGFyZ2V0LCB0eXBlLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwcmVwZW5kKSB7XHJcbiAgICAgICAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3cmFwcGVkSG9vaztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGFwaU5hbWUgPSB0b0hhbmRsZXJLZXkoRXJyb3JUeXBlU3RyaW5nc1t0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCAnJykpO1xyXG4gICAgICAgIHdhcm4oYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBgICtcclxuICAgICAgICAgICAgYGFzc29jaWF0ZWQgd2l0aC4gYCArXHJcbiAgICAgICAgICAgIGBMaWZlY3ljbGUgaW5qZWN0aW9uIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgZXhlY3V0aW9uIG9mIHNldHVwKCkuYCArXHJcbiAgICAgICAgICAgIChgIElmIHlvdSBhcmUgdXNpbmcgYXN5bmMgc2V0dXAoKSwgbWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGxpZmVjeWNsZSBgICtcclxuICAgICAgICAgICAgICAgICAgICBgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYFxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgY3JlYXRlSG9vayA9IChsaWZlY3ljbGUpID0+IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IFxyXG4vLyBwb3N0LWNyZWF0ZSBsaWZlY3ljbGUgcmVnaXN0cmF0aW9ucyBhcmUgbm9vcHMgZHVyaW5nIFNTUiAoZXhjZXB0IGZvciBzZXJ2ZXJQcmVmZXRjaClcclxuKCFpc0luU1NSQ29tcG9uZW50U2V0dXAgfHwgbGlmZWN5Y2xlID09PSBcInNwXCIgLyogU0VSVkVSX1BSRUZFVENIICovKSAmJlxyXG4gICAgaW5qZWN0SG9vayhsaWZlY3ljbGUsIGhvb2ssIHRhcmdldCk7XHJcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi8pO1xyXG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiIC8qIE1PVU5URUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi8pO1xyXG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIFVQREFURUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFwiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi8pO1xyXG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiIC8qIFVOTU9VTlRFRCAqLyk7XHJcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFwic3BcIiAvKiBTRVJWRVJfUFJFRkVUQ0ggKi8pO1xyXG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIiAvKiBSRU5ERVJfVFJJR0dFUkVEICovKTtcclxuY29uc3Qgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlSG9vayhcInJ0Y1wiIC8qIFJFTkRFUl9UUkFDS0VEICovKTtcclxuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgaW5qZWN0SG9vayhcImVjXCIgLyogRVJST1JfQ0FQVFVSRUQgKi8sIGhvb2ssIHRhcmdldCk7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcclxuICAgICAgICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5sZXQgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xyXG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSk7XHJcbiAgICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XHJcbiAgICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XHJcbiAgICAvLyBkbyBub3QgY2FjaGUgcHJvcGVydHkgYWNjZXNzIG9uIHB1YmxpYyBwcm94eSBkdXJpbmcgc3RhdGUgaW5pdGlhbGl6YXRpb25cclxuICAgIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XHJcbiAgICAvLyBjYWxsIGJlZm9yZUNyZWF0ZSBmaXJzdCBiZWZvcmUgYWNjZXNzaW5nIG90aGVyIG9wdGlvbnMgc2luY2VcclxuICAgIC8vIHRoZSBob29rIG1heSBtdXRhdGUgcmVzb2x2ZWQgb3B0aW9ucyAoIzI3OTEpXHJcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVDcmVhdGUpIHtcclxuICAgICAgICBjYWxsSG9vayhvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgXHJcbiAgICAvLyBzdGF0ZVxyXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsIGNvbXB1dGVkOiBjb21wdXRlZE9wdGlvbnMsIG1ldGhvZHMsIHdhdGNoOiB3YXRjaE9wdGlvbnMsIHByb3ZpZGU6IHByb3ZpZGVPcHRpb25zLCBpbmplY3Q6IGluamVjdE9wdGlvbnMsIFxyXG4gICAgLy8gbGlmZWN5Y2xlXHJcbiAgICBjcmVhdGVkLCBiZWZvcmVNb3VudCwgbW91bnRlZCwgYmVmb3JlVXBkYXRlLCB1cGRhdGVkLCBhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkLCBiZWZvcmVEZXN0cm95LCBiZWZvcmVVbm1vdW50LCBkZXN0cm95ZWQsIHVubW91bnRlZCwgcmVuZGVyLCByZW5kZXJUcmFja2VkLCByZW5kZXJUcmlnZ2VyZWQsIGVycm9yQ2FwdHVyZWQsIHNlcnZlclByZWZldGNoLCBcclxuICAgIC8vIHB1YmxpYyBBUElcclxuICAgIGV4cG9zZSwgaW5oZXJpdEF0dHJzLCBcclxuICAgIC8vIGFzc2V0c1xyXG4gICAgY29tcG9uZW50cywgZGlyZWN0aXZlcywgZmlsdGVycyB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxyXG4gICAgLy8gLSBwcm9wcyAoYWxyZWFkeSBkb25lIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbilcclxuICAgIC8vIC0gaW5qZWN0XHJcbiAgICAvLyAtIG1ldGhvZHNcclxuICAgIC8vIC0gZGF0YSAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXHJcbiAgICAvLyAtIGNvbXB1dGVkXHJcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcclxuICAgIGlmIChpbmplY3RPcHRpb25zKSB7XHJcbiAgICAgICAgcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1ldGhvZHMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1ldGhvZEhhbmRsZXIgPSBtZXRob2RzW2tleV07XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKG1ldGhvZEhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbiBkZXYgbW9kZSwgd2UgdXNlIHRoZSBgY3JlYXRlUmVuZGVyQ29udGV4dGAgZnVuY3Rpb24gdG8gZGVmaW5lIG1ldGhvZHMgdG8gdGhlIHByb3h5IHRhcmdldCxcclxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aG9zZSBhcmUgcmVhZC1vbmx5IGJ1dCByZWNvbmZpZ3VyYWJsZSwgc28gaXQgbmVlZHMgdG8gYmUgcmVkZWZpbmVkIGhlcmVcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4W2tleV0gPSBtZXRob2RIYW5kbGVyLmJpbmQocHVibGljVGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiTWV0aG9kc1wiIC8qIE1FVEhPRFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZEhhbmRsZXJ9XCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChkYXRhT3B0aW9ucykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRnVuY3Rpb24oZGF0YU9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFRoZSBkYXRhIG9wdGlvbiBtdXN0IGJlIGEgZnVuY3Rpb24uIGAgK1xyXG4gICAgICAgICAgICAgICAgYFBsYWluIG9iamVjdCB1c2FnZSBpcyBubyBsb25nZXIgc3VwcG9ydGVkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gZGF0YU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzUHJvbWlzZShkYXRhKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBkYXRhKCkgcmV0dXJuZWQgYSBQcm9taXNlIC0gbm90ZSBkYXRhKCkgY2Fubm90IGJlIGFzeW5jOyBJZiB5b3UgYCArXHJcbiAgICAgICAgICAgICAgICBgaW50ZW5kIHRvIHBlcmZvcm0gZGF0YSBmZXRjaGluZyBiZWZvcmUgY29tcG9uZW50IHJlbmRlcnMsIHVzZSBgICtcclxuICAgICAgICAgICAgICAgIGBhc3luYyBzZXR1cCgpICsgPFN1c3BlbnNlPi5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgZGF0YSgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZGF0YSA9IHJlYWN0aXZlKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiRGF0YVwiIC8qIERBVEEgKi8sIGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhwb3NlIGRhdGEgb24gY3R4IGR1cmluZyBkZXZcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5WzBdICE9PSAnJCcgJiYga2V5WzBdICE9PSAnXycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBkYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc3RhdGUgaW5pdGlhbGl6YXRpb24gY29tcGxldGUgYXQgdGhpcyBwb2ludCAtIHN0YXJ0IGNhY2hpbmcgYWNjZXNzXHJcbiAgICBzaG91bGRDYWNoZUFjY2VzcyA9IHRydWU7XHJcbiAgICBpZiAoY29tcHV0ZWRPcHRpb25zKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdCA9IGNvbXB1dGVkT3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICBjb25zdCBnZXQgPSBpc0Z1bmN0aW9uKG9wdClcclxuICAgICAgICAgICAgICAgID8gb3B0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbihvcHQuZ2V0KVxyXG4gICAgICAgICAgICAgICAgICAgID8gb3B0LmdldC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGdldCA9PT0gTk9PUCkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNldCA9ICFpc0Z1bmN0aW9uKG9wdCkgJiYgaXNGdW5jdGlvbihvcHQuc2V0KVxyXG4gICAgICAgICAgICAgICAgPyBvcHQuc2V0LmJpbmQocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYFdyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgcmVhZG9ubHkuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogTk9PUDtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGNvbXB1dGVkKHtcclxuICAgICAgICAgICAgICAgIGdldCxcclxuICAgICAgICAgICAgICAgIHNldFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBjLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgc2V0OiB2ID0+IChjLnZhbHVlID0gdilcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkNvbXB1dGVkXCIgLyogQ09NUFVURUQgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAod2F0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2F0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIod2F0Y2hPcHRpb25zW2tleV0sIGN0eCwgcHVibGljVGhpcywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpXHJcbiAgICAgICAgICAgID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICA6IHByb3ZpZGVPcHRpb25zO1xyXG4gICAgICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY3JlYXRlZCkge1xyXG4gICAgICAgIGNhbGxIb29rKGNyZWF0ZWQsIGluc3RhbmNlLCBcImNcIiAvKiBDUkVBVEVEICovKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhyZWdpc3RlciwgaG9vaykge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGhvb2spKSB7XHJcbiAgICAgICAgICAgIGhvb2suZm9yRWFjaChfaG9vayA9PiByZWdpc3RlcihfaG9vay5iaW5kKHB1YmxpY1RoaXMpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhvb2spIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXIoaG9vay5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVNb3VudCwgYmVmb3JlTW91bnQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uTW91bnRlZCwgbW91bnRlZCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVcGRhdGUsIGJlZm9yZVVwZGF0ZSk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25VcGRhdGVkLCB1cGRhdGVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkFjdGl2YXRlZCwgYWN0aXZhdGVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkRlYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25FcnJvckNhcHR1cmVkLCBlcnJvckNhcHR1cmVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblJlbmRlclRyYWNrZWQsIHJlbmRlclRyYWNrZWQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJpZ2dlcmVkLCByZW5kZXJUcmlnZ2VyZWQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQmVmb3JlVW5tb3VudCwgYmVmb3JlVW5tb3VudCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Vbm1vdW50ZWQsIHVubW91bnRlZCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25TZXJ2ZXJQcmVmZXRjaCwgc2VydmVyUHJlZmV0Y2gpO1xyXG4gICAgaWYgKGlzQXJyYXkoZXhwb3NlKSkge1xyXG4gICAgICAgIGlmIChleHBvc2UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0gcHJveHlSZWZzKHt9KSk7XHJcbiAgICAgICAgICAgIGV4cG9zZS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBleHBvc2VkW2tleV0gPSB0b1JlZihwdWJsaWNUaGlzLCBrZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvcHRpb25zIHRoYXQgYXJlIGhhbmRsZWQgd2hlbiBjcmVhdGluZyB0aGUgaW5zdGFuY2UgYnV0IGFsc28gbmVlZCB0byBiZVxyXG4gICAgLy8gYXBwbGllZCBmcm9tIG1peGluc1xyXG4gICAgaWYgKHJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1ApIHtcclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSByZW5kZXI7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5oZXJpdEF0dHJzICE9IG51bGwpIHtcclxuICAgICAgICBpbnN0YW5jZS5pbmhlcml0QXR0cnMgPSBpbmhlcml0QXR0cnM7XHJcbiAgICB9XHJcbiAgICAvLyBhc3NldCBvcHRpb25zLlxyXG4gICAgaWYgKGNvbXBvbmVudHMpXHJcbiAgICAgICAgaW5zdGFuY2UuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XHJcbiAgICBpZiAoZGlyZWN0aXZlcylcclxuICAgICAgICBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IE5PT1ApIHtcclxuICAgIGlmIChpc0FycmF5KGluamVjdE9wdGlvbnMpKSB7XHJcbiAgICAgICAgaW5qZWN0T3B0aW9ucyA9IG5vcm1hbGl6ZUluamVjdChpbmplY3RPcHRpb25zKTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KG9wdCkpIHtcclxuICAgICAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBvcHQpIHtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSwgb3B0LmRlZmF1bHQsIHRydWUgLyogdHJlYXQgZGVmYXVsdCBmdW5jdGlvbiBhcyBmYWN0b3J5ICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KG9wdC5mcm9tIHx8IGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGN0eFtrZXldID0gaW5qZWN0KG9wdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiSW5qZWN0XCIgLyogSU5KRUNUICovLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsSG9vayhob29rLCBpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaXNBcnJheShob29rKVxyXG4gICAgICAgID8gaG9vay5tYXAoaCA9PiBoLmJpbmQoaW5zdGFuY2UucHJveHkpKVxyXG4gICAgICAgIDogaG9vay5iaW5kKGluc3RhbmNlLnByb3h5KSwgaW5zdGFuY2UsIHR5cGUpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xyXG4gICAgY29uc3QgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKCcuJylcclxuICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KVxyXG4gICAgICAgIDogKCkgPT4gcHVibGljVGhpc1trZXldO1xyXG4gICAgaWYgKGlzU3RyaW5nKHJhdykpIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXd9XCJgLCBoYW5kbGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHJhdykpIHtcclxuICAgICAgICB3YXRjaChnZXR0ZXIsIHJhdy5iaW5kKHB1YmxpY1RoaXMpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgICAgIHJhdy5mb3JFYWNoKHIgPT4gY3JlYXRlV2F0Y2hlcihyLCBjdHgsIHB1YmxpY1RoaXMsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpXHJcbiAgICAgICAgICAgICAgICA/IHJhdy5oYW5kbGVyLmJpbmQocHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgIDogY3R4W3Jhdy5oYW5kbGVyXTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlciwgcmF3KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCB3YXRjaCBvcHRpb246IFwiJHtrZXl9XCJgLCByYXcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXNvbHZlIG1lcmdlZCBvcHRpb25zIGFuZCBjYWNoZSBpdCBvbiB0aGUgY29tcG9uZW50LlxyXG4gKiBUaGlzIGlzIGRvbmUgb25seSBvbmNlIHBlci1jb21wb25lbnQgc2luY2UgdGhlIG1lcmdpbmcgZG9lcyBub3QgaW52b2x2ZVxyXG4gKiBpbnN0YW5jZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgYmFzZSA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGJhc2U7XHJcbiAgICBjb25zdCB7IG1peGluczogZ2xvYmFsTWl4aW5zLCBvcHRpb25zQ2FjaGU6IGNhY2hlLCBjb25maWc6IHsgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzIH0gfSA9IGluc3RhbmNlLmFwcENvbnRleHQ7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYmFzZSk7XHJcbiAgICBsZXQgcmVzb2x2ZWQ7XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgcmVzb2x2ZWQgPSBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghZ2xvYmFsTWl4aW5zLmxlbmd0aCAmJiAhbWl4aW5zICYmICFleHRlbmRzT3B0aW9ucykge1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmVkID0ge307XHJcbiAgICAgICAgaWYgKGdsb2JhbE1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZ2xvYmFsTWl4aW5zLmZvckVhY2gobSA9PiBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIG0sIG9wdGlvbk1lcmdlU3RyYXRlZ2llcywgdHJ1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXJnZU9wdGlvbnMocmVzb2x2ZWQsIGJhc2UsIG9wdGlvbk1lcmdlU3RyYXRlZ2llcyk7XHJcbiAgICB9XHJcbiAgICBjYWNoZS5zZXQoYmFzZSwgcmVzb2x2ZWQpO1xyXG4gICAgcmV0dXJuIHJlc29sdmVkO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyh0bywgZnJvbSwgc3RyYXRzLCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gZnJvbTtcclxuICAgIGlmIChleHRlbmRzT3B0aW9ucykge1xyXG4gICAgICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAobWl4aW5zKSB7XHJcbiAgICAgICAgbWl4aW5zLmZvckVhY2goKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKSk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBmcm9tKSB7XHJcbiAgICAgICAgaWYgKGFzTWl4aW4gJiYga2V5ID09PSAnZXhwb3NlJykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYFwiZXhwb3NlXCIgb3B0aW9uIGlzIGlnbm9yZWQgd2hlbiBkZWNsYXJlZCBpbiBtaXhpbnMgb3IgZXh0ZW5kcy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYEl0IHNob3VsZCBvbmx5IGJlIGRlY2xhcmVkIGluIHRoZSBiYXNlIGNvbXBvbmVudCBpdHNlbGYuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzdHJhdCA9IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHNba2V5XSB8fCAoc3RyYXRzICYmIHN0cmF0c1trZXldKTtcclxuICAgICAgICAgICAgdG9ba2V5XSA9IHN0cmF0ID8gc3RyYXQodG9ba2V5XSwgZnJvbVtrZXldKSA6IGZyb21ba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuY29uc3QgaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyA9IHtcclxuICAgIGRhdGE6IG1lcmdlRGF0YUZuLFxyXG4gICAgcHJvcHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcclxuICAgIGVtaXRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXHJcbiAgICAvLyBvYmplY3RzXHJcbiAgICBtZXRob2RzOiBtZXJnZU9iamVjdE9wdGlvbnMsXHJcbiAgICBjb21wdXRlZDogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgLy8gbGlmZWN5Y2xlXHJcbiAgICBiZWZvcmVDcmVhdGU6IG1lcmdlSG9vayxcclxuICAgIGNyZWF0ZWQ6IG1lcmdlSG9vayxcclxuICAgIGJlZm9yZU1vdW50OiBtZXJnZUhvb2ssXHJcbiAgICBtb3VudGVkOiBtZXJnZUhvb2ssXHJcbiAgICBiZWZvcmVVcGRhdGU6IG1lcmdlSG9vayxcclxuICAgIHVwZGF0ZWQ6IG1lcmdlSG9vayxcclxuICAgIGJlZm9yZURlc3Ryb3k6IG1lcmdlSG9vayxcclxuICAgIGRlc3Ryb3llZDogbWVyZ2VIb29rLFxyXG4gICAgYWN0aXZhdGVkOiBtZXJnZUhvb2ssXHJcbiAgICBkZWFjdGl2YXRlZDogbWVyZ2VIb29rLFxyXG4gICAgZXJyb3JDYXB0dXJlZDogbWVyZ2VIb29rLFxyXG4gICAgc2VydmVyUHJlZmV0Y2g6IG1lcmdlSG9vayxcclxuICAgIC8vIGFzc2V0c1xyXG4gICAgY29tcG9uZW50czogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgZGlyZWN0aXZlczogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgLy8gd2F0Y2ggaGFzIHNwZWNpYWwgbWVyZ2UgYmVoYXZpb3IgaW4gdjIsIGJ1dCBpc24ndCBhY3R1YWxseSBuZWVkZWQgaW4gdjMuXHJcbiAgICAvLyBzaW5jZSB3ZSBhcmUgb25seSBleHBvc2luZyB0aGVzZSBmb3IgY29tcGF0IGFuZCBub2JvZHkgc2hvdWxkIGJlIHJlbHlpbmdcclxuICAgIC8vIG9uIHRoZSB3YXRjaC1zcGVjaWZpYyBiZWhhdmlvciwganVzdCBleHBvc2UgdGhlIG9iamVjdCBtZXJnZSBzdHJhdC5cclxuICAgIHdhdGNoOiBtZXJnZU9iamVjdE9wdGlvbnMsXHJcbiAgICAvLyBwcm92aWRlIC8gaW5qZWN0XHJcbiAgICBwcm92aWRlOiBtZXJnZURhdGFGbixcclxuICAgIGluamVjdDogbWVyZ2VJbmplY3RcclxufTtcclxuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcclxuICAgIGlmICghZnJvbSkge1xyXG4gICAgICAgIHJldHVybiB0bztcclxuICAgIH1cclxuICAgIGlmICghdG8pIHtcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4oKSB7XHJcbiAgICAgICAgcmV0dXJuIChleHRlbmQpKGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLCBpc0Z1bmN0aW9uKGZyb20pID8gZnJvbS5jYWxsKHRoaXMsIHRoaXMpIDogZnJvbSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlSW5qZWN0KHRvLCBmcm9tKSB7XHJcbiAgICByZXR1cm4gbWVyZ2VPYmplY3RPcHRpb25zKG5vcm1hbGl6ZUluamVjdCh0byksIG5vcm1hbGl6ZUluamVjdChmcm9tKSk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhdztcclxufVxyXG5mdW5jdGlvbiBtZXJnZUhvb2sodG8sIGZyb20pIHtcclxuICAgIHJldHVybiB0byA/IFsuLi5uZXcgU2V0KFtdLmNvbmNhdCh0bywgZnJvbSkpXSA6IGZyb207XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VPYmplY3RPcHRpb25zKHRvLCBmcm9tKSB7XHJcbiAgICByZXR1cm4gdG8gPyBleHRlbmQoZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHRvKSwgZnJvbSkgOiBmcm9tO1xyXG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIGlzU3RhdGVmdWwsIC8vIHJlc3VsdCBvZiBiaXR3aXNlIGZsYWcgY29tcGFyaXNvblxyXG5pc1NTUiA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgY29uc3QgYXR0cnMgPSB7fTtcclxuICAgIGRlZihhdHRycywgSW50ZXJuYWxPYmplY3RLZXksIDEpO1xyXG4gICAgaW5zdGFuY2UucHJvcHNEZWZhdWx0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xyXG4gICAgLy8gZW5zdXJlIGFsbCBkZWNsYXJlZCBwcm9wIGtleXMgYXJlIHByZXNlbnRcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkge1xyXG4gICAgICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGlmIChpc1N0YXRlZnVsKSB7XHJcbiAgICAgICAgLy8gc3RhdGVmdWxcclxuICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGlzU1NSID8gcHJvcHMgOiBzaGFsbG93UmVhY3RpdmUocHJvcHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZS50eXBlLnByb3BzKSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gb3B0aW9uYWwgcHJvcHMsIHByb3BzID09PSBhdHRyc1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IGF0dHJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZnVuY3Rpb25hbCB3LyBkZWNsYXJlZCBwcm9wc1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluc3RhbmNlLmF0dHJzID0gYXR0cnM7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCByYXdQcmV2UHJvcHMsIG9wdGltaXplZCkge1xyXG4gICAgY29uc3QgeyBwcm9wcywgYXR0cnMsIHZub2RlOiB7IHBhdGNoRmxhZyB9IH0gPSBpbnN0YW5jZTtcclxuICAgIGNvbnN0IHJhd0N1cnJlbnRQcm9wcyA9IHRvUmF3KHByb3BzKTtcclxuICAgIGNvbnN0IFtvcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcclxuICAgIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcclxuICAgIGlmIChcclxuICAgIC8vIGFsd2F5cyBmb3JjZSBmdWxsIGRpZmYgaW4gZGV2XHJcbiAgICAvLyAtICMxOTQyIGlmIGhtciBpcyBlbmFibGVkIHdpdGggc2ZjIGNvbXBvbmVudFxyXG4gICAgLy8gLSB2aXRlIzg3MiBub24tc2ZjIGNvbXBvbmVudCB1c2VkIGJ5IHNmYyBjb21wb25lbnRcclxuICAgICEoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgKGluc3RhbmNlLnR5cGUuX19obXJJZCB8fFxyXG4gICAgICAgICAgICAoaW5zdGFuY2UucGFyZW50ICYmIGluc3RhbmNlLnBhcmVudC50eXBlLl9faG1ySWQpKSkgJiZcclxuICAgICAgICAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmXHJcbiAgICAgICAgIShwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovKSkge1xyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgIC8vIENvbXBpbGVyLWdlbmVyYXRlZCBwcm9wcyAmIG5vIGtleXMgY2hhbmdlLCBqdXN0IHNldCB0aGUgdXBkYXRlZFxyXG4gICAgICAgICAgICAvLyB0aGUgcHJvcHMuXHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBpbnN0YW5jZS52bm9kZS5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XHJcbiAgICAgICAgICAgICAgICAvLyBQUk9QUyBmbGFnIGd1YXJhbnRlZXMgcmF3UHJvcHMgdG8gYmUgbm9uLW51bGxcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0ciAvIHByb3BzIHNlcGFyYXRpb24gd2FzIGRvbmUgb24gaW5pdCBhbmQgd2lsbCBiZSBjb25zaXN0ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhpcyBjb2RlIHBhdGgsIHNvIGp1c3QgY2hlY2sgaWYgYXR0cnMgaGF2ZSBpdC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKGF0dHJzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbY2FtZWxpemVkS2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBjYW1lbGl6ZWRLZXksIHZhbHVlLCBpbnN0YW5jZSwgZmFsc2UgLyogaXNBYnNlbnQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZnVsbCBwcm9wcyB1cGRhdGUuXHJcbiAgICAgICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcclxuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW4gY2FzZSBvZiBkeW5hbWljIHByb3BzLCBjaGVjayBpZiB3ZSBuZWVkIHRvIGRlbGV0ZSBrZXlzIGZyb21cclxuICAgICAgICAvLyB0aGUgcHJvcHMgb2JqZWN0XHJcbiAgICAgICAgbGV0IGtlYmFiS2V5O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd0N1cnJlbnRQcm9wcykge1xyXG4gICAgICAgICAgICBpZiAoIXJhd1Byb3BzIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXHJcbiAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhlIG9yaWdpbmFsIHByb3BzIHdhcyBwYXNzZWQgaW4gYXMga2ViYWItY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxyXG4gICAgICAgICAgICAgICAgICAgICgoa2ViYWJLZXkgPSBoeXBoZW5hdGUoa2V5KSkgPT09IGtleSB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZWJhYktleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBjYW1lbENhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJhd1ByZXZQcm9wc1trZXldICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBrZWJhYi1jYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdQcmV2UHJvcHNba2ViYWJLZXldICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCB1bmRlZmluZWQsIGluc3RhbmNlLCB0cnVlIC8qIGlzQWJzZW50ICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbiB0aGUgY2FzZSBvZiBmdW5jdGlvbmFsIGNvbXBvbmVudCB3L28gcHJvcHMgZGVjbGFyYXRpb24sIHByb3BzIGFuZFxyXG4gICAgICAgIC8vIGF0dHJzIHBvaW50IHRvIHRoZSBzYW1lIG9iamVjdCBzbyBpdCBzaG91bGQgYWxyZWFkeSBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICBpZiAoYXR0cnMgIT09IHJhd0N1cnJlbnRQcm9wcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHRyaWdnZXIgdXBkYXRlcyBmb3IgJGF0dHJzIGluIGNhc2UgaXQncyB1c2VkIGluIGNvbXBvbmVudCBzbG90c1xyXG4gICAgaWYgKGhhc0F0dHJzQ2hhbmdlZCkge1xyXG4gICAgICAgIHRyaWdnZXIoaW5zdGFuY2UsIFwic2V0XCIgLyogU0VUICovLCAnJGF0dHJzJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcclxuICAgIGNvbnN0IFtvcHRpb25zLCBuZWVkQ2FzdEtleXNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgbGV0IHJhd0Nhc3RWYWx1ZXM7XHJcbiAgICBpZiAocmF3UHJvcHMpIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmF3UHJvcHMpIHtcclxuICAgICAgICAgICAgLy8ga2V5LCByZWYgYXJlIHJlc2VydmVkIGFuZCBuZXZlciBwYXNzZWQgZG93blxyXG4gICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XHJcbiAgICAgICAgICAgIC8vIGtlYmFiIC0+IGNhbWVsIGNvbnZlcnNpb24gaGVyZSB3ZSBuZWVkIHRvIGNhbWVsaXplIHRoZSBrZXkuXHJcbiAgICAgICAgICAgIGxldCBjYW1lbEtleTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuZWVkQ2FzdEtleXMgfHwgIW5lZWRDYXN0S2V5cy5pbmNsdWRlcyhjYW1lbEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbEtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChuZWVkQ2FzdEtleXMpIHtcclxuICAgICAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICAgICAgY29uc3QgY2FzdFZhbHVlcyA9IHJhd0Nhc3RWYWx1ZXMgfHwgRU1QVFlfT0JKO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IG5lZWRDYXN0S2V5c1tpXTtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcmF3Q3VycmVudFByb3BzLCBrZXksIGNhc3RWYWx1ZXNba2V5XSwgaW5zdGFuY2UsICFoYXNPd24oY2FzdFZhbHVlcywga2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhc0F0dHJzQ2hhbmdlZDtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcclxuICAgIGNvbnN0IG9wdCA9IG9wdGlvbnNba2V5XTtcclxuICAgIGlmIChvcHQgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCAnZGVmYXVsdCcpO1xyXG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWVzXHJcbiAgICAgICAgaWYgKGhhc0RlZmF1bHQgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBvcHQuZGVmYXVsdDtcclxuICAgICAgICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvcHNEZWZhdWx0cyB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChudWxsLCBwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYm9vbGVhbiBjYXN0aW5nXHJcbiAgICAgICAgaWYgKG9wdFswIC8qIHNob3VsZENhc3QgKi9dKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0Fic2VudCAmJiAhaGFzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gJiZcclxuICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhjb21wLCBhcHBDb250ZXh0LCBhc01peGluID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5wcm9wc0NhY2hlO1xyXG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xyXG4gICAgY29uc3QgbmVlZENhc3RLZXlzID0gW107XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcclxuICAgICAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHByb3BzKTtcclxuICAgICAgICAgICAgaWYgKGtleXMpXHJcbiAgICAgICAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaCguLi5rZXlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kUHJvcHMoY29tcC5leHRlbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XHJcbiAgICAgICAgY2FjaGUuc2V0KGNvbXAsIEVNUFRZX0FSUik7XHJcbiAgICAgICAgcmV0dXJuIEVNUFRZX0FSUjtcclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHJhdykpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhdy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc1N0cmluZyhyYXdbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUocmF3W2ldKTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBFTVBUWV9PQko7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChyYXcpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChyYXcpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGludmFsaWQgcHJvcHMgb3B0aW9uc2AsIHJhdyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IChub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID1cclxuICAgICAgICAgICAgICAgICAgICBpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpID8geyB0eXBlOiBvcHQgfSA6IG9wdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZ0luZGV4ID0gZ2V0VHlwZUluZGV4KFN0cmluZywgcHJvcC50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wWzAgLyogc2hvdWxkQ2FzdCAqL10gPSBib29sZWFuSW5kZXggPiAtMTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wWzEgLyogc2hvdWxkQ2FzdFRydWUgKi9dID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwcm9wIG5lZWRzIGJvb2xlYW4gY2FzdGluZyBvciBkZWZhdWx0IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvb2xlYW5JbmRleCA+IC0xIHx8IGhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xyXG4gICAgY2FjaGUuc2V0KGNvbXAsIHJlcyk7XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcE5hbWUoa2V5KSB7XHJcbiAgICBpZiAoa2V5WzBdICE9PSAnJCcpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgcHJvcCBuYW1lOiBcIiR7a2V5fVwiIGlzIGEgcmVzZXJ2ZWQgcHJvcGVydHkuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLy8gdXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIHR5cGUgY29uc3RydWN0b3JzXHJcbi8vIHNvIHRoYXQgaXQgd29ya3MgYWNyb3NzIHZtcyAvIGlmcmFtZXMuXHJcbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xyXG4gICAgY29uc3QgbWF0Y2ggPSBjdG9yICYmIGN0b3IudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcclxuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJyc7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lVHlwZShhLCBiKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcclxufVxyXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXgodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgaWYgKGlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gZXhwZWN0ZWRUeXBlcy5maW5kSW5kZXgodCA9PiBpc1NhbWVUeXBlKHQsIHR5cGUpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMsIHByb3BzLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByZXNvbHZlZFZhbHVlc1trZXldLCBvcHQsICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgIWhhc093bihyYXdQcm9wcywgaHlwaGVuYXRlKGtleSkpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcChuYW1lLCB2YWx1ZSwgcHJvcCwgaXNBYnNlbnQpIHtcclxuICAgIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciB9ID0gcHJvcDtcclxuICAgIC8vIHJlcXVpcmVkIVxyXG4gICAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XHJcbiAgICAgICAgd2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gbWlzc2luZyBidXQgb3B0aW9uYWxcclxuICAgIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdHlwZSBjaGVja1xyXG4gICAgaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xyXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcclxuICAgICAgICAvLyB2YWx1ZSBpcyB2YWxpZCBhcyBsb25nIGFzIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIG1hdGNoXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGggJiYgIWlzVmFsaWQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcclxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGV4cGVjdGVkVHlwZSB8fCAnJyk7XHJcbiAgICAgICAgICAgIGlzVmFsaWQgPSB2YWxpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjdXN0b20gdmFsaWRhdG9yXHJcbiAgICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUpKSB7XHJcbiAgICAgICAgd2FybignSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGlzU2ltcGxlVHlwZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnU3RyaW5nLE51bWJlcixCb29sZWFuLEZ1bmN0aW9uLFN5bWJvbCxCaWdJbnQnKTtcclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBsZXQgdmFsaWQ7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xyXG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXHJcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcclxuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkLFxyXG4gICAgICAgIGV4cGVjdGVkVHlwZVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi5gICtcclxuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKX1gO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XHJcbiAgICBjb25zdCBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcclxuICAgIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXHJcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxyXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XHJcbiAgICB9XHJcbiAgICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxyXG4gICAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcclxuICAgIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX1gO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcclxuICAgIGNvbnN0IGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xyXG4gICAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShlbGVtID0+IHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbSk7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xyXG4gICAgcmV0dXJuIGFyZ3Muc29tZShlbGVtID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nKTtcclxufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSAnXycgfHwga2V5ID09PSAnJHN0YWJsZSc7XHJcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSlcclxuICAgID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZOb2RlKVxyXG4gICAgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcclxuY29uc3Qgbm9ybWFsaXplU2xvdCA9IChrZXksIHJhd1Nsb3QsIGN0eCkgPT4ge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHdpdGhDdHgoKHByb3BzKSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcclxuICAgICAgICAgICAgICAgIGB0aGlzIHdpbGwgbm90IHRyYWNrIGRlcGVuZGVuY2llcyB1c2VkIGluIHRoZSBzbG90LiBgICtcclxuICAgICAgICAgICAgICAgIGBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3RWYWx1ZShyYXdTbG90KHByb3BzKSk7XHJcbiAgICB9LCBjdHgpO1xyXG4gICAgbm9ybWFsaXplZC5fYyA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XHJcbn07XHJcbmNvbnN0IG5vcm1hbGl6ZU9iamVjdFNsb3RzID0gKHJhd1Nsb3RzLCBzbG90cywgaW5zdGFuY2UpID0+IHtcclxuICAgIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdTbG90cykge1xyXG4gICAgICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmF3U2xvdHNba2V5XTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgc2xvdHNba2V5XSA9IG5vcm1hbGl6ZVNsb3Qoa2V5LCB2YWx1ZSwgY3R4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAhKGZhbHNlICkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3Igc2xvdCBcIiR7a2V5fVwiLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIHNsb3RzW2tleV0gPSAoKSA9PiBub3JtYWxpemVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuY29uc3Qgbm9ybWFsaXplVk5vZGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAhaXNLZWVwQWxpdmUoaW5zdGFuY2Uudm5vZGUpICYmXHJcbiAgICAgICAgIShmYWxzZSApKSB7XHJcbiAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBkZWZhdWx0IHNsb3QuIGAgK1xyXG4gICAgICAgICAgICBgUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcclxuICAgIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xyXG59O1xyXG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuKSA9PiB7XHJcbiAgICBpZiAoaW5zdGFuY2Uudm5vZGUuc2hhcGVGbGFnICYgMzIgLyogU0xPVFNfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAvLyB1c2VycyBjYW4gZ2V0IHRoZSBzaGFsbG93IHJlYWRvbmx5IHZlcnNpb24gb2YgdGhlIHNsb3RzIG9iamVjdCB0aHJvdWdoIGB0aGlzLiRzbG90c2AsXHJcbiAgICAgICAgICAgIC8vIHdlIHNob3VsZCBhdm9pZCB0aGUgcHJveHkgb2JqZWN0IHBvbGx1dGluZyB0aGUgc2xvdHMgb2YgdGhlIGludGVybmFsIGluc3RhbmNlXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNsb3RzID0gdG9SYXcoY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAvLyBtYWtlIGNvbXBpbGVyIG1hcmtlciBub24tZW51bWVyYWJsZVxyXG4gICAgICAgICAgICBkZWYoY2hpbGRyZW4sICdfJywgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgKGluc3RhbmNlLnNsb3RzID0ge30pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpbnN0YW5jZS5zbG90cyA9IHt9O1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgICAgICBub3JtYWxpemVWTm9kZVNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVmKGluc3RhbmNlLnNsb3RzLCBJbnRlcm5hbE9iamVjdEtleSwgMSk7XHJcbn07XHJcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICBjb25zdCB7IHZub2RlLCBzbG90cyB9ID0gaW5zdGFuY2U7XHJcbiAgICBsZXQgbmVlZERlbGV0aW9uQ2hlY2sgPSB0cnVlO1xyXG4gICAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcclxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbXBpbGVkIHNsb3RzLlxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIFBhcmVudCB3YXMgSE1SIHVwZGF0ZWQgc28gc2xvdCBjb250ZW50IG1heSBoYXZlIGNoYW5nZWQuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSB1cGRhdGUgc2xvdHMgYW5kIG1hcmsgaW5zdGFuY2UgZm9yIGhtciBhcyB3ZWxsXHJcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpbWl6ZWQgJiYgdHlwZSA9PT0gMSAvKiBTVEFCTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVkIEFORCBzdGFibGUuXHJcbiAgICAgICAgICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSwgYW5kIHNraXAgc3RhbGUgc2xvdHMgcmVtb3ZhbC5cclxuICAgICAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb21waWxlZCBidXQgZHluYW1pYyAodi1pZi92LWZvciBvbiBzbG90cykgLSB1cGRhdGUgc2xvdHMsIGJ1dCBza2lwXHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHNsb3RzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAvLyAjMjg5M1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiByZW5kZXJpbmcgdGhlIG9wdGltaXplZCBzbG90cyBieSBtYW51YWxseSB3cml0dGVuIHJlbmRlciBmdW5jdGlvbixcclxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZGVsZXRlIHRoZSBgc2xvdHMuX2AgZmxhZyBpZiBuZWNlc3NhcnkgdG8gbWFrZSBzdWJzZXF1ZW50IHVwZGF0ZXMgcmVsaWFibGUsXHJcbiAgICAgICAgICAgICAgICAvLyBpLmUuIGxldCB0aGUgYHJlbmRlclNsb3RgIGNyZWF0ZSB0aGUgYmFpbGVkIEZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXplZCAmJiB0eXBlID09PSAxIC8qIFNUQUJMRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzbG90cy5fO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZWVkRGVsZXRpb25DaGVjayA9ICFjaGlsZHJlbi4kc3RhYmxlO1xyXG4gICAgICAgICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBjaGlsZHJlbjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgLy8gbm9uIHNsb3Qgb2JqZWN0IGNoaWxkcmVuIChkaXJlY3QgdmFsdWUpIHBhc3NlZCB0byBhIGNvbXBvbmVudFxyXG4gICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcclxuICAgICAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSB7IGRlZmF1bHQ6IDEgfTtcclxuICAgIH1cclxuICAgIC8vIGRlbGV0ZSBzdGFsZSBzbG90c1xyXG4gICAgaWYgKG5lZWREZWxldGlvbkNoZWNrKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc2xvdHMpIHtcclxuICAgICAgICAgICAgaWYgKCFpc0ludGVybmFsS2V5KGtleSkgJiYgIShrZXkgaW4gZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHNsb3RzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG5cbi8qKlxyXG5SdW50aW1lIGhlbHBlciBmb3IgYXBwbHlpbmcgZGlyZWN0aXZlcyB0byBhIHZub2RlLiBFeGFtcGxlIHVzYWdlOlxyXG5cbmNvbnN0IGNvbXAgPSByZXNvbHZlQ29tcG9uZW50KCdjb21wJylcclxuY29uc3QgZm9vID0gcmVzb2x2ZURpcmVjdGl2ZSgnZm9vJylcclxuY29uc3QgYmFyID0gcmVzb2x2ZURpcmVjdGl2ZSgnYmFyJylcclxuXG5yZXR1cm4gd2l0aERpcmVjdGl2ZXMoaChjb21wKSwgW1xyXG4gIFtmb28sIHRoaXMueF0sXHJcbiAgW2JhciwgdGhpcy55XVxyXG5dKVxyXG4qL1xyXG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ2JpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0Jyk7XHJcbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lKSB7XHJcbiAgICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XHJcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBkaXJlY3RpdmUgaWRzIGFzIGN1c3RvbSBkaXJlY3RpdmUgaWQ6ICcgKyBuYW1lKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQWRkcyBkaXJlY3RpdmVzIHRvIGEgVk5vZGUuXHJcbiAqL1xyXG5mdW5jdGlvbiB3aXRoRGlyZWN0aXZlcyh2bm9kZSwgZGlyZWN0aXZlcykge1xyXG4gICAgY29uc3QgaW50ZXJuYWxJbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlID09PSBudWxsKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBpbnRlcm5hbEluc3RhbmNlLnByb3h5O1xyXG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaXJlY3RpdmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IFtkaXIsIHZhbHVlLCBhcmcsIG1vZGlmaWVycyA9IEVNUFRZX09CSl0gPSBkaXJlY3RpdmVzW2ldO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcikpIHtcclxuICAgICAgICAgICAgZGlyID0ge1xyXG4gICAgICAgICAgICAgICAgbW91bnRlZDogZGlyLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlZDogZGlyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJpbmRpbmdzLnB1c2goe1xyXG4gICAgICAgICAgICBkaXIsXHJcbiAgICAgICAgICAgIGluc3RhbmNlLFxyXG4gICAgICAgICAgICB2YWx1ZSxcclxuICAgICAgICAgICAgb2xkVmFsdWU6IHZvaWQgMCxcclxuICAgICAgICAgICAgYXJnLFxyXG4gICAgICAgICAgICBtb2RpZmllcnNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XHJcbiAgICBjb25zdCBiaW5kaW5ncyA9IHZub2RlLmRpcnM7XHJcbiAgICBjb25zdCBvbGRCaW5kaW5ncyA9IHByZXZWTm9kZSAmJiBwcmV2Vk5vZGUuZGlycztcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XHJcbiAgICAgICAgaWYgKG9sZEJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgIGJpbmRpbmcub2xkVmFsdWUgPSBvbGRCaW5kaW5nc1tpXS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGhvb2sgPSBiaW5kaW5nLmRpcltuYW1lXTtcclxuICAgICAgICBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICAvLyBkaXNhYmxlIHRyYWNraW5nIGluc2lkZSBhbGwgbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgY2FuIHBvdGVudGlhbGx5IGJlIGNhbGxlZCBpbnNpZGUgZWZmZWN0cy5cclxuICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOCAvKiBESVJFQ1RJVkVfSE9PSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuZWwsXHJcbiAgICAgICAgICAgICAgICBiaW5kaW5nLFxyXG4gICAgICAgICAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgICAgICAgICBwcmV2Vk5vZGVcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwOiBudWxsLFxyXG4gICAgICAgIGNvbmZpZzoge1xyXG4gICAgICAgICAgICBpc05hdGl2ZVRhZzogTk8sXHJcbiAgICAgICAgICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcclxuICAgICAgICAgICAgZ2xvYmFsUHJvcGVydGllczoge30sXHJcbiAgICAgICAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXHJcbiAgICAgICAgICAgIGVycm9ySGFuZGxlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICB3YXJuSGFuZGxlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjb21waWxlck9wdGlvbnM6IHt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaXhpbnM6IFtdLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHt9LFxyXG4gICAgICAgIGRpcmVjdGl2ZXM6IHt9LFxyXG4gICAgICAgIHByb3ZpZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxyXG4gICAgICAgIG9wdGlvbnNDYWNoZTogbmV3IFdlYWtNYXAoKSxcclxuICAgICAgICBwcm9wc0NhY2hlOiBuZXcgV2Vha01hcCgpLFxyXG4gICAgICAgIGVtaXRzQ2FjaGU6IG5ldyBXZWFrTWFwKClcclxuICAgIH07XHJcbn1cclxubGV0IHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZUFwcEFQSShyZW5kZXIsIGh5ZHJhdGUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVBcHAocm9vdENvbXBvbmVudCwgcm9vdFByb3BzID0gbnVsbCkge1xyXG4gICAgICAgIGlmIChyb290UHJvcHMgIT0gbnVsbCAmJiAhaXNPYmplY3Qocm9vdFByb3BzKSkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybihgcm9vdCBwcm9wcyBwYXNzZWQgdG8gYXBwLm1vdW50KCkgbXVzdCBiZSBhbiBvYmplY3QuYCk7XHJcbiAgICAgICAgICAgIHJvb3RQcm9wcyA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBsZXQgaXNNb3VudGVkID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgYXBwID0gKGNvbnRleHQuYXBwID0ge1xyXG4gICAgICAgICAgICBfdWlkOiB1aWQrKyxcclxuICAgICAgICAgICAgX2NvbXBvbmVudDogcm9vdENvbXBvbmVudCxcclxuICAgICAgICAgICAgX3Byb3BzOiByb290UHJvcHMsXHJcbiAgICAgICAgICAgIF9jb250YWluZXI6IG51bGwsXHJcbiAgICAgICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxyXG4gICAgICAgICAgICB2ZXJzaW9uLFxyXG4gICAgICAgICAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQgY29uZmlnKHYpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2UocGx1Z2luLCAuLi5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWl4aW4obWl4aW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6ICcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW5zIGFyZSBvbmx5IGF2YWlsYWJsZSBpbiBidWlsZHMgc3VwcG9ydGluZyBPcHRpb25zIEFQSScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgaXNTVkcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShyb290Q29tcG9uZW50LCByb290UHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGFwcCBjb250ZXh0IG9uIHRoZSByb290IFZOb2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBzZXQgb24gdGhlIHJvb3QgaW5zdGFuY2Ugb24gaW5pdGlhbCBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5hcHBDb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBITVIgcm9vdCByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKGNsb25lVk5vZGUodm5vZGUpLCByb290Q29udGFpbmVyLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lciwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm5vZGUuY29tcG9uZW50LnByb3h5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGhhcyBhbHJlYWR5IGJlZW4gbW91bnRlZC5cXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHlvdSB3YW50IHRvIHJlbW91bnQgdGhlIHNhbWUgYXBwLCBtb3ZlIHlvdXIgYXBwIGNyZWF0aW9uIGxvZ2ljIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24gYW5kIGNyZWF0ZSBmcmVzaCBhcHAgaW5zdGFuY2VzIGZvciBlYWNoIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgbW91bnQgLSBlLmcuIFxcYGNvbnN0IGNyZWF0ZU15QXBwID0gKCkgPT4gY3JlYXRlQXBwKEFwcClcXGBgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5tb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXIobnVsbCwgYXBwLl9jb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzVW5tb3VudEFwcChhcHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXBwLl9jb250YWluZXIuX192dWVfYXBwX187XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDYW5ub3QgdW5tb3VudCBhbiBhcHAgdGhhdCBpcyBub3QgbW91bnRlZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IGFsbG93IHN5bWJvbHMgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8yNDU4N1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH07XHJcbn1cblxubGV0IGhhc01pc21hdGNoID0gZmFsc2U7XHJcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gL3N2Zy8udGVzdChjb250YWluZXIubmFtZXNwYWNlVVJJKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xyXG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBDT01NRU5UICovO1xyXG4vLyBOb3RlOiBoeWRyYXRpb24gaXMgRE9NLXNwZWNpZmljXHJcbi8vIEJ1dCB3ZSBoYXZlIHRvIHBsYWNlIGl0IGluIGNvcmUgZHVlIHRvIHRpZ2h0IGNvdXBsaW5nIHdpdGggY29yZSAtIHNwbGl0dGluZ1xyXG4vLyBpdCBvdXQgY3JlYXRlcyBhIHRvbiBvZiB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxyXG4vLyBIeWRyYXRpb24gYWxzbyBkZXBlbmRzIG9uIHNvbWUgcmVuZGVyZXIgaW50ZXJuYWwgbG9naWMgd2hpY2ggbmVlZHMgdG8gYmVcclxuLy8gcGFzc2VkIGluIHZpYSBhcmd1bWVudHMuXHJcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xyXG4gICAgY29uc3QgeyBtdDogbW91bnRDb21wb25lbnQsIHA6IHBhdGNoLCBvOiB7IHBhdGNoUHJvcCwgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHJlbW92ZSwgaW5zZXJ0LCBjcmVhdGVDb21tZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgaHlkcmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIGh5ZHJhdGUgZXhpc3RpbmcgbWFya3VwIGJ1dCBjb250YWluZXIgaXMgZW1wdHkuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFBlcmZvcm1pbmcgZnVsbCBtb3VudCBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoYXNNaXNtYXRjaCA9IGZhbHNlO1xyXG4gICAgICAgIGh5ZHJhdGVOb2RlKGNvbnRhaW5lci5maXJzdENoaWxkLCB2bm9kZSwgbnVsbCwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcclxuICAgICAgICBpZiAoaGFzTWlzbWF0Y2ggJiYgIWZhbHNlKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgZXJyb3Igc2hvdWxkIHNob3cgdXAgaW4gcHJvZHVjdGlvblxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLmApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzRnJhZ21lbnRTdGFydCA9IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJztcclxuICAgICAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2gobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudFN0YXJ0KTtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgICAgICBjb25zdCBkb21UeXBlID0gbm9kZS5ub2RlVHlwZTtcclxuICAgICAgICB2bm9kZS5lbCA9IG5vZGU7XHJcbiAgICAgICAgbGV0IG5leHROb2RlID0gbnVsbDtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoOmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIENsaWVudDogJHtKU09OLnN0cmluZ2lmeShub2RlLmRhdGEpfWAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcXG4tIFNlcnZlcjogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudCQxOlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogQ09NTUVOVCAqLyB8fCBpc0ZyYWdtZW50U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5jaG9yLCBhZG9wdCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdGF0aWMgdm5vZGUgaGFzIGl0cyBjb250ZW50IHN0cmlwcGVkIGR1cmluZyBidWlsZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyBhZG9wdCBpdCBmcm9tIHRoZSBzZXJ2ZXItcmVuZGVyZWQgSFRNTC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkVG9BZG9wdENvbnRlbnQgPSAhdm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuc3RhdGljQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4gKz0gbmV4dE5vZGUub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdm5vZGUuc3RhdGljQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRnJhZ21lbnRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudHlwZS50b0xvd2VyQ2FzZSgpICE9PVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHNldHRpbmcgdXAgdGhlIHJlbmRlciBlZmZlY3QsIGlmIHRoZSBpbml0aWFsIHZub2RlIGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgLmVsIHNldCwgdGhlIGNvbXBvbmVudCB3aWxsIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQodm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGJlIGFzeW5jLCBzbyBpbiB0aGUgY2FzZSBvZiBmcmFnbWVudHMgd2UgY2Fubm90IHJlbHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBjb21wb25lbnQncyByZW5kZXJlZCBvdXRwdXQgdG8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgdGhlIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCwgd2UgZG8gYSBsb29rYWhlYWQgdG8gZmluZCB0aGUgZW5kIGFuY2hvciBub2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaXNGcmFnbWVudFN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIzM3ODdcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBjb21wb25lbnQgaXMgYXN5bmMsIGl0IG1heSBnZXQgbW92ZWQgLyB1bm1vdW50ZWQgYmVmb3JlIGl0c1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpcyBsb2FkZWQsIHNvIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHBsYWNlaG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgdGhhdCBtYXRjaGVzIGl0cyBhZG9wdGVkIERPTS5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJUcmVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlID0gY3JlYXRlVk5vZGUoRnJhZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5hbmNob3IgPSBuZXh0Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV4dE5vZGUucHJldmlvdXNTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjb250YWluZXIubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyA/IGNyZWF0ZVRleHRWTm9kZSgnJykgOiBjcmVhdGVWTm9kZSgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5lbCA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIENPTU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihwYXJlbnROb2RlKG5vZGUpKSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dE5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUVsZW1lbnQgPSAoZWwsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycyB9ID0gdm5vZGU7XHJcbiAgICAgICAgLy8gc2tpcCBwcm9wcyAmIGNoaWxkcmVuIGlmIHRoaXMgaXMgaG9pc3RlZCBzdGF0aWMgbm9kZXNcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICE9PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdjcmVhdGVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJvcHNcclxuICAgICAgICAgICAgaWYgKHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXplZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIChwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmIDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByb3Aoa2V5KSAmJiBpc09uKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLm9uQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBGYXN0IHBhdGggZm9yIGNsaWNrIGxpc3RlbmVycyAod2hpY2ggaXMgbW9zdCBvZnRlbikgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpbmcgdGhyb3VnaCBwcm9wcy5cclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsICdvbkNsaWNrJywgbnVsbCwgcHJvcHMub25DbGljayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdm5vZGUgLyBkaXJlY3RpdmUgaG9va3NcclxuICAgICAgICAgICAgbGV0IHZub2RlSG9va3M7XHJcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2tzLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycykge1xyXG4gICAgICAgICAgICAgICAgcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlSG9va3MgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnbW91bnRlZCcpO1xyXG4gICAgICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLyAmJlxyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpZiBlbGVtZW50IGhhcyBpbm5lckhUTUwgLyB0ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgIShwcm9wcyAmJiAocHJvcHMuaW5uZXJIVE1MIHx8IHByb3BzLnRleHRDb250ZW50KSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKGVsLmZpcnN0Q2hpbGQsIHZub2RlLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYHNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIG1vcmUgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIFNTUmVkIERPTSBjb250YWlucyBtb3JlIG5vZGVzIHRoYW4gaXQgc2hvdWxkLiBSZW1vdmUgdGhlbS5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShjdXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnRleHRDb250ZW50ICE9PSB2bm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgY29udGVudCBtaXNtYXRjaCBpbiA8JHt2bm9kZS50eXBlfT46XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBDbGllbnQ6ICR7ZWwudGV4dENvbnRlbnR9XFxuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgLSBTZXJ2ZXI6ICR7dm5vZGUuY2hpbGRyZW59YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUNoaWxkcmVuID0gKG5vZGUsIHBhcmVudFZOb2RlLCBjb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhcGFyZW50Vk5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gcGFyZW50Vk5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgbCA9IGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5baV1cclxuICAgICAgICAgICAgICAgIDogKGNoaWxkcmVuW2ldID0gbm9ybWFsaXplVk5vZGUoY2hpbGRyZW5baV0pKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBoeWRyYXRlTm9kZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFRleHQgJiYgIXZub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhc1dhcm5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBjaGlsZHJlbiBtaXNtYXRjaCBpbiA8JHtjb250YWluZXIudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgZmV3ZXIgY2hpbGQgbm9kZXMgdGhhbiBjbGllbnQgdmRvbS5gKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIFNTUmVkIERPTSBkaWRuJ3QgY29udGFpbiBlbm91Z2ggbm9kZXMuIE1vdW50IHRoZSBtaXNzaW5nIG9uZXMuXHJcbiAgICAgICAgICAgICAgICBwYXRjaChudWxsLCB2bm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihjb250YWluZXIpLCBzbG90U2NvcGVJZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVGcmFnbWVudCA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCB7IHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xyXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHNcclxuICAgICAgICAgICAgICAgID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcylcclxuICAgICAgICAgICAgICAgIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihuZXh0U2libGluZyhub2RlKSwgdm5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIGlmIChuZXh0ICYmIGlzQ29tbWVudChuZXh0KSAmJiBuZXh0LmRhdGEgPT09ICddJykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcoKHZub2RlLmFuY2hvciA9IG5leHQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZyYWdtZW50IGRpZG4ndCBoeWRyYXRlIHN1Y2Nlc3NmdWxseSwgc2luY2Ugd2UgZGlkbid0IGdldCBhIGVuZCBhbmNob3JcclxuICAgICAgICAgICAgLy8gYmFjay4gVGhpcyBzaG91bGQgaGF2ZSBsZWQgdG8gbm9kZS9jaGlsZHJlbiBtaXNtYXRjaCB3YXJuaW5ncy5cclxuICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGUgYW5jaG9yIGlzIG1pc3NpbmcsIHdlIG5lZWQgdG8gY3JlYXRlIG9uZSBhbmQgaW5zZXJ0IGl0XHJcbiAgICAgICAgICAgIGluc2VydCgodm5vZGUuYW5jaG9yID0gY3JlYXRlQ29tbWVudChgXWApKSwgY29udGFpbmVyLCBuZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGhhbmRsZU1pc21hdGNoID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIGlzRnJhZ21lbnQpID0+IHtcclxuICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYEh5ZHJhdGlvbiBub2RlIG1pc21hdGNoOlxcbi0gQ2xpZW50IHZub2RlOmAsIHZub2RlLnR5cGUsIGBcXG4tIFNlcnZlciByZW5kZXJlZCBET006YCwgbm9kZSwgbm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBURVhUICovXHJcbiAgICAgICAgICAgICAgICA/IGAodGV4dClgXHJcbiAgICAgICAgICAgICAgICA6IGlzQ29tbWVudChub2RlKSAmJiBub2RlLmRhdGEgPT09ICdbJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYChzdGFydCBvZiBmcmFnbWVudClgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgYCk7XHJcbiAgICAgICAgdm5vZGUuZWwgPSBudWxsO1xyXG4gICAgICAgIGlmIChpc0ZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBleGNlc3NpdmUgZnJhZ21lbnQgbm9kZXNcclxuICAgICAgICAgICAgY29uc3QgZW5kID0gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpO1xyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dCAhPT0gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgcmVtb3ZlKG5vZGUpO1xyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG5leHQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XHJcbiAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yID0gKG5vZGUpID0+IHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSAwO1xyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUgJiYgaXNDb21tZW50KG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhID09PSAnWycpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2grKztcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICddJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gW2h5ZHJhdGUsIGh5ZHJhdGVOb2RlXTtcclxufVxuXG5sZXQgc3VwcG9ydGVkO1xyXG5sZXQgcGVyZjtcclxuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xyXG4gICAgICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzUGVyZlN0YXJ0KGluc3RhbmNlLCB0eXBlLCBzdXBwb3J0ZWQgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICBjb25zdCBzdGFydFRhZyA9IGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gO1xyXG4gICAgICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xyXG4gICAgICAgIHBlcmYubWFyayhlbmRUYWcpO1xyXG4gICAgICAgIHBlcmYubWVhc3VyZShgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCwgc3RhcnRUYWcsIGVuZFRhZyk7XHJcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcclxuICAgICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgZGV2dG9vbHNQZXJmRW5kKGluc3RhbmNlLCB0eXBlLCBzdXBwb3J0ZWQgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xyXG4gICAgfVxyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcclxuICAgICAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcclxufVxuXG4vKipcclxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXHJcbiAqIEl0IGlzIGNhbGxlZCB3aGVuIGEgcmVuZGVyZXIgaXMgY3JlYXRlZCwgaW4gYGJhc2VDcmVhdGVSZW5kZXJlcmAgc28gdGhhdFxyXG4gKiBpbXBvcnRpbmcgcnVudGltZS1jb3JlIGlzIHNpZGUtZWZmZWN0cyBmcmVlLlxyXG4gKlxyXG4gKiBpc3RhbmJ1bC1pZ25vcmUtbmV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcclxuICAgIGxldCBuZWVkV2FybiA9IGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9PUFRJT05TX0FQSV9fICE9PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBuZWVkV2FybiA9IHRydWU7XHJcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIG5lZWRXYXJuID0gdHJ1ZTtcclxuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZS4gSXQgaXMgcmVjb21tZW5kZWQgdG8gYCArXHJcbiAgICAgICAgICAgIGBjb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGV4cGxpY2l0bHkgcmVwbGFjZSBmZWF0dXJlIGZsYWcgZ2xvYmFscyBgICtcclxuICAgICAgICAgICAgYHdpdGggYm9vbGVhbiBsaXRlcmFscyB0byBnZXQgcHJvcGVyIHRyZWUtc2hha2luZyBpbiB0aGUgZmluYWwgYnVuZGxlLiBgICtcclxuICAgICAgICAgICAgYFNlZSBodHRwOi8vbGluay52dWVqcy5vcmcvZmVhdHVyZS1mbGFncyBmb3IgbW9yZSBkZXRhaWxzLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHByb2RFZmZlY3RPcHRpb25zID0ge1xyXG4gICAgc2NoZWR1bGVyOiBxdWV1ZUpvYixcclxuICAgIC8vICMxODAxLCAjMjA0MyBjb21wb25lbnQgcmVuZGVyIGVmZmVjdHMgc2hvdWxkIGFsbG93IHJlY3Vyc2l2ZSB1cGRhdGVzXHJcbiAgICBhbGxvd1JlY3Vyc2U6IHRydWVcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2RWZmZWN0T3B0aW9ucyhpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBzY2hlZHVsZXI6IHF1ZXVlSm9iLFxyXG4gICAgICAgIGFsbG93UmVjdXJzZTogdHJ1ZSxcclxuICAgICAgICBvblRyYWNrOiBpbnN0YW5jZS5ydGMgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSkgOiB2b2lkIDAsXHJcbiAgICAgICAgb25UcmlnZ2VyOiBpbnN0YW5jZS5ydGcgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSkgOiB2b2lkIDBcclxuICAgIH07XHJcbn1cclxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2VcclxuICAgIDtcclxuY29uc3Qgc2V0UmVmID0gKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSA9PiB7XHJcbiAgICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XHJcbiAgICAgICAgcmF3UmVmLmZvckVhY2goKHIsIGkpID0+IHNldFJlZihyLCBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgaXNVbm1vdW50KSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XHJcbiAgICAgICAgLy8gd2hlbiBtb3VudGluZyBhc3luYyBjb21wb25lbnRzLCBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmUsXHJcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgdGVtcGxhdGUgcmVmIGlzIGZvcndhcmRlZCB0byBpbm5lciBjb21wb25lbnRcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCByZWZWYWx1ZSA9IHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovXHJcbiAgICAgICAgPyB2bm9kZS5jb21wb25lbnQuZXhwb3NlZCB8fCB2bm9kZS5jb21wb25lbnQucHJveHlcclxuICAgICAgICA6IHZub2RlLmVsO1xyXG4gICAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XHJcbiAgICBjb25zdCB7IGk6IG93bmVyLCByOiByZWYgfSA9IHJhd1JlZjtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIW93bmVyKSB7XHJcbiAgICAgICAgd2FybihgTWlzc2luZyByZWYgb3duZXIgY29udGV4dC4gcmVmIGNhbm5vdCBiZSB1c2VkIG9uIGhvaXN0ZWQgdm5vZGVzLiBgICtcclxuICAgICAgICAgICAgYEEgdm5vZGUgd2l0aCByZWYgbXVzdCBiZSBjcmVhdGVkIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcclxuICAgIGNvbnN0IHJlZnMgPSBvd25lci5yZWZzID09PSBFTVBUWV9PQkogPyAob3duZXIucmVmcyA9IHt9KSA6IG93bmVyLnJlZnM7XHJcbiAgICBjb25zdCBzZXR1cFN0YXRlID0gb3duZXIuc2V0dXBTdGF0ZTtcclxuICAgIC8vIGR5bmFtaWMgcmVmIGNoYW5nZWQuIHVuc2V0IG9sZCByZWZcclxuICAgIGlmIChvbGRSZWYgIT0gbnVsbCAmJiBvbGRSZWYgIT09IHJlZikge1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIHJlZnNbb2xkUmVmXSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24oc2V0dXBTdGF0ZSwgb2xkUmVmKSkge1xyXG4gICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtvbGRSZWZdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgIG9sZFJlZi52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlzU3RyaW5nKHJlZikpIHtcclxuICAgICAgICBjb25zdCBkb1NldCA9ICgpID0+IHtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcmVmc1tyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCByZWYpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gIzE3ODk6IGZvciBub24tbnVsbCB2YWx1ZXMsIHNldCB0aGVtIGFmdGVyIHJlbmRlclxyXG4gICAgICAgIC8vIG51bGwgdmFsdWVzIG1lYW5zIHRoaXMgaXMgdW5tb3VudCBhbmQgaXQgc2hvdWxkIG5vdCBvdmVyd3JpdGUgYW5vdGhlclxyXG4gICAgICAgIC8vIHJlZiB3aXRoIHRoZSBzYW1lIGtleVxyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBkb1NldC5pZCA9IC0xO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZG9TZXQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvU2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNSZWYocmVmKSkge1xyXG4gICAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZWYudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBkb1NldC5pZCA9IC0xO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZG9TZXQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRvU2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XHJcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyIC8qIEZVTkNUSU9OX1JFRiAqLywgW3ZhbHVlLCByZWZzXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKCdJbnZhbGlkIHRlbXBsYXRlIHJlZiB0eXBlOicsIHZhbHVlLCBgKCR7dHlwZW9mIHZhbHVlfSlgKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFRoZSBjcmVhdGVSZW5kZXJlciBmdW5jdGlvbiBhY2NlcHRzIHR3byBnZW5lcmljIGFyZ3VtZW50czpcclxuICogSG9zdE5vZGUgYW5kIEhvc3RFbGVtZW50LCBjb3JyZXNwb25kaW5nIHRvIE5vZGUgYW5kIEVsZW1lbnQgdHlwZXMgaW4gdGhlXHJcbiAqIGhvc3QgZW52aXJvbm1lbnQuIEZvciBleGFtcGxlLCBmb3IgcnVudGltZS1kb20sIEhvc3ROb2RlIHdvdWxkIGJlIHRoZSBET01cclxuICogYE5vZGVgIGludGVyZmFjZSBhbmQgSG9zdEVsZW1lbnQgd291bGQgYmUgdGhlIERPTSBgRWxlbWVudGAgaW50ZXJmYWNlLlxyXG4gKlxyXG4gKiBDdXN0b20gcmVuZGVyZXJzIGNhbiBwYXNzIGluIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyB0eXBlcyBsaWtlIHRoaXM6XHJcbiAqXHJcbiAqIGBgYCBqc1xyXG4gKiBjb25zdCB7IHJlbmRlciwgY3JlYXRlQXBwIH0gPSBjcmVhdGVSZW5kZXJlcjxOb2RlLCBFbGVtZW50Pih7XHJcbiAqICAgcGF0Y2hQcm9wLFxyXG4gKiAgIC4uLm5vZGVPcHNcclxuICogfSlcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xyXG59XHJcbi8vIFNlcGFyYXRlIEFQSSBmb3IgY3JlYXRpbmcgaHlkcmF0aW9uLWVuYWJsZWQgcmVuZGVyZXIuXHJcbi8vIEh5ZHJhdGlvbiBsb2dpYyBpcyBvbmx5IHVzZWQgd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG1ha2luZyBpdFxyXG4vLyB0cmVlLXNoYWthYmxlLlxyXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XHJcbn1cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgLy8gY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgY2hlY2tcclxuICAgIHtcclxuICAgICAgICBpbml0RmVhdHVyZUZsYWdzKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldEdsb2JhbFRoaXMoKTtcclxuICAgICAgICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XHJcbiAgICAgICAgc2V0RGV2dG9vbHNIb29rKHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgaW5zZXJ0OiBob3N0SW5zZXJ0LCByZW1vdmU6IGhvc3RSZW1vdmUsIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCwgZm9yY2VQYXRjaFByb3A6IGhvc3RGb3JjZVBhdGNoUHJvcCwgY3JlYXRlRWxlbWVudDogaG9zdENyZWF0ZUVsZW1lbnQsIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCwgc2V0VGV4dDogaG9zdFNldFRleHQsIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLCBuZXh0U2libGluZzogaG9zdE5leHRTaWJsaW5nLCBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsIGNsb25lTm9kZTogaG9zdENsb25lTm9kZSwgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnQgfSA9IG9wdGlvbnM7XHJcbiAgICAvLyBOb3RlOiBmdW5jdGlvbnMgaW5zaWRlIHRoaXMgY2xvc3VyZSBzaG91bGQgdXNlIGBjb25zdCB4eHggPSAoKSA9PiB7fWBcclxuICAgIC8vIHN0eWxlIGluIG9yZGVyIHRvIHByZXZlbnQgYmVpbmcgaW5saW5lZCBieSBtaW5pZmllcnMuXHJcbiAgICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBpc1NWRyA9IGZhbHNlLCBzbG90U2NvcGVJZHMgPSBudWxsLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIC8vIHBhdGNoaW5nICYgbm90IHNhbWUgdHlwZSwgdW5tb3VudCBvbGQgdHJlZVxyXG4gICAgICAgIGlmIChuMSAmJiAhaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcclxuICAgICAgICAgICAgdW5tb3VudChuMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIG4xID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4yLnBhdGNoRmxhZyA9PT0gLTIgLyogQkFJTCAqLykge1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgbjIuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZyB9ID0gbjI7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGV4dDpcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NUZXh0KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29tbWVudCQxOlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRWxlbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCByZWZcclxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlVGV4dChuMi5jaGlsZHJlbikpLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcclxuICAgICAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudE5vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgJycpKSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBzdXBwb3J0IGZvciBkeW5hbWljIGNvbW1lbnRzXHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50U3RhdGljTm9kZSA9IChuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXYgLyBITVIgb25seVxyXG4gICAgICovXHJcbiAgICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgLy8gc3RhdGljIG5vZGVzIGFyZSBvbmx5IHBhdGNoZWQgZHVyaW5nIGRldiBmb3IgSE1SXHJcbiAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXHJcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xyXG4gICAgICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgICAgIG4yLmFuY2hvciA9IG4xLmFuY2hvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0sIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpID0+IHtcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGVsID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdEluc2VydChhbmNob3IsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XHJcbiAgICAgICAgICAgIGVsID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NFbGVtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgbjIudHlwZSA9PT0gJ3N2Zyc7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRFbGVtZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGNoRWxlbWVudChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGxldCBlbDtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHNoYXBlRmxhZywgdHJhbnNpdGlvbiwgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB2bm9kZS5lbCAmJlxyXG4gICAgICAgICAgICBob3N0Q2xvbmVOb2RlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID09PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGEgdm5vZGUgaGFzIG5vbi1udWxsIGVsLCBpdCBtZWFucyBpdCdzIGJlaW5nIHJldXNlZC5cclxuICAgICAgICAgICAgLy8gT25seSBzdGF0aWMgdm5vZGVzIGNhbiBiZSByZXVzZWQsIHNvIGl0cyBtb3VudGVkIERPTSBub2RlcyBzaG91bGQgYmVcclxuICAgICAgICAgICAgLy8gZXhhY3RseSB0aGUgc2FtZSwgYW5kIHdlIGNhbiBzaW1wbHkgZG8gYSBjbG9uZSBoZXJlLlxyXG4gICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaW4gcHJvZHVjdGlvbiBzaW5jZSBjbG9uZWQgdHJlZXMgY2Fubm90IGJlIEhNUiB1cGRhdGVkLlxyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENsb25lTm9kZSh2bm9kZS5lbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzLCBwcm9wcyk7XHJcbiAgICAgICAgICAgIC8vIG1vdW50IGNoaWxkcmVuIGZpcnN0LCBzaW5jZSBzb21lIHByb3BzIG1heSByZWx5IG9uIGNoaWxkIGNvbnRlbnRcclxuICAgICAgICAgICAgLy8gYmVpbmcgYWxyZWFkeSByZW5kZXJlZCwgZS5nLiBgPHNlbGVjdCB2YWx1ZT5gXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgdm5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKHZub2RlLmNoaWxkcmVuLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcgJiYgdHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNjb3BlSWRcclxuICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgdm5vZGUsIHZub2RlLnNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCAnX192bm9kZScsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2bm9kZSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Z1ZVBhcmVudENvbXBvbmVudCcsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBwYXJlbnRDb21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlTW91bnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gIzE1ODMgRm9yIGluc2lkZSBzdXNwZW5zZSArIHN1c3BlbnNlIG5vdCByZXNvbHZlZCBjYXNlLCBlbnRlciBob29rIHNob3VsZCBjYWxsIHdoZW4gc3VzcGVuc2UgcmVzb2x2ZWRcclxuICAgICAgICAvLyAjMTY4OSBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2UgcmVzb2x2ZWQgY2FzZSwganVzdCBjYWxsIGl0XHJcbiAgICAgICAgY29uc3QgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSAoIXBhcmVudFN1c3BlbnNlIHx8IChwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkpICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkO1xyXG4gICAgICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZU1vdW50ZWQpIHx8XHJcbiAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzIHx8XHJcbiAgICAgICAgICAgIGRpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2V0U2NvcGVJZCA9IChlbCwgdm5vZGUsIHNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHNjb3BlSWQpIHtcclxuICAgICAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNjb3BlSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2xvdFNjb3BlSWRzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdFNjb3BlSWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2xvdFNjb3BlSWRzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBzdWJUcmVlID0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWU7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHN1YlRyZWUucGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgJiAyMDQ4IC8qIERFVl9ST09UX0ZSQUdNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJUcmVlID1cclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTaW5nbGVSb290KHN1YlRyZWUuY2hpbGRyZW4pIHx8IHN1YlRyZWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRWTm9kZSA9IHBhcmVudENvbXBvbmVudC52bm9kZTtcclxuICAgICAgICAgICAgICAgIHNldFNjb3BlSWQoZWwsIHBhcmVudFZOb2RlLCBwYXJlbnRWTm9kZS5zY29wZUlkLCBwYXJlbnRWTm9kZS5zbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudC5wYXJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHN0YXJ0ID0gMCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gKGNoaWxkcmVuW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGNoaWxkcmVuW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xyXG4gICAgICAgICAgICBwYXRjaChudWxsLCBjaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoRWxlbWVudCA9IChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsID0gKG4yLmVsID0gbjEuZWwpO1xyXG4gICAgICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcclxuICAgICAgICAvLyAjMTQyNiB0YWtlIHRoZSBvbGQgdm5vZGUncyBwYXRjaCBmbGFnIGludG8gYWNjb3VudCBzaW5jZSB1c2VyIG1heSBjbG9uZSBhXHJcbiAgICAgICAgLy8gY29tcGlsZXItZ2VuZXJhdGVkIHZub2RlLCB3aGljaCBkZS1vcHRzIHRvIEZVTExfUFJPUFNcclxuICAgICAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLztcclxuICAgICAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyA9IDA7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICAvLyB0aGUgcHJlc2VuY2Ugb2YgYSBwYXRjaEZsYWcgbWVhbnMgdGhpcyBlbGVtZW50J3MgcmVuZGVyIGNvZGUgd2FzXHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXIgYW5kIGNhbiB0YWtlIHRoZSBmYXN0IHBhdGguXHJcbiAgICAgICAgICAgIC8vIGluIHRoaXMgcGF0aCBvbGQgbm9kZSBhbmQgbmV3IG5vZGUgYXJlIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBzaGFwZVxyXG4gICAgICAgICAgICAvLyAoaS5lLiBhdCB0aGUgZXhhY3Qgc2FtZSBwb3NpdGlvbiBpbiB0aGUgc291cmNlIHRlbXBsYXRlKVxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gZWxlbWVudCBwcm9wcyBjb250YWluIGR5bmFtaWMga2V5cywgZnVsbCBkaWZmIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hQcm9wcyhlbCwgbjIsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xhc3NcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgY2xhc3MgYmluZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMiAvKiBDTEFTUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRQcm9wcy5jbGFzcyAhPT0gbmV3UHJvcHMuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ2NsYXNzJywgbnVsbCwgbmV3UHJvcHMuY2xhc3MsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzdHlsZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBzdHlsZSBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQgLyogU1RZTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCAnc3R5bGUnLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIHByb3AvYXR0ciBiaW5kaW5nc1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgdGhhbiBjbGFzcyBhbmQgc3R5bGUuIFRoZSBrZXlzIG9mIGR5bmFtaWMgcHJvcC9hdHRycyBhcmUgc2F2ZWQgZm9yXHJcbiAgICAgICAgICAgICAgICAvLyBmYXN0ZXIgaXRlcmF0aW9uLlxyXG4gICAgICAgICAgICAgICAgLy8gTm90ZSBkeW5hbWljIGtleXMgbGlrZSA6W2Zvb109XCJiYXJcIiB3aWxsIGNhdXNlIHRoaXMgb3B0aW1pemF0aW9uIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBiYWlsIG91dCBhbmQgZ28gdGhyb3VnaCBhIGZ1bGwgZGlmZiBiZWNhdXNlIHdlIG5lZWQgdG8gdW5zZXQgdGhlIG9sZCBrZXlcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA4IC8qIFBST1BTICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZsYWcgaXMgcHJlc2VudCB0aGVuIGR5bmFtaWNQcm9wcyBtdXN0IGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IG4yLmR5bmFtaWNQcm9wcztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhvc3RGb3JjZVBhdGNoUHJvcCAmJiBob3N0Rm9yY2VQYXRjaFByb3AoZWwsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCBuMS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG9ubHkgZHluYW1pYyB0ZXh0IGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMSAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB1bm9wdGltaXplZCwgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXJlQ2hpbGRyZW5TVkcgPSBpc1NWRyAmJiBuMi50eXBlICE9PSAnZm9yZWlnbk9iamVjdCc7XHJcbiAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBhcmVDaGlsZHJlblNWRywgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcsIHNsb3RTY29wZUlkcywgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5ld1Byb3BzLm9uVm5vZGVVcGRhdGVkKSB8fCBkaXJzKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAndXBkYXRlZCcpO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIFRoZSBmYXN0IHBhdGggZm9yIGJsb2Nrcy5cclxuICAgIGNvbnN0IHBhdGNoQmxvY2tDaGlsZHJlbiA9IChvbGRDaGlsZHJlbiwgbmV3Q2hpbGRyZW4sIGZhbGxiYWNrQ29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdWTm9kZSA9IG5ld0NoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGNvbnRhaW5lciAocGFyZW50IGVsZW1lbnQpIGZvciB0aGUgcGF0Y2guXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IFxyXG4gICAgICAgICAgICAvLyBvbGRWTm9kZSBtYXkgYmUgYW4gZXJyb3JlZCBhc3luYyBzZXR1cCgpIGNvbXBvbmVudCBpbnNpZGUgU3VzcGVuc2VcclxuICAgICAgICAgICAgLy8gd2hpY2ggd2lsbCBub3QgaGF2ZSBhIG1vdW50ZWQgZWxlbWVudFxyXG4gICAgICAgICAgICBvbGRWTm9kZS5lbCAmJlxyXG4gICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcclxuICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBGcmFnbWVudCBpdHNlbGYgc28gaXQgY2FuIG1vdmUgaXRzIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgKG9sZFZOb2RlLnR5cGUgPT09IEZyYWdtZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBkaWZmZXJlbnQgbm9kZXMsIHRoZXJlIGlzIGdvaW5nIHRvIGJlIGEgcmVwbGFjZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICAhaXNTYW1lVk5vZGVUeXBlKG9sZFZOb2RlLCBuZXdWTm9kZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAvLyAtIEluIHRoZSBjYXNlIG9mIGEgY29tcG9uZW50LCBpdCBjb3VsZCBjb250YWluIGFueXRoaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVk5vZGUuc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pXHJcbiAgICAgICAgICAgICAgICA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKVxyXG4gICAgICAgICAgICAgICAgOiAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tDb250YWluZXI7XHJcbiAgICAgICAgICAgIHBhdGNoKG9sZFZOb2RlLCBuZXdWTm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgdm5vZGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcclxuICAgICAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IHZhbGlkIHByb3BcclxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKGhvc3RGb3JjZVBhdGNoUHJvcCAmJiBob3N0Rm9yY2VQYXRjaFByb3AoZWwsIGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBwcmV2LCBuZXh0LCBpc1NWRywgdm5vZGUuY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmICEoa2V5IGluIG5ld1Byb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG9sZFByb3BzW2tleV0sIG51bGwsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U3RhcnRBbmNob3IgPSAobjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICBjb25zdCBmcmFnbWVudEVuZEFuY2hvciA9IChuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIHNsb3RTY29wZUlkczogZnJhZ21lbnRTbG90U2NvcGVJZHMgfSA9IG4yO1xyXG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIHNsb3QgZnJhZ21lbnQgd2l0aCA6c2xvdHRlZCBzY29wZSBpZHNcclxuICAgICAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcclxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzXHJcbiAgICAgICAgICAgICAgICA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpXHJcbiAgICAgICAgICAgICAgICA6IGZyYWdtZW50U2xvdFNjb3BlSWRzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSAwO1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudFN0YXJ0QW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gYSBmcmFnbWVudCBjYW4gb25seSBoYXZlIGFycmF5IGNoaWxkcmVuXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgYXJlIGVpdGhlciBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyLCBvciBpbXBsaWNpdGx5IGNyZWF0ZWRcclxuICAgICAgICAgICAgLy8gZnJvbSBhcnJheXMuXHJcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4objIuY2hpbGRyZW4sIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovICYmXHJcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gJiZcclxuICAgICAgICAgICAgICAgIC8vICMyNzE1IHRoZSBwcmV2aW91cyBmcmFnbWVudCBjb3VsZCd2ZSBiZWVuIGEgQkFJTGVkIG9uZSBhcyBhIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgLy8gb2YgcmVuZGVyU2xvdCgpIHdpdGggbm8gdmFsaWQgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBzdGFibGUgZnJhZ21lbnQgKHRlbXBsYXRlIHJvb3Qgb3IgPHRlbXBsYXRlIHYtZm9yPikgZG9lc24ndCBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBjaGlsZHJlbiBvcmRlciwgYnV0IGl0IG1heSBjb250YWluIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxyXG4gICAgICAgICAgICAgICAgLy8gIGdldCBtb3ZlZCBhcm91bmQuIE1ha2Ugc3VyZSBhbGwgcm9vdCBsZXZlbCB2bm9kZXMgaW5oZXJpdCBlbC5cclxuICAgICAgICAgICAgICAgIC8vICMyMTM0IG9yIGlmIGl0J3MgYSBjb21wb25lbnQgcm9vdCwgaXQgbWF5IGFsc28gZ2V0IG1vdmVkIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cclxuICAgICAgICAgICAgICAgIG4yLmtleSAhPSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudENvbXBvbmVudCAmJiBuMiA9PT0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUgLyogc2hhbGxvdyAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBrZXllZCAvIHVua2V5ZWQsIG9yIG1hbnVhbCBmcmFnbWVudHMuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3Iga2V5ZWQgJiB1bmtleWVkLCBzaW5jZSB0aGV5IGFyZSBjb21waWxlciBnZW5lcmF0ZWQgZnJvbSB2LWZvcixcclxuICAgICAgICAgICAgICAgIC8vIGVhY2ggY2hpbGQgaXMgZ3VhcmFudGVlZCB0byBiZSBhIGJsb2NrIHNvIHRoZSBmcmFnbWVudCB3aWxsIG5ldmVyXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q29tcG9uZW50ID0gKGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoaW5pdGlhbFZOb2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmplY3QgcmVuZGVyZXIgaW50ZXJuYWxzIGZvciBrZWVwQWxpdmVcclxuICAgICAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc29sdmUgcHJvcHMgYW5kIHNsb3RzIGZvciBzZXR1cCBjb250ZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxyXG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vIEdpdmUgaXQgYSBwbGFjZWhvbGRlciBpZiB0aGlzIGlzIG5vdCBoeWRyYXRpb25cclxuICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgc2VsZi1kZWZpbmVkIGZhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCQxKSk7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobnVsbCwgcGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldHVwUmVuZGVyRWZmZWN0KGluc3RhbmNlLCBpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgbW91bnRgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50ID0gKG4xLCBuMiwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSAobjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50KTtcclxuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgICAgICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3luYyAmIHN0aWxsIHBlbmRpbmcgLSBqdXN0IHVwZGF0ZSBwcm9wcyBhbmQgc2xvdHNcclxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjb21wb25lbnQncyByZWFjdGl2ZSBlZmZlY3QgZm9yIHJlbmRlciBpc24ndCBzZXQtdXAgeWV0XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbCB1cGRhdGVcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcclxuICAgICAgICAgICAgICAgIC8vIGluIGNhc2UgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBhbHNvIHF1ZXVlZCwgcmVtb3ZlIGl0IHRvIGF2b2lkXHJcbiAgICAgICAgICAgICAgICAvLyBkb3VibGUgdXBkYXRpbmcgdGhlIHNhbWUgY2hpbGQgY29tcG9uZW50IGluIHRoZSBzYW1lIGZsdXNoLlxyXG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZUpvYihpbnN0YW5jZS51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UudXBkYXRlIGlzIHRoZSByZWFjdGl2ZSBlZmZlY3QgcnVubmVyLlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgbjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcclxuICAgICAgICBpbnN0YW5jZS51cGRhdGUgPSBlZmZlY3QoZnVuY3Rpb24gY29tcG9uZW50RWZmZWN0KCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGJtLCBtLCBwYXJlbnQgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwgJiYgaHlkcmF0ZU5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBoYXMgYWRvcHRlZCBob3N0IG5vZGUgLSBwZXJmb3JtIGh5ZHJhdGlvbiBpbnN0ZWFkIG9mIG1vdW50LlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZU5vZGUoZWwsIGluc3RhbmNlLnN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS50eXBlLl9fYXN5bmNMb2FkZXIoKS50aGVuKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlOiB3ZSBhcmUgbW92aW5nIHRoZSByZW5kZXIgY2FsbCBpbnRvIGFuIGFzeW5jIGNhbGxiYWNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBtZWFucyBpdCB3b24ndCB0cmFjayBkZXBlbmRlbmNpZXMgLSBidXQgaXQncyBvayBiZWNhdXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgc2VydmVyLXJlbmRlcmVkIGFzeW5jIHdyYXBwZXIgaXMgYWxyZWFkeSBpbiByZXNvbHZlZCBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgaXQgd2lsbCBuZXZlciBuZWVkIHRvIGNoYW5nZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT4gIWluc3RhbmNlLmlzVW5tb3VudGVkICYmIGh5ZHJhdGVTdWJUcmVlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0ZVN1YlRyZWUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJUcmVlID0gKGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWTm9kZS5lbCA9IHN1YlRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3VudGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVNb3VudGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBzY29wZWRJbml0aWFsVk5vZGUpLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cclxuICAgICAgICAgICAgICAgIC8vICMxNzQyIGFjdGl2YXRlZCBob29rIG11c3QgYmUgYWNjZXNzZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgaG9vayBtYXkgYmUgaW5qZWN0ZWQgYnkgYSBjaGlsZCBrZWVwLWFsaXZlXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICMyNDU4OiBkZWZlcmVuY2UgbW91bnQtb25seSBvYmplY3QgcGFyYW1ldGVycyB0byBwcmV2ZW50IG1lbWxlYWtzXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUgPSBjb250YWluZXIgPSBhbmNob3IgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRyaWdnZXJlZCBieSBtdXRhdGlvbiBvZiBjb21wb25lbnQncyBvd24gc3RhdGUgKG5leHQ6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcclxuICAgICAgICAgICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlVXBkYXRlIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmIChidSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVCZWZvcmVVcGRhdGVcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyByZW5kZXJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IG5leHRUcmVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXRjaChwcmV2VHJlZSwgbmV4dFRyZWUsIFxyXG4gICAgICAgICAgICAgICAgLy8gcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIHRlbGVwb3J0XHJcbiAgICAgICAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcclxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5OZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi10cmlnZ2VyZWQgdXBkYXRlLiBJbiBjYXNlIG9mIEhPQywgdXBkYXRlIHBhcmVudCBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyB2bm9kZSBlbC4gSE9DIGlzIGluZGljYXRlZCBieSBwYXJlbnQgaW5zdGFuY2UncyBzdWJUcmVlIHBvaW50aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2hpbGQgY29tcG9uZW50J3Mgdm5vZGVcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZWQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKHUpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZVVwZGF0ZWRcclxuICAgICAgICAgICAgICAgIGlmICgodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVVcGRhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjcmVhdGVEZXZFZmZlY3RPcHRpb25zKGluc3RhbmNlKSA6IHByb2RFZmZlY3RPcHRpb25zKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlLm93bmVySW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyID0gKGluc3RhbmNlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG5leHRWTm9kZS5jb21wb25lbnQgPSBpbnN0YW5jZTtcclxuICAgICAgICBjb25zdCBwcmV2UHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcztcclxuICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG5leHRWTm9kZTtcclxuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbnVsbDtcclxuICAgICAgICB1cGRhdGVQcm9wcyhpbnN0YW5jZSwgbmV4dFZOb2RlLnByb3BzLCBwcmV2UHJvcHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgdXBkYXRlU2xvdHMoaW5zdGFuY2UsIG5leHRWTm9kZS5jaGlsZHJlbiwgb3B0aW1pemVkKTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgLy8gcHJvcHMgdXBkYXRlIG1heSBoYXZlIHRyaWdnZXJlZCBwcmUtZmx1c2ggd2F0Y2hlcnMuXHJcbiAgICAgICAgLy8gZmx1c2ggdGhlbSBiZWZvcmUgdGhlIHJlbmRlciB1cGRhdGUuXHJcbiAgICAgICAgZmx1c2hQcmVGbHVzaENicyh1bmRlZmluZWQsIGluc3RhbmNlLnVwZGF0ZSk7XHJcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XHJcbiAgICAgICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICAvLyBmYXN0IHBhdGhcclxuICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNvdWxkIGJlIGVpdGhlciBmdWxseS1rZXllZCBvciBtaXhlZCAoc29tZSBrZXllZCBzb21lIG5vdClcclxuICAgICAgICAgICAgICAgIC8vIHByZXNlbmNlIG9mIHBhdGNoRmxhZyBtZWFucyBjaGlsZHJlbiBhcmUgZ3VhcmFudGVlZCB0byBiZSBhcnJheXNcclxuICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhdGNoRmxhZyAmIDI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB1bmtleWVkXHJcbiAgICAgICAgICAgICAgICBwYXRjaFVua2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNoaWxkcmVuIGhhcyAzIHBvc3NpYmlsaXRpZXM6IHRleHQsIGFycmF5IG9yIG5vIGNoaWxkcmVuLlxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgLy8gdGV4dCBjaGlsZHJlbiBmYXN0IHBhdGhcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYzIgIT09IGMxKSB7XHJcbiAgICAgICAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0d28gYXJyYXlzLCBjYW5ub3QgYXNzdW1lIGFueXRoaW5nLCBkbyBmdWxsIGRpZmZcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIG5ldyBjaGlsZHJlbiwganVzdCB1bm1vdW50IG9sZFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihjMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwcmV2IGNoaWxkcmVuIHdhcyB0ZXh0IE9SIG51bGxcclxuICAgICAgICAgICAgICAgIC8vIG5ldyBjaGlsZHJlbiBpcyBhcnJheSBPUiBudWxsXHJcbiAgICAgICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG1vdW50IG5ldyBpZiBhcnJheVxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hVbmtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XHJcbiAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pKTtcclxuICAgICAgICAgICAgcGF0Y2goYzFbaV0sIG5leHRDaGlsZCwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGRcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlLCBmYWxzZSwgY29tbW9uTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG1vdW50IG5ld1xyXG4gICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBjb21tb25MZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBjYW4gYmUgYWxsLWtleWVkIG9yIG1peGVkXHJcbiAgICBjb25zdCBwYXRjaEtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIGNvbnN0IGwyID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGxldCBlMSA9IGMxLmxlbmd0aCAtIDE7IC8vIHByZXYgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgbGV0IGUyID0gbDIgLSAxOyAvLyBuZXh0IGVuZGluZyBpbmRleFxyXG4gICAgICAgIC8vIDEuIHN5bmMgZnJvbSBzdGFydFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKSBkIGVcclxuICAgICAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4xID0gYzFbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAyLiBzeW5jIGZyb20gZW5kXHJcbiAgICAgICAgLy8gYSAoYiBjKVxyXG4gICAgICAgIC8vIGQgZSAoYiBjKVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtlMV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4yID0gKGMyW2UyXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltlMl0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSkpO1xyXG4gICAgICAgICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoKG4xLCBuMiwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZTEtLTtcclxuICAgICAgICAgICAgZTItLTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gMy4gY29tbW9uIHNlcXVlbmNlICsgbW91bnRcclxuICAgICAgICAvLyAoYSBiKVxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyBpID0gMiwgZTEgPSAxLCBlMiA9IDJcclxuICAgICAgICAvLyAoYSBiKVxyXG4gICAgICAgIC8vIGMgKGEgYilcclxuICAgICAgICAvLyBpID0gMCwgZTEgPSAtMSwgZTIgPSAwXHJcbiAgICAgICAgaWYgKGkgPiBlMSkge1xyXG4gICAgICAgICAgICBpZiAoaSA8PSBlMikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFBvcyA9IGUyICsgMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRQb3MgPCBsMiA/IGMyW25leHRQb3NdLmVsIDogcGFyZW50QW5jaG9yO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNC4gY29tbW9uIHNlcXVlbmNlICsgdW5tb3VudFxyXG4gICAgICAgIC8vIChhIGIpIGNcclxuICAgICAgICAvLyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDIsIGUyID0gMVxyXG4gICAgICAgIC8vIGEgKGIgYylcclxuICAgICAgICAvLyAoYiBjKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IDAsIGUyID0gLTFcclxuICAgICAgICBlbHNlIGlmIChpID4gZTIpIHtcclxuICAgICAgICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDUuIHVua25vd24gc2VxdWVuY2VcclxuICAgICAgICAvLyBbaSAuLi4gZTEgKyAxXTogYSBiIFtjIGQgZV0gZiBnXHJcbiAgICAgICAgLy8gW2kgLi4uIGUyICsgMV06IGEgYiBbZSBkIGMgaF0gZiBnXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gNCwgZTIgPSA1XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHMxID0gaTsgLy8gcHJldiBzdGFydGluZyBpbmRleFxyXG4gICAgICAgICAgICBjb25zdCBzMiA9IGk7IC8vIG5leHQgc3RhcnRpbmcgaW5kZXhcclxuICAgICAgICAgICAgLy8gNS4xIGJ1aWxkIGtleTppbmRleCBtYXAgZm9yIG5ld0NoaWxkcmVuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHMyOyBpIDw9IGUyOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYga2V5VG9OZXdJbmRleE1hcC5oYXMobmV4dENoaWxkLmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLCBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSwgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGtleVRvTmV3SW5kZXhNYXAuc2V0KG5leHRDaGlsZC5rZXksIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIDUuMiBsb29wIHRocm91Z2ggb2xkIGNoaWxkcmVuIGxlZnQgdG8gYmUgcGF0Y2hlZCBhbmQgdHJ5IHRvIHBhdGNoXHJcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIG5vZGVzICYgcmVtb3ZlIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50XHJcbiAgICAgICAgICAgIGxldCBqO1xyXG4gICAgICAgICAgICBsZXQgcGF0Y2hlZCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvQmVQYXRjaGVkID0gZTIgLSBzMiArIDE7XHJcbiAgICAgICAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyB1c2VkIHRvIHRyYWNrIHdoZXRoZXIgYW55IG5vZGUgaGFzIG1vdmVkXHJcbiAgICAgICAgICAgIGxldCBtYXhOZXdJbmRleFNvRmFyID0gMDtcclxuICAgICAgICAgICAgLy8gd29ya3MgYXMgTWFwPG5ld0luZGV4LCBvbGRJbmRleD5cclxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9sZEluZGV4IGlzIG9mZnNldCBieSArMVxyXG4gICAgICAgICAgICAvLyBhbmQgb2xkSW5kZXggPSAwIGlzIGEgc3BlY2lhbCB2YWx1ZSBpbmRpY2F0aW5nIHRoZSBuZXcgbm9kZSBoYXNcclxuICAgICAgICAgICAgLy8gbm8gY29ycmVzcG9uZGluZyBvbGQgbm9kZS5cclxuICAgICAgICAgICAgLy8gdXNlZCBmb3IgZGV0ZXJtaW5pbmcgbG9uZ2VzdCBzdGFibGUgc3Vic2VxdWVuY2VcclxuICAgICAgICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspXHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaGVkID49IHRvQmVQYXRjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsIG5ldyBjaGlsZHJlbiBoYXZlIGJlZW4gcGF0Y2hlZCBzbyB0aGlzIGNhbiBvbmx5IGJlIGEgcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuZXdJbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5LWxlc3Mgbm9kZSwgdHJ5IHRvIGxvY2F0ZSBhIGtleS1sZXNzIG5vZGUgb2YgdGhlIHNhbWUgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtqIC0gczJdID09PSAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0luZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdJbmRleFRvT2xkSW5kZXhNYXBbbmV3SW5kZXggLSBzMl0gPSBpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPj0gbWF4TmV3SW5kZXhTb0Zhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKHByZXZDaGlsZCwgYzJbbmV3SW5kZXhdLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hlZCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIDUuMyBtb3ZlIGFuZCBtb3VudFxyXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZSBsb25nZXN0IHN0YWJsZSBzdWJzZXF1ZW5jZSBvbmx5IHdoZW4gbm9kZXMgaGF2ZSBtb3ZlZFxyXG4gICAgICAgICAgICBjb25zdCBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSA9IG1vdmVkXHJcbiAgICAgICAgICAgICAgICA/IGdldFNlcXVlbmNlKG5ld0luZGV4VG9PbGRJbmRleE1hcClcclxuICAgICAgICAgICAgICAgIDogRU1QVFlfQVJSO1xyXG4gICAgICAgICAgICBqID0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgLy8gbG9vcGluZyBiYWNrd2FyZHMgc28gdGhhdCB3ZSBjYW4gdXNlIGxhc3QgcGF0Y2hlZCBub2RlIGFzIGFuY2hvclxyXG4gICAgICAgICAgICBmb3IgKGkgPSB0b0JlUGF0Y2hlZCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBzMiArIGk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltuZXh0SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dEluZGV4ICsgMSA8IGwyID8gYzJbbmV4dEluZGV4ICsgMV0uZWwgOiBwYXJlbnRBbmNob3I7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW91bnQgbmV3XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV4dENoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBpZjpcclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBzdGFibGUgc3Vic2VxdWVuY2UgKGUuZy4gYSByZXZlcnNlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9SIGN1cnJlbnQgbm9kZSBpcyBub3QgYW1vbmcgdGhlIHN0YWJsZSBzZXF1ZW5jZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIgLyogUkVPUkRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdmUgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSwgcGFyZW50U3VzcGVuc2UgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBlbCwgdHlwZSwgdHJhbnNpdGlvbiwgY2hpbGRyZW4sIHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS5tb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgIHR5cGUubW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBob3N0SW5zZXJ0KHZub2RlLmFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcclxuICAgICAgICAgICAgbW92ZVN0YXRpY05vZGUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzaW5nbGUgbm9kZXNcclxuICAgICAgICBjb25zdCBuZWVkVHJhbnNpdGlvbiA9IG1vdmVUeXBlICE9PSAyIC8qIFJFT1JERVIgKi8gJiZcclxuICAgICAgICAgICAgc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb247XHJcbiAgICAgICAgaWYgKG5lZWRUcmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBFTlRFUiAqLykge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gdHJhbnNpdGlvbi5lbnRlcihlbCksIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUsIGFmdGVyTGVhdmUgfSA9IHRyYW5zaXRpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZW1vdmUgPSAoKSA9PiBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVhdmUoZWwsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChkZWxheUxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXlMZWF2ZShlbCwgcmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVyZm9ybUxlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdW5tb3VudCA9ICh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCByZWYsIGNoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIHNoYXBlRmxhZywgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICAvLyB1bnNldCByZWZcclxuICAgICAgICBpZiAocmVmICE9IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5kZWFjdGl2YXRlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIGRpcnM7XHJcbiAgICAgICAgbGV0IHZub2RlSG9vaztcclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVVbm1vdW50KSkge1xyXG4gICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHVubW91bnRDb21wb25lbnQodm5vZGUuY29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuc3VzcGVuc2UudW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRJbnZva2VEaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVVbm1vdW50Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDY0IC8qIFRFTEVQT1JUICovKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50eXBlLnJlbW92ZSh2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgb3B0aW1pemVkLCBpbnRlcm5hbHMsIGRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkeW5hbWljQ2hpbGRyZW4gJiZcclxuICAgICAgICAgICAgICAgIC8vICMxMTUzOiBmYXN0IHBhdGggc2hvdWxkIG5vdCBiZSB0YWtlbiBmb3Igbm9uLXN0YWJsZSAodi1mb3IpIGZyYWdtZW50c1xyXG4gICAgICAgICAgICAgICAgKHR5cGUgIT09IEZyYWdtZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhdGNoRmxhZyA+IDAgJiYgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgYmxvY2sgbm9kZXM6IG9ubHkgbmVlZCB0byB1bm1vdW50IGR5bmFtaWMgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oZHluYW1pY0NoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBmYWxzZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHR5cGUgPT09IEZyYWdtZW50ICYmXHJcbiAgICAgICAgICAgICAgICAocGF0Y2hGbGFnICYgMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pKSB8fFxyXG4gICAgICAgICAgICAgICAgKCFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpIHx8IHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIHNob3VsZEludm9rZURpcnMgJiZcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICd1bm1vdW50ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB0eXBlLCBlbCwgYW5jaG9yLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICByZW1vdmVTdGF0aWNOb2RlKHZub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkICYmIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5hZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4gbGVhdmUoZWwsIHBlcmZvcm1SZW1vdmUpO1xyXG4gICAgICAgICAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsYXlMZWF2ZSh2bm9kZS5lbCwgcGVyZm9ybVJlbW92ZSwgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwZXJmb3JtUmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XHJcbiAgICAgICAgLy8gRm9yIGZyYWdtZW50cywgZGlyZWN0bHkgcmVtb3ZlIGFsbCBjb250YWluZWQgRE9NIG5vZGVzLlxyXG4gICAgICAgIC8vIChmcmFnbWVudCBjaGlsZCBub2RlcyBjYW5ub3QgaGF2ZSB0cmFuc2l0aW9uKVxyXG4gICAgICAgIGxldCBuZXh0O1xyXG4gICAgICAgIHdoaWxlIChjdXIgIT09IGVuZCkge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoY3VyKTtcclxuICAgICAgICAgICAgY3VyID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFJlbW92ZShlbmQpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UudHlwZS5fX2htcklkKSB7XHJcbiAgICAgICAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGJ1bSwgZWZmZWN0cywgdXBkYXRlLCBzdWJUcmVlLCB1bSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgLy8gYmVmb3JlVW5tb3VudCBob29rXHJcbiAgICAgICAgaWYgKGJ1bSkge1xyXG4gICAgICAgICAgICBpbnZva2VBcnJheUZucyhidW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWZmZWN0cykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHN0b3AoZWZmZWN0c1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXBkYXRlIG1heSBiZSBudWxsIGlmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgaXRzIGFzeW5jXHJcbiAgICAgICAgLy8gc2V0dXAgaGFzIHJlc29sdmVkLlxyXG4gICAgICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgc3RvcCh1cGRhdGUpO1xyXG4gICAgICAgICAgICB1bm1vdW50KHN1YlRyZWUsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1bm1vdW50ZWQgaG9va1xyXG4gICAgICAgIGlmICh1bSkge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAvLyBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIGRlcCBpbnNpZGUgYSBwZW5kaW5nIHN1c3BlbnNlIGlzIHVubW91bnRlZCBiZWZvcmVcclxuICAgICAgICAvLyBpdHMgYXN5bmMgZGVwIHJlc29sdmVzLiBUaGlzIHNob3VsZCByZW1vdmUgdGhlIGRlcCBmcm9tIHRoZSBzdXNwZW5zZSwgYW5kXHJcbiAgICAgICAgLy8gY2F1c2UgdGhlIHN1c3BlbnNlIHRvIHJlc29sdmUgaW1tZWRpYXRlbHkgaWYgdGhhdCB3YXMgdGhlIGxhc3QgZGVwLlxyXG4gICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJlxyXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmXHJcbiAgICAgICAgICAgICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCAmJlxyXG4gICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJlxyXG4gICAgICAgICAgICBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xyXG4gICAgICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBnZXROZXh0SG9zdE5vZGUgPSB2bm9kZSA9PiB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2bm9kZS5zdXNwZW5zZS5uZXh0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBob3N0TmV4dFNpYmxpbmcoKHZub2RlLmFuY2hvciB8fCB2bm9kZS5lbCkpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbmRlciA9ICh2bm9kZSwgY29udGFpbmVyLCBpc1NWRykgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChjb250YWluZXIuX3Zub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXRjaChjb250YWluZXIuX3Zub2RlIHx8IG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIG51bGwsIG51bGwsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcclxuICAgICAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaW50ZXJuYWxzID0ge1xyXG4gICAgICAgIHA6IHBhdGNoLFxyXG4gICAgICAgIHVtOiB1bm1vdW50LFxyXG4gICAgICAgIG06IG1vdmUsXHJcbiAgICAgICAgcjogcmVtb3ZlLFxyXG4gICAgICAgIG10OiBtb3VudENvbXBvbmVudCxcclxuICAgICAgICBtYzogbW91bnRDaGlsZHJlbixcclxuICAgICAgICBwYzogcGF0Y2hDaGlsZHJlbixcclxuICAgICAgICBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbixcclxuICAgICAgICBuOiBnZXROZXh0SG9zdE5vZGUsXHJcbiAgICAgICAgbzogb3B0aW9uc1xyXG4gICAgfTtcclxuICAgIGxldCBoeWRyYXRlO1xyXG4gICAgbGV0IGh5ZHJhdGVOb2RlO1xyXG4gICAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoaW50ZXJuYWxzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVuZGVyLFxyXG4gICAgICAgIGh5ZHJhdGUsXHJcbiAgICAgICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpbnZva2VWTm9kZUhvb2soaG9vaywgaW5zdGFuY2UsIHZub2RlLCBwcmV2Vk5vZGUgPSBudWxsKSB7XHJcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNyAvKiBWTk9ERV9IT09LICovLCBbXHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcHJldlZOb2RlXHJcbiAgICBdKTtcclxufVxyXG4vKipcclxuICogIzExNTZcclxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXHJcbiAqIGluc2lkZSBhIGJsb2NrIGFsc28gaW5oZXJpdCB0aGUgRE9NIGVsZW1lbnQgZnJvbSB0aGUgcHJldmlvdXMgdHJlZSBzbyB0aGF0XHJcbiAqIEhNUiB1cGRhdGVzICh3aGljaCBhcmUgZnVsbCB1cGRhdGVzKSBjYW4gcmV0cmlldmUgdGhlIGVsZW1lbnQgZm9yIHBhdGNoaW5nLlxyXG4gKlxyXG4gKiAjMjA4MFxyXG4gKiBJbnNpZGUga2V5ZWQgYHRlbXBsYXRlYCBmcmFnbWVudCBzdGF0aWMgY2hpbGRyZW4sIGlmIGEgZnJhZ21lbnQgaXMgbW92ZWQsXHJcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBtb3ZlZCBzbyB0aGF0IG5lZWQgaW5oZXJpdCBlbCBmb3JtIHByZXZpb3VzIG5vZGVzXHJcbiAqIHRvIGVuc3VyZSBjb3JyZWN0IG1vdmVkIHBvc2l0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XHJcbiAgICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcclxuICAgIGlmIChpc0FycmF5KGNoMSkgJiYgaXNBcnJheShjaDIpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaDEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBvbmx5IGNhbGxlZCBpbiB0aGUgb3B0aW1pemVkIHBhdGggc28gYXJyYXkgY2hpbGRyZW4gYXJlXHJcbiAgICAgICAgICAgIC8vIGd1YXJhbnRlZWQgdG8gYmUgdm5vZGVzXHJcbiAgICAgICAgICAgIGNvbnN0IGMxID0gY2gxW2ldO1xyXG4gICAgICAgICAgICBsZXQgYzIgPSBjaDJbaV07XHJcbiAgICAgICAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiYgIWMyLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYzIuZWwgPSBjMS5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghc2hhbGxvdylcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYWxzbyBpbmhlcml0IGZvciBjb21tZW50IG5vZGVzLCBidXQgbm90IHBsYWNlaG9sZGVycyAoZS5nLiB2LWlmIHdoaWNoXHJcbiAgICAgICAgICAgIC8vIHdvdWxkIGhhdmUgcmVjZWl2ZWQgLmVsIGR1cmluZyBibG9jayBwYXRjaClcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjMi50eXBlID09PSBDb21tZW50JDEgJiYgIWMyLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxyXG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcclxuICAgIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcclxuICAgIGxldCBpLCBqLCB1LCB2LCBjO1xyXG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XHJcbiAgICAgICAgaWYgKGFyckkgIT09IDApIHtcclxuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICBwW2ldID0gajtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IDA7XHJcbiAgICAgICAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgd2hpbGUgKHUgPCB2KSB7XHJcbiAgICAgICAgICAgICAgICBjID0gKCh1ICsgdikgLyAyKSB8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJyW3Jlc3VsdFtjXV0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdSA9IGMgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcFtpXSA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbdV0gPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdSA9IHJlc3VsdC5sZW5ndGg7XHJcbiAgICB2ID0gcmVzdWx0W3UgLSAxXTtcclxuICAgIHdoaWxlICh1LS0gPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0W3VdID0gdjtcclxuICAgICAgICB2ID0gcFt2XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cblxuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcclxuY29uc3QgaXNUZWxlcG9ydERpc2FibGVkID0gKHByb3BzKSA9PiBwcm9wcyAmJiAocHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMuZGlzYWJsZWQgPT09ICcnKTtcclxuY29uc3QgaXNUYXJnZXRTVkcgPSAodGFyZ2V0KSA9PiB0eXBlb2YgU1ZHRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcclxuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IHByb3BzICYmIHByb3BzLnRvO1xyXG4gICAgaWYgKGlzU3RyaW5nKHRhcmdldFNlbGVjdG9yKSkge1xyXG4gICAgICAgIGlmICghc2VsZWN0KSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYChtaXNzaW5nIHF1ZXJ5U2VsZWN0b3IgcmVuZGVyZXIgb3B0aW9uKWApO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHNlbGVjdCh0YXJnZXRTZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBOb3RlIHRoZSB0YXJnZXQgZWxlbWVudCBtdXN0IGV4aXN0IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQgLSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGkuZS4gdGhlIHRhcmdldCBjYW5ub3QgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudCBpdHNlbGYsIGFuZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBUZWxlcG9ydEltcGwgPSB7XHJcbiAgICBfX2lzVGVsZXBvcnQ6IHRydWUsXHJcbiAgICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgaW50ZXJuYWxzKSB7XHJcbiAgICAgICAgY29uc3QgeyBtYzogbW91bnRDaGlsZHJlbiwgcGM6IHBhdGNoQ2hpbGRyZW4sIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLCBvOiB7IGluc2VydCwgcXVlcnlTZWxlY3RvciwgY3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudCB9IH0gPSBpbnRlcm5hbHM7XHJcbiAgICAgICAgY29uc3QgZGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjIucHJvcHMpO1xyXG4gICAgICAgIGxldCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiB9ID0gbjI7XHJcbiAgICAgICAgLy8gIzMzMDJcclxuICAgICAgICAvLyBITVIgdXBkYXRlZCwgZm9yY2UgZnVsbCBkaWZmXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjEgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyBpbnNlcnQgYW5jaG9ycyBpbiB0aGUgbWFpbiB2aWV3XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gKG4yLmVsID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUNvbW1lbnQoJ3RlbGVwb3J0IHN0YXJ0JylcclxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBlbmQnKVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVUZXh0KCcnKSk7XHJcbiAgICAgICAgICAgIGluc2VydChwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBpbnNlcnQobWFpbkFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgLy8gIzI2NTIgd2UgY291bGQgYmUgdGVsZXBvcnRpbmcgZnJvbSBhIG5vbi1TVkcgdHJlZSBpbnRvIGFuIFNWRyB0cmVlXHJcbiAgICAgICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gbW91bnQ6JywgdGFyZ2V0LCBgKCR7dHlwZW9mIHRhcmdldH0pYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW91bnQgPSAoY29udGFpbmVyLCBhbmNob3IpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFRlbGVwb3J0ICphbHdheXMqIGhhcyBBcnJheSBjaGlsZHJlbi4gVGhpcyBpcyBlbmZvcmNlZCBpbiBib3RoIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZXIgYW5kIHZub2RlIGNoaWxkcmVuIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudChjb250YWluZXIsIG1haW5BbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgbW91bnQodGFyZ2V0LCB0YXJnZXRBbmNob3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGUgY29udGVudFxyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xLmFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IChuMi50YXJnZXQgPSBuMS50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSAobjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICAgICAgY29uc3Qgd2FzRGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjEucHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBbmNob3IgPSB3YXNEaXNhYmxlZCA/IG1haW5BbmNob3IgOiB0YXJnZXRBbmNob3I7XHJcbiAgICAgICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KTtcclxuICAgICAgICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIHdoZW4gdGhlIHRlbGVwb3J0IGhhcHBlbnMgdG8gYmUgYSBibG9jayByb290XHJcbiAgICAgICAgICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4objEuZHluYW1pY0NoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4sIGN1cnJlbnRDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMpO1xyXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpbiBibG9jayB0cmVlIG1vZGUgd2UgbmVlZCB0byBtYWtlIHN1cmUgYWxsIHJvb3QtbGV2ZWwgbm9kZXNcclxuICAgICAgICAgICAgICAgIC8vIGluIHRoZSB0ZWxlcG9ydCBpbmhlcml0IHByZXZpb3VzIERPTSByZWZlcmVuY2VzIHNvIHRoYXQgdGhleSBjYW5cclxuICAgICAgICAgICAgICAgIC8vIGJlIG1vdmVkIGluIGZ1dHVyZSBwYXRjaGVzLlxyXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjdXJyZW50Q29udGFpbmVyLCBjdXJyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXdhc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZCAtPiBkaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byBtYWluIGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgY29udGFpbmVyLCBtYWluQW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVE9HR0xFICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHRhcmdldCBjaGFuZ2VkXHJcbiAgICAgICAgICAgICAgICBpZiAoKG4yLnByb3BzICYmIG4yLnByb3BzLnRvKSAhPT0gKG4xLnByb3BzICYmIG4xLnByb3BzLnRvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRUYXJnZXQgPSAobjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChuMi5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0VGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVUZWxlcG9ydChuMiwgbmV4dFRhcmdldCwgbnVsbCwgaW50ZXJuYWxzLCAwIC8qIFRBUkdFVF9DSEFOR0UgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQgb24gdXBkYXRlOicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHdhc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgLT4gZW5hYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgaW50byB0ZWxlcG9ydCB0YXJnZXRcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIHRhcmdldCwgdGFyZ2V0QW5jaG9yLCBpbnRlcm5hbHMsIDEgLyogVE9HR0xFICovKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG9wdGltaXplZCwgeyB1bTogdW5tb3VudCwgbzogeyByZW1vdmU6IGhvc3RSZW1vdmUgfSB9LCBkb1JlbW92ZSkge1xyXG4gICAgICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgYW5jaG9yLCB0YXJnZXRBbmNob3IsIHRhcmdldCwgcHJvcHMgfSA9IHZub2RlO1xyXG4gICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZSh0YXJnZXRBbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhbiB1bm1vdW50ZWQgdGVsZXBvcnQgc2hvdWxkIGFsd2F5cyByZW1vdmUgaXRzIGNoaWxkcmVuIGlmIG5vdCBkaXNhYmxlZFxyXG4gICAgICAgIGlmIChkb1JlbW92ZSB8fCAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGFuY2hvcik7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChjaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSwgISFjaGlsZC5keW5hbWljQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1vdmU6IG1vdmVUZWxlcG9ydCxcclxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVUZWxlcG9ydFxyXG59O1xyXG5mdW5jdGlvbiBtb3ZlVGVsZXBvcnQodm5vZGUsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCB7IG86IHsgaW5zZXJ0IH0sIG06IG1vdmUgfSwgbW92ZVR5cGUgPSAyIC8qIFJFT1JERVIgKi8pIHtcclxuICAgIC8vIG1vdmUgdGFyZ2V0IGFuY2hvciBpZiB0aGlzIGlzIGEgdGFyZ2V0IGNoYW5nZS5cclxuICAgIGlmIChtb3ZlVHlwZSA9PT0gMCAvKiBUQVJHRVRfQ0hBTkdFICovKSB7XHJcbiAgICAgICAgaW5zZXJ0KHZub2RlLnRhcmdldEFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XHJcbiAgICBjb25zdCBpc1Jlb3JkZXIgPSBtb3ZlVHlwZSA9PT0gMiAvKiBSRU9SREVSICovO1xyXG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cclxuICAgIGlmIChpc1Jlb3JkZXIpIHtcclxuICAgICAgICBpbnNlcnQoZWwsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxuICAgIC8vIGlmIHRoaXMgaXMgYSByZS1vcmRlciBhbmQgdGVsZXBvcnQgaXMgZW5hYmxlZCAoY29udGVudCBpcyBpbiB0YXJnZXQpXHJcbiAgICAvLyBkbyBub3QgbW92ZSBjaGlsZHJlbi4gU28gdGhlIG9wcG9zaXRlIGlzOiBvbmx5IG1vdmUgY2hpbGRyZW4gaWYgdGhpc1xyXG4gICAgLy8gaXMgbm90IGEgcmVvcmRlciwgb3IgdGhlIHRlbGVwb3J0IGlzIGRpc2FibGVkXHJcbiAgICBpZiAoIWlzUmVvcmRlciB8fCBpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpKSB7XHJcbiAgICAgICAgLy8gVGVsZXBvcnQgaGFzIGVpdGhlciBBcnJheSBjaGlsZHJlbiBvciBubyBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbW92ZShjaGlsZHJlbltpXSwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIDIgLyogUkVPUkRFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBtb3ZlIG1haW4gdmlldyBhbmNob3IgaWYgdGhpcyBpcyBhIHJlLW9yZGVyLlxyXG4gICAgaWYgKGlzUmVvcmRlcikge1xyXG4gICAgICAgIGluc2VydChhbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7IG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IgfSB9LCBoeWRyYXRlQ2hpbGRyZW4pIHtcclxuICAgIGNvbnN0IHRhcmdldCA9ICh2bm9kZS50YXJnZXQgPSByZXNvbHZlVGFyZ2V0KHZub2RlLnByb3BzLCBxdWVyeVNlbGVjdG9yKSk7XHJcbiAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGUgdGVsZXBvcnRzIHJlbmRlcmVkIHRvIHRoZSBzYW1lIHRhcmdldCBlbGVtZW50LCB3ZSBuZWVkIHRvXHJcbiAgICAgICAgLy8gcGljayB1cCBmcm9tIHdoZXJlIHRoZSBsYXN0IHRlbGVwb3J0IGZpbmlzaGVkIGluc3RlYWQgb2YgdGhlIGZpcnN0IG5vZGVcclxuICAgICAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0Ll9scGEgfHwgdGFyZ2V0LmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1RlbGVwb3J0RGlzYWJsZWQodm5vZGUucHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4obmV4dFNpYmxpbmcobm9kZSksIHZub2RlLCBwYXJlbnROb2RlKG5vZGUpLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSB0YXJnZXROb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgPSBoeWRyYXRlQ2hpbGRyZW4odGFyZ2V0Tm9kZSwgdm5vZGUsIHRhcmdldCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldC5fbHBhID1cclxuICAgICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciAmJiBuZXh0U2libGluZyh2bm9kZS50YXJnZXRBbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZS5hbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yKTtcclxufVxyXG4vLyBGb3JjZS1jYXN0ZWQgcHVibGljIHR5cGluZyBmb3IgaCBhbmQgVFNYIHByb3BzIGluZmVyZW5jZVxyXG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcblxuY29uc3QgQ09NUE9ORU5UUyA9ICdjb21wb25lbnRzJztcclxuY29uc3QgRElSRUNUSVZFUyA9ICdkaXJlY3RpdmVzJztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50KG5hbWUsIG1heWJlU2VsZlJlZmVyZW5jZSkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lLCB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UpIHx8IG5hbWU7XHJcbn1cclxuY29uc3QgTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbCgpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVEeW5hbWljQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIGNvbXBvbmVudCwgZmFsc2UpIHx8IGNvbXBvbmVudDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGludmFsaWQgdHlwZXMgd2lsbCBmYWxsdGhyb3VnaCB0byBjcmVhdGVWTm9kZSBhbmQgcmFpc2Ugd2FybmluZ1xyXG4gICAgICAgIHJldHVybiAoY29tcG9uZW50IHx8IE5VTExfRFlOQU1JQ19DT01QT05FTlQpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShuYW1lKSB7XHJcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgICAgIC8vIGV4cGxpY2l0IHNlbGYgbmFtZSBoYXMgaGlnaGVzdCBwcmlvcml0eVxyXG4gICAgICAgIGlmICh0eXBlID09PSBDT01QT05FTlRTKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGZOYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xyXG4gICAgICAgICAgICBpZiAoc2VsZk5hbWUgJiZcclxuICAgICAgICAgICAgICAgIChzZWxmTmFtZSA9PT0gbmFtZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYW1lbGl6ZShuYW1lKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGZOYW1lID09PSBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzID0gXHJcbiAgICAgICAgLy8gbG9jYWwgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgLy8gY2hlY2sgaW5zdGFuY2VbdHlwZV0gZmlyc3Qgd2hpY2ggaXMgcmVzb2x2ZWQgZm9yIG9wdGlvbnMgQVBJXHJcbiAgICAgICAgcmVzb2x2ZShpbnN0YW5jZVt0eXBlXSB8fCBDb21wb25lbnRbdHlwZV0sIG5hbWUpIHx8XHJcbiAgICAgICAgICAgIC8vIGdsb2JhbCByZWdpc3RyYXRpb25cclxuICAgICAgICAgICAgcmVzb2x2ZShpbnN0YW5jZS5hcHBDb250ZXh0W3R5cGVdLCBuYW1lKTtcclxuICAgICAgICBpZiAoIXJlcyAmJiBtYXliZVNlbGZSZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gaW1wbGljaXQgc2VsZi1yZWZlcmVuY2VcclxuICAgICAgICAgICAgcmV0dXJuIENvbXBvbmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuTWlzc2luZyAmJiAhcmVzKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGByZXNvbHZlJHtjYXBpdGFsaXplKHR5cGUuc2xpY2UoMCwgLTEpKX0gYCArXHJcbiAgICAgICAgICAgIGBjYW4gb25seSBiZSB1c2VkIGluIHJlbmRlcigpIG9yIHNldHVwKCkuYCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZShyZWdpc3RyeSwgbmFtZSkge1xyXG4gICAgcmV0dXJuIChyZWdpc3RyeSAmJlxyXG4gICAgICAgIChyZWdpc3RyeVtuYW1lXSB8fFxyXG4gICAgICAgICAgICByZWdpc3RyeVtjYW1lbGl6ZShuYW1lKV0gfHxcclxuICAgICAgICAgICAgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKSk7XHJcbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ0ZyYWdtZW50JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IFRleHQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ1RleHQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgQ29tbWVudCQxID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdDb21tZW50JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnU3RhdGljJyA6IHVuZGVmaW5lZCk7XHJcbi8vIFNpbmNlIHYtaWYgYW5kIHYtZm9yIGFyZSB0aGUgdHdvIHBvc3NpYmxlIHdheXMgbm9kZSBzdHJ1Y3R1cmUgY2FuIGR5bmFtaWNhbGx5XHJcbi8vIGNoYW5nZSwgb25jZSB3ZSBjb25zaWRlciB2LWlmIGJyYW5jaGVzIGFuZCBlYWNoIHYtZm9yIGZyYWdtZW50IGEgYmxvY2ssIHdlXHJcbi8vIGNhbiBkaXZpZGUgYSB0ZW1wbGF0ZSBpbnRvIG5lc3RlZCBibG9ja3MsIGFuZCB3aXRoaW4gZWFjaCBibG9jayB0aGUgbm9kZVxyXG4vLyBzdHJ1Y3R1cmUgd291bGQgYmUgc3RhYmxlLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIG1vc3QgY2hpbGRyZW4gZGlmZmluZ1xyXG4vLyBhbmQgb25seSB3b3JyeSBhYm91dCB0aGUgZHluYW1pYyBub2RlcyAoaW5kaWNhdGVkIGJ5IHBhdGNoIGZsYWdzKS5cclxuY29uc3QgYmxvY2tTdGFjayA9IFtdO1xyXG5sZXQgY3VycmVudEJsb2NrID0gbnVsbDtcclxuLyoqXHJcbiAqIE9wZW4gYSBibG9jay5cclxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYC4gSXQgY2Fubm90IGJlIHBhcnQgb2YgYGNyZWF0ZUJsb2NrYFxyXG4gKiBiZWNhdXNlIHRoZSBjaGlsZHJlbiBvZiB0aGUgYmxvY2sgYXJlIGV2YWx1YXRlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYCBpdHNlbGZcclxuICogaXMgY2FsbGVkLiBUaGUgZ2VuZXJhdGVkIGNvZGUgdHlwaWNhbGx5IGxvb2tzIGxpa2UgdGhpczpcclxuICpcclxuICogYGBganNcclxuICogZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gKiAgIHJldHVybiAob3BlbkJsb2NrKCksY3JlYXRlQmxvY2soJ2RpdicsIG51bGwsIFsuLi5dKSlcclxuICogfVxyXG4gKiBgYGBcclxuICogZGlzYWJsZVRyYWNraW5nIGlzIHRydWUgd2hlbiBjcmVhdGluZyBhIHYtZm9yIGZyYWdtZW50IGJsb2NrLCBzaW5jZSBhIHYtZm9yXHJcbiAqIGZyYWdtZW50IGFsd2F5cyBkaWZmcyBpdHMgY2hpbGRyZW4uXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuQmxvY2soZGlzYWJsZVRyYWNraW5nID0gZmFsc2UpIHtcclxuICAgIGJsb2NrU3RhY2sucHVzaCgoY3VycmVudEJsb2NrID0gZGlzYWJsZVRyYWNraW5nID8gbnVsbCA6IFtdKSk7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcclxuICAgIGJsb2NrU3RhY2sucG9wKCk7XHJcbiAgICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcclxufVxyXG4vLyBXaGV0aGVyIHdlIHNob3VsZCBiZSB0cmFja2luZyBkeW5hbWljIGNoaWxkIG5vZGVzIGluc2lkZSBhIGJsb2NrLlxyXG4vLyBPbmx5IHRyYWNrcyB3aGVuIHRoaXMgdmFsdWUgaXMgPiAwXHJcbi8vIFdlIGFyZSBub3QgdXNpbmcgYSBzaW1wbGUgYm9vbGVhbiBiZWNhdXNlIHRoaXMgdmFsdWUgbWF5IG5lZWQgdG8gYmVcclxuLy8gaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWQgYnkgbmVzdGVkIHVzYWdlIG9mIHYtb25jZSAoc2VlIGJlbG93KVxyXG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcclxuLyoqXHJcbiAqIEJsb2NrIHRyYWNraW5nIHNvbWV0aW1lcyBuZWVkcyB0byBiZSBkaXNhYmxlZCwgZm9yIGV4YW1wbGUgZHVyaW5nIHRoZVxyXG4gKiBjcmVhdGlvbiBvZiBhIHRyZWUgdGhhdCBuZWVkcyB0byBiZSBjYWNoZWQgYnkgdi1vbmNlLiBUaGUgY29tcGlsZXIgZ2VuZXJhdGVzXHJcbiAqIGNvZGUgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGAganNcclxuICogX2NhY2hlWzFdIHx8IChcclxuICogICBzZXRCbG9ja1RyYWNraW5nKC0xKSxcclxuICogICBfY2FjaGVbMV0gPSBjcmVhdGVWTm9kZSguLi4pLFxyXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoMSksXHJcbiAqICAgX2NhY2hlWzFdXHJcbiAqIClcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRCbG9ja1RyYWNraW5nKHZhbHVlKSB7XHJcbiAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgKz0gdmFsdWU7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2NrIHJvb3Qgdm5vZGUuIFRha2VzIHRoZSBzYW1lIGV4YWN0IGFyZ3VtZW50cyBhcyBgY3JlYXRlVk5vZGVgLlxyXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxyXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMpIHtcclxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgdHJ1ZSAvKiBpc0Jsb2NrOiBwcmV2ZW50IGEgYmxvY2sgZnJvbSB0cmFja2luZyBpdHNlbGYgKi8pO1xyXG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxyXG4gICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID1cclxuICAgICAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XHJcbiAgICAvLyBjbG9zZSBibG9ja1xyXG4gICAgY2xvc2VCbG9jaygpO1xyXG4gICAgLy8gYSBibG9jayBpcyBhbHdheXMgZ29pbmcgdG8gYmUgcGF0Y2hlZCwgc28gdHJhY2sgaXQgYXMgYSBjaGlsZCBvZiBpdHNcclxuICAgIC8vIHBhcmVudCBibG9ja1xyXG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA/IHZhbHVlLl9fdl9pc1ZOb2RlID09PSB0cnVlIDogZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIG4yLnNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovICYmXHJcbiAgICAgICAgaG1yRGlydHlDb21wb25lbnRzLmhhcyhuMi50eXBlKSkge1xyXG4gICAgICAgIC8vIEhNUiBvbmx5OiBpZiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIGhvdC11cGRhdGVkLCBmb3JjZSBhIHJlbG9hZC5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbjEudHlwZSA9PT0gbjIudHlwZSAmJiBuMS5rZXkgPT09IG4yLmtleTtcclxufVxyXG5sZXQgdm5vZGVBcmdzVHJhbnNmb3JtZXI7XHJcbi8qKlxyXG4gKiBJbnRlcm5hbCBBUEkgZm9yIHJlZ2lzdGVyaW5nIGFuIGFyZ3VtZW50cyB0cmFuc2Zvcm0gZm9yIGNyZWF0ZVZOb2RlXHJcbiAqIHVzZWQgZm9yIGNyZWF0aW5nIHN0dWJzIGluIHRoZSB0ZXN0LXV0aWxzXHJcbiAqIEl0IGlzICppbnRlcm5hbCogYnV0IG5lZWRzIHRvIGJlIGV4cG9zZWQgZm9yIHRlc3QtdXRpbHMgdG8gcGljayB1cCBwcm9wZXJcclxuICogdHlwaW5nc1xyXG4gKi9cclxuZnVuY3Rpb24gdHJhbnNmb3JtVk5vZGVBcmdzKHRyYW5zZm9ybWVyKSB7XHJcbiAgICB2bm9kZUFyZ3NUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xyXG59XHJcbmNvbnN0IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gPSAoLi4uYXJncykgPT4ge1xyXG4gICAgcmV0dXJuIF9jcmVhdGVWTm9kZSguLi4odm5vZGVBcmdzVHJhbnNmb3JtZXJcclxuICAgICAgICA/IHZub2RlQXJnc1RyYW5zZm9ybWVyKGFyZ3MsIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSlcclxuICAgICAgICA6IGFyZ3MpKTtcclxufTtcclxuY29uc3QgSW50ZXJuYWxPYmplY3RLZXkgPSBgX192SW50ZXJuYWxgO1xyXG5jb25zdCBub3JtYWxpemVLZXkgPSAoeyBrZXkgfSkgPT4ga2V5ICE9IG51bGwgPyBrZXkgOiBudWxsO1xyXG5jb25zdCBub3JtYWxpemVSZWYgPSAoeyByZWYgfSkgPT4ge1xyXG4gICAgcmV0dXJuIChyZWYgIT0gbnVsbFxyXG4gICAgICAgID8gaXNTdHJpbmcocmVmKSB8fCBpc1JlZihyZWYpIHx8IGlzRnVuY3Rpb24ocmVmKVxyXG4gICAgICAgICAgICA/IHsgaTogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCByOiByZWYgfVxyXG4gICAgICAgICAgICA6IHJlZlxyXG4gICAgICAgIDogbnVsbCk7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZVZOb2RlID0gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtXHJcbiAgICA6IF9jcmVhdGVWTm9kZSk7XHJcbmZ1bmN0aW9uIF9jcmVhdGVWTm9kZSh0eXBlLCBwcm9wcyA9IG51bGwsIGNoaWxkcmVuID0gbnVsbCwgcGF0Y2hGbGFnID0gMCwgZHluYW1pY1Byb3BzID0gbnVsbCwgaXNCbG9ja05vZGUgPSBmYWxzZSkge1xyXG4gICAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICF0eXBlKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEludmFsaWQgdm5vZGUgdHlwZSB3aGVuIGNyZWF0aW5nIHZub2RlOiAke3R5cGV9LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0eXBlID0gQ29tbWVudCQxO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVk5vZGUodHlwZSkpIHtcclxuICAgICAgICAvLyBjcmVhdGVWTm9kZSByZWNlaXZpbmcgYW4gZXhpc3Rpbmcgdm5vZGUuIFRoaXMgaGFwcGVucyBpbiBjYXNlcyBsaWtlXHJcbiAgICAgICAgLy8gPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiLz5cclxuICAgICAgICAvLyAjMjA3OCBtYWtlIHN1cmUgdG8gbWVyZ2UgcmVmcyBkdXJpbmcgdGhlIGNsb25lIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXRcclxuICAgICAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHR5cGUsIHByb3BzLCB0cnVlIC8qIG1lcmdlUmVmOiB0cnVlICovKTtcclxuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4oY2xvbmVkLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbG9uZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBjbGFzcyBjb21wb25lbnQgbm9ybWFsaXphdGlvbi5cclxuICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xyXG4gICAgfVxyXG4gICAgLy8gY2xhc3MgJiBzdHlsZSBub3JtYWxpemF0aW9uLlxyXG4gICAgaWYgKHByb3BzKSB7XHJcbiAgICAgICAgLy8gZm9yIHJlYWN0aXZlIG9yIHByb3h5IG9iamVjdHMsIHdlIG5lZWQgdG8gY2xvbmUgaXQgdG8gZW5hYmxlIG11dGF0aW9uLlxyXG4gICAgICAgIGlmIChpc1Byb3h5KHByb3BzKSB8fCBJbnRlcm5hbE9iamVjdEtleSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICBwcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcclxuICAgICAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xyXG4gICAgICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHN0eWxlKSkge1xyXG4gICAgICAgICAgICAvLyByZWFjdGl2ZSBzdGF0ZSBvYmplY3RzIG5lZWQgdG8gYmUgY2xvbmVkIHNpbmNlIHRoZXkgYXJlIGxpa2VseSB0byBiZVxyXG4gICAgICAgICAgICAvLyBtdXRhdGVkXHJcbiAgICAgICAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gZW5jb2RlIHRoZSB2bm9kZSB0eXBlIGluZm9ybWF0aW9uIGludG8gYSBiaXRtYXBcclxuICAgIGNvbnN0IHNoYXBlRmxhZyA9IGlzU3RyaW5nKHR5cGUpXHJcbiAgICAgICAgPyAxIC8qIEVMRU1FTlQgKi9cclxuICAgICAgICA6IGlzU3VzcGVuc2UodHlwZSlcclxuICAgICAgICAgICAgPyAxMjggLyogU1VTUEVOU0UgKi9cclxuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFRFTEVQT1JUICovXHJcbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgPyA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbih0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogRlVOQ1RJT05BTF9DT01QT05FTlQgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xyXG4gICAgICAgIHdhcm4oYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB3aGljaCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gYCArXHJcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXHJcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXHJcbiAgICAgICAgICAgIGBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLCBgXFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgdm5vZGUgPSB7XHJcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXHJcbiAgICAgICAgX192X3NraXA6IHRydWUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBwcm9wcyxcclxuICAgICAgICBrZXk6IHByb3BzICYmIG5vcm1hbGl6ZUtleShwcm9wcyksXHJcbiAgICAgICAgcmVmOiBwcm9wcyAmJiBub3JtYWxpemVSZWYocHJvcHMpLFxyXG4gICAgICAgIHNjb3BlSWQ6IGN1cnJlbnRTY29wZUlkLFxyXG4gICAgICAgIHNsb3RTY29wZUlkczogbnVsbCxcclxuICAgICAgICBjaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXHJcbiAgICAgICAgc3VzcGVuc2U6IG51bGwsXHJcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IG51bGwsXHJcbiAgICAgICAgZGlyczogbnVsbCxcclxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxyXG4gICAgICAgIGVsOiBudWxsLFxyXG4gICAgICAgIGFuY2hvcjogbnVsbCxcclxuICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiAwLFxyXG4gICAgICAgIHNoYXBlRmxhZyxcclxuICAgICAgICBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzLFxyXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBhcHBDb250ZXh0OiBudWxsXHJcbiAgICB9O1xyXG4gICAgLy8gdmFsaWRhdGUga2V5XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XHJcbiAgICAgICAgd2FybihgVk5vZGUgY3JlYXRlZCB3aXRoIGludmFsaWQga2V5IChOYU4pLiBWTm9kZSB0eXBlOmAsIHZub2RlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKTtcclxuICAgIC8vIG5vcm1hbGl6ZSBzdXNwZW5zZSBjaGlsZHJlblxyXG4gICAgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcclxuICAgIH1cclxuICAgIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmXHJcbiAgICAgICAgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXHJcbiAgICAgICAgIWlzQmxvY2tOb2RlICYmXHJcbiAgICAgICAgLy8gaGFzIGN1cnJlbnQgcGFyZW50IGJsb2NrXHJcbiAgICAgICAgY3VycmVudEJsb2NrICYmXHJcbiAgICAgICAgLy8gcHJlc2VuY2Ugb2YgYSBwYXRjaCBmbGFnIGluZGljYXRlcyB0aGlzIG5vZGUgbmVlZHMgcGF0Y2hpbmcgb24gdXBkYXRlcy5cclxuICAgICAgICAvLyBjb21wb25lbnQgbm9kZXMgYWxzbyBzaG91bGQgYWx3YXlzIGJlIHBhdGNoZWQsIGJlY2F1c2UgZXZlbiBpZiB0aGVcclxuICAgICAgICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cclxuICAgICAgICAvLyB0aGUgbmV4dCB2bm9kZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWQgbGF0ZXIuXHJcbiAgICAgICAgKHBhdGNoRmxhZyA+IDAgfHwgc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pICYmXHJcbiAgICAgICAgLy8gdGhlIEVWRU5UUyBmbGFnIGlzIG9ubHkgZm9yIGh5ZHJhdGlvbiBhbmQgaWYgaXQgaXMgdGhlIG9ubHkgZmxhZywgdGhlXHJcbiAgICAgICAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cclxuICAgICAgICBwYXRjaEZsYWcgIT09IDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUsIGV4dHJhUHJvcHMsIG1lcmdlUmVmID0gZmFsc2UpIHtcclxuICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBOT1QgdXNpbmcgc3ByZWFkIG9yIGV4dGVuZCB0byBhdm9pZCB0aGUgcnVudGltZVxyXG4gICAgLy8ga2V5IGVudW1lcmF0aW9uIGNvc3QuXHJcbiAgICBjb25zdCB7IHByb3BzLCByZWYsIHBhdGNoRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xyXG4gICAgY29uc3QgbWVyZ2VkUHJvcHMgPSBleHRyYVByb3BzID8gbWVyZ2VQcm9wcyhwcm9wcyB8fCB7fSwgZXh0cmFQcm9wcykgOiBwcm9wcztcclxuICAgIGNvbnN0IGNsb25lZCA9IHtcclxuICAgICAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcclxuICAgICAgICBfX3Zfc2tpcDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiB2bm9kZS50eXBlLFxyXG4gICAgICAgIHByb3BzOiBtZXJnZWRQcm9wcyxcclxuICAgICAgICBrZXk6IG1lcmdlZFByb3BzICYmIG5vcm1hbGl6ZUtleShtZXJnZWRQcm9wcyksXHJcbiAgICAgICAgcmVmOiBleHRyYVByb3BzICYmIGV4dHJhUHJvcHMucmVmXHJcbiAgICAgICAgICAgID8gLy8gIzIwNzggaW4gdGhlIGNhc2Ugb2YgPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiIHJlZj1cImV4dHJhXCIvPlxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHZub2RlIGl0c2VsZiBhbHJlYWR5IGhhcyBhIHJlZiwgY2xvbmVWTm9kZSB3aWxsIG5lZWQgdG8gbWVyZ2VcclxuICAgICAgICAgICAgICAgIC8vIHRoZSByZWZzIHNvIHRoZSBzaW5nbGUgdm5vZGUgY2FuIGJlIHNldCBvbiBtdWx0aXBsZSByZWZzXHJcbiAgICAgICAgICAgICAgICBtZXJnZVJlZiAmJiByZWZcclxuICAgICAgICAgICAgICAgICAgICA/IGlzQXJyYXkocmVmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlZi5jb25jYXQobm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFtyZWYsIG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKV1cclxuICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKVxyXG4gICAgICAgICAgICA6IHJlZixcclxuICAgICAgICBzY29wZUlkOiB2bm9kZS5zY29wZUlkLFxyXG4gICAgICAgIHNsb3RTY29wZUlkczogdm5vZGUuc2xvdFNjb3BlSWRzLFxyXG4gICAgICAgIGNoaWxkcmVuOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGF0Y2hGbGFnID09PSAtMSAvKiBIT0lTVEVEICovICYmIGlzQXJyYXkoY2hpbGRyZW4pXHJcbiAgICAgICAgICAgID8gY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKVxyXG4gICAgICAgICAgICA6IGNoaWxkcmVuLFxyXG4gICAgICAgIHRhcmdldDogdm5vZGUudGFyZ2V0LFxyXG4gICAgICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcclxuICAgICAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcclxuICAgICAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xyXG4gICAgICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXHJcbiAgICAgICAgLy8gbm90ZTogcGVyc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxyXG4gICAgICAgIC8vIGZhc3QgcGF0aHMgb25seS5cclxuICAgICAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnRcclxuICAgICAgICAgICAgPyBwYXRjaEZsYWcgPT09IC0xIC8vIGhvaXN0ZWQgbm9kZVxyXG4gICAgICAgICAgICAgICAgPyAxNiAvKiBGVUxMX1BST1BTICovXHJcbiAgICAgICAgICAgICAgICA6IHBhdGNoRmxhZyB8IDE2IC8qIEZVTExfUFJPUFMgKi9cclxuICAgICAgICAgICAgOiBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzOiB2bm9kZS5keW5hbWljUHJvcHMsXHJcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuOiB2bm9kZS5keW5hbWljQ2hpbGRyZW4sXHJcbiAgICAgICAgYXBwQ29udGV4dDogdm5vZGUuYXBwQ29udGV4dCxcclxuICAgICAgICBkaXJzOiB2bm9kZS5kaXJzLFxyXG4gICAgICAgIHRyYW5zaXRpb246IHZub2RlLnRyYW5zaXRpb24sXHJcbiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIHRlY2huaWNhbGx5IG9ubHkgYmUgbm9uLW51bGwgb24gbW91bnRlZCBWTm9kZXMuIEhvd2V2ZXIsXHJcbiAgICAgICAgLy8gdGhleSAqc2hvdWxkKiBiZSBjb3BpZWQgZm9yIGtlcHQtYWxpdmUgdm5vZGVzLiBTbyB3ZSBqdXN0IGFsd2F5cyBjb3B5XHJcbiAgICAgICAgLy8gdGhlbSBzaW5jZSB0aGVtIGJlaW5nIG5vbi1udWxsIGR1cmluZyBhIG1vdW50IGRvZXNuJ3QgYWZmZWN0IHRoZSBsb2dpYyBhc1xyXG4gICAgICAgIC8vIHRoZXkgd2lsbCBzaW1wbHkgYmUgb3ZlcndyaXR0ZW4uXHJcbiAgICAgICAgY29tcG9uZW50OiB2bm9kZS5jb21wb25lbnQsXHJcbiAgICAgICAgc3VzcGVuc2U6IHZub2RlLnN1c3BlbnNlLFxyXG4gICAgICAgIHNzQ29udGVudDogdm5vZGUuc3NDb250ZW50ICYmIGNsb25lVk5vZGUodm5vZGUuc3NDb250ZW50KSxcclxuICAgICAgICBzc0ZhbGxiYWNrOiB2bm9kZS5zc0ZhbGxiYWNrICYmIGNsb25lVk5vZGUodm5vZGUuc3NGYWxsYmFjayksXHJcbiAgICAgICAgZWw6IHZub2RlLmVsLFxyXG4gICAgICAgIGFuY2hvcjogdm5vZGUuYW5jaG9yXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsb25lZDtcclxufVxyXG4vKipcclxuICogRGV2IG9ubHksIGZvciBITVIgb2YgaG9pc3RlZCB2bm9kZXMgcmV1c2VkIGluIHYtZm9yXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS9pc3N1ZXMvMjAyMlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcENsb25lVk5vZGUodm5vZGUpIHtcclxuICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgaWYgKGlzQXJyYXkodm5vZGUuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgY2xvbmVkLmNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW4ubWFwKGRlZXBDbG9uZVZOb2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjbG9uZWQ7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9ICcgJywgZmxhZyA9IDApIHtcclxuICAgIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcclxuICAgIC8vIEEgc3RhdGljIHZub2RlIGNhbiBjb250YWluIG11bHRpcGxlIHN0cmluZ2lmaWVkIGVsZW1lbnRzLCBhbmQgdGhlIG51bWJlclxyXG4gICAgLy8gb2YgZWxlbWVudHMgaXMgbmVjZXNzYXJ5IGZvciBoeWRyYXRpb24uXHJcbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKFN0YXRpYywgbnVsbCwgY29udGVudCk7XHJcbiAgICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9ICcnLCBcclxuLy8gd2hlbiB1c2VkIGFzIHRoZSB2LWVsc2UgYnJhbmNoLCB0aGUgY29tbWVudCBub2RlIG11c3QgYmUgY3JlYXRlZCBhcyBhXHJcbi8vIGJsb2NrIHRvIGVuc3VyZSBjb3JyZWN0IHVwZGF0ZXMuXHJcbmFzQmxvY2sgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGFzQmxvY2tcclxuICAgICAgICA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCQxLCBudWxsLCB0ZXh0KSlcclxuICAgICAgICA6IGNyZWF0ZVZOb2RlKENvbW1lbnQkMSwgbnVsbCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcclxuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgLy8gZW1wdHkgcGxhY2Vob2xkZXJcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCQxKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XHJcbiAgICAgICAgLy8gZnJhZ21lbnRcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoRnJhZ21lbnQsIG51bGwsIFxyXG4gICAgICAgIC8vICMzNjY2LCBhdm9pZCByZWZlcmVuY2UgcG9sbHV0aW9uIHdoZW4gcmV1c2luZyB2bm9kZVxyXG4gICAgICAgIGNoaWxkLnNsaWNlKCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGNoaWxkID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIC8vIGFscmVhZHkgdm5vZGUsIHRoaXMgc2hvdWxkIGJlIHRoZSBtb3N0IGNvbW1vbiBzaW5jZSBjb21waWxlZCB0ZW1wbGF0ZXNcclxuICAgICAgICAvLyBhbHdheXMgcHJvZHVjZSBhbGwtdm5vZGUgY2hpbGRyZW4gYXJyYXlzXHJcbiAgICAgICAgcmV0dXJuIGNsb25lSWZNb3VudGVkKGNoaWxkKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHN0cmluZ3MgYW5kIG51bWJlcnNcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgU3RyaW5nKGNoaWxkKSk7XHJcbiAgICB9XHJcbn1cclxuLy8gb3B0aW1pemVkIG5vcm1hbGl6YXRpb24gZm9yIHRlbXBsYXRlLWNvbXBpbGVkIHJlbmRlciBmbnNcclxuZnVuY3Rpb24gY2xvbmVJZk1vdW50ZWQoY2hpbGQpIHtcclxuICAgIHJldHVybiBjaGlsZC5lbCA9PT0gbnVsbCA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKSB7XHJcbiAgICBsZXQgdHlwZSA9IDA7XHJcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgdHlwZSA9IDE2IC8qIEFSUkFZX0NISUxEUkVOICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gfHwgc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXplIHNsb3QgdG8gcGxhaW4gY2hpbGRyZW4gZm9yIHBsYWluIGVsZW1lbnQgYW5kIFRlbGVwb3J0XHJcbiAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBjaGlsZHJlbi5kZWZhdWx0O1xyXG4gICAgICAgICAgICBpZiAoc2xvdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gX2MgbWFya2VyIGlzIGFkZGVkIGJ5IHdpdGhDdHgoKSBpbmRpY2F0aW5nIHRoaXMgaXMgYSBjb21waWxlZCBzbG90XHJcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIHNsb3QoKSk7XHJcbiAgICAgICAgICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjb25zdCBzbG90RmxhZyA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgICAgIGlmICghc2xvdEZsYWcgJiYgIShJbnRlcm5hbE9iamVjdEtleSBpbiBjaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgLyogRk9SV0FSREVEICovICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBjaGlsZCBjb21wb25lbnQgcmVjZWl2ZXMgZm9yd2FyZGVkIHNsb3RzIGZyb20gdGhlIHBhcmVudC5cclxuICAgICAgICAgICAgICAgIC8vIGl0cyBzbG90IHR5cGUgaXMgZGV0ZXJtaW5lZCBieSBpdHMgcGFyZW50J3Mgc2xvdCB0eXBlLlxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5zbG90cy5fID09PSAxIC8qIFNUQUJMRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAxIC8qIFNUQUJMRSAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLl8gPSAyIC8qIERZTkFNSUMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUucGF0Y2hGbGFnIHw9IDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcclxuICAgICAgICB0eXBlID0gMzIgLyogU0xPVFNfQ0hJTERSRU4gKi87XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjaGlsZHJlbiA9IFN0cmluZyhjaGlsZHJlbik7XHJcbiAgICAgICAgLy8gZm9yY2UgdGVsZXBvcnQgY2hpbGRyZW4gdG8gYXJyYXkgc28gaXQgY2FuIGJlIG1vdmVkIGFyb3VuZFxyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICB0eXBlID0gMTYgLyogQVJSQVlfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHlwZSA9IDggLyogVEVYVF9DSElMRFJFTiAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xyXG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VQcm9wcyguLi5hcmdzKSB7XHJcbiAgICBjb25zdCByZXQgPSBleHRlbmQoe30sIGFyZ3NbMF0pO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0LmNsYXNzID0gbm9ybWFsaXplQ2xhc3MoW3JldC5jbGFzcywgdG9NZXJnZS5jbGFzc10pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzT24oa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nICE9PSBpbmNvbWluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGluY29taW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGluY29taW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHJldFtrZXldID0gdG9NZXJnZVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogQWN0dWFsIGltcGxlbWVudGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJMaXN0KHNvdXJjZSwgcmVuZGVySXRlbSkge1xyXG4gICAgbGV0IHJldDtcclxuICAgIGlmIChpc0FycmF5KHNvdXJjZSkgfHwgaXNTdHJpbmcoc291cmNlKSkge1xyXG4gICAgICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShzb3VyY2VbaV0sIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFRoZSB2LWZvciByYW5nZSBleHBlY3QgYW4gaW50ZWdlciB2YWx1ZSBidXQgZ290ICR7c291cmNlfS5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oaSArIDEsIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcclxuICAgICAgICAgICAgcmV0ID0gQXJyYXkuZnJvbShzb3VyY2UsIHJlbmRlckl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XHJcbiAgICAgICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtrZXldLCBrZXksIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0ID0gW107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgY3JlYXRpbmcgZHluYW1pYyBzbG90cyBvYmplY3RcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcclxuICAgICAgICAvLyBhcnJheSBvZiBkeW5hbWljIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWZvcj1cIi4uLlwiICNbLi4uXT5cclxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgLy8gY29uZGl0aW9uYWwgc2luZ2xlIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWlmPVwiLi4uXCIgI2Zvbz5cclxuICAgICAgICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3QuZm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNsb3RzO1xyXG59XG5cbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIGA8c2xvdC8+YFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgXHJcbi8vIHRoaXMgaXMgbm90IGEgdXNlci1mYWNpbmcgZnVuY3Rpb24sIHNvIHRoZSBmYWxsYmFjayBpcyBhbHdheXMgZ2VuZXJhdGVkIGJ5XHJcbi8vIHRoZSBjb21waWxlciBhbmQgZ3VhcmFudGVlZCB0byBiZSBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheVxyXG5mYWxsYmFjaywgbm9TbG90dGVkKSB7XHJcbiAgICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzbG90ICYmIHNsb3QubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHdhcm4oYFNTUi1vcHRpbWl6ZWQgc2xvdCBmdW5jdGlvbiBkZXRlY3RlZCBpbiBhIG5vbi1TU1Itb3B0aW1pemVkIHJlbmRlciBgICtcclxuICAgICAgICAgICAgYGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIGAgK1xyXG4gICAgICAgICAgICBgcGFyZW50IHRlbXBsYXRlLmApO1xyXG4gICAgICAgIHNsb3QgPSAoKSA9PiBbXTtcclxuICAgIH1cclxuICAgIC8vIGEgY29tcGlsZWQgc2xvdCBkaXNhYmxlcyBibG9jayB0cmFja2luZyBieSBkZWZhdWx0IHRvIGF2b2lkIG1hbnVhbFxyXG4gICAgLy8gaW52b2NhdGlvbiBpbnRlcmZlcmluZyB3aXRoIHRlbXBsYXRlLWJhc2VkIGJsb2NrIHRyYWNraW5nLCBidXQgaW5cclxuICAgIC8vIGByZW5kZXJTbG90YCB3ZSBjYW4gYmUgc3VyZSB0aGF0IGl0J3MgdGVtcGxhdGUtYmFzZWQgc28gd2UgY2FuIGZvcmNlXHJcbiAgICAvLyBlbmFibGUgaXQuXHJcbiAgICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XHJcbiAgICAgICAgc2xvdC5fZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgb3BlbkJsb2NrKCk7XHJcbiAgICBjb25zdCB2YWxpZFNsb3RDb250ZW50ID0gc2xvdCAmJiBlbnN1cmVWYWxpZFZOb2RlKHNsb3QocHJvcHMpKTtcclxuICAgIGNvbnN0IHJlbmRlcmVkID0gY3JlYXRlQmxvY2soRnJhZ21lbnQsIHsga2V5OiBwcm9wcy5rZXkgfHwgYF8ke25hbWV9YCB9LCB2YWxpZFNsb3RDb250ZW50IHx8IChmYWxsYmFjayA/IGZhbGxiYWNrKCkgOiBbXSksIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSAvKiBTVEFCTEUgKi9cclxuICAgICAgICA/IDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqL1xyXG4gICAgICAgIDogLTIgLyogQkFJTCAqLyk7XHJcbiAgICBpZiAoIW5vU2xvdHRlZCAmJiByZW5kZXJlZC5zY29wZUlkKSB7XHJcbiAgICAgICAgcmVuZGVyZWQuc2xvdFNjb3BlSWRzID0gW3JlbmRlcmVkLnNjb3BlSWQgKyAnLXMnXTtcclxuICAgIH1cclxuICAgIGlmIChzbG90ICYmIHNsb3QuX2MpIHtcclxuICAgICAgICBzbG90Ll9kID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiByZW5kZXJlZDtcclxufVxyXG5mdW5jdGlvbiBlbnN1cmVWYWxpZFZOb2RlKHZub2Rlcykge1xyXG4gICAgcmV0dXJuIHZub2Rlcy5zb21lKGNoaWxkID0+IHtcclxuICAgICAgICBpZiAoIWlzVk5vZGUoY2hpbGQpKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gQ29tbWVudCQxKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmXHJcbiAgICAgICAgICAgICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSlcclxuICAgICAgICA/IHZub2Rlc1xyXG4gICAgICAgIDogbnVsbDtcclxufVxuXG4vKipcclxuICogRm9yIHByZWZpeGluZyBrZXlzIGluIHYtb249XCJvYmpcIiB3aXRoIFwib25cIlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gdG9IYW5kbGVycyhvYmopIHtcclxuICAgIGNvbnN0IHJldCA9IHt9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICAgIHdhcm4oYHYtb24gd2l0aCBubyBhcmd1bWVudCBleHBlY3RzIGFuIG9iamVjdCB2YWx1ZS5gKTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgcmV0W3RvSGFuZGxlcktleShrZXkpXSA9IG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogIzI0MzcgSW4gVnVlIDMsIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBkbyBub3QgaGF2ZSBhIHB1YmxpYyBpbnN0YW5jZSBwcm94eSBidXRcclxuICogdGhleSBleGlzdCBpbiB0aGUgaW50ZXJuYWwgcGFyZW50IGNoYWluLiBGb3IgY29kZSB0aGF0IHJlbGllcyBvbiB0cmF2ZXJzaW5nXHJcbiAqIHB1YmxpYyAkcGFyZW50IGNoYWlucywgc2tpcCBmdW5jdGlvbmFsIG9uZXMgYW5kIGdvIHRvIHRoZSBwYXJlbnQgaW5zdGVhZC5cclxuICovXHJcbmNvbnN0IGdldFB1YmxpY0luc3RhbmNlID0gKGkpID0+IHtcclxuICAgIGlmICghaSlcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKVxyXG4gICAgICAgIHJldHVybiBpLmV4cG9zZWQgPyBpLmV4cG9zZWQgOiBpLnByb3h5O1xyXG4gICAgcmV0dXJuIGdldFB1YmxpY0luc3RhbmNlKGkucGFyZW50KTtcclxufTtcclxuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IGV4dGVuZChPYmplY3QuY3JlYXRlKG51bGwpLCB7XHJcbiAgICAkOiBpID0+IGksXHJcbiAgICAkZWw6IGkgPT4gaS52bm9kZS5lbCxcclxuICAgICRkYXRhOiBpID0+IGkuZGF0YSxcclxuICAgICRwcm9wczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkucHJvcHMpIDogaS5wcm9wcyksXHJcbiAgICAkYXR0cnM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLmF0dHJzKSA6IGkuYXR0cnMpLFxyXG4gICAgJHNsb3RzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5zbG90cykgOiBpLnNsb3RzKSxcclxuICAgICRyZWZzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5yZWZzKSA6IGkucmVmcyksXHJcbiAgICAkcGFyZW50OiBpID0+IGdldFB1YmxpY0luc3RhbmNlKGkucGFyZW50KSxcclxuICAgICRyb290OiBpID0+IGdldFB1YmxpY0luc3RhbmNlKGkucm9vdCksXHJcbiAgICAkZW1pdDogaSA9PiBpLmVtaXQsXHJcbiAgICAkb3B0aW9uczogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IHJlc29sdmVNZXJnZWRPcHRpb25zKGkpIDogaS50eXBlKSxcclxuICAgICRmb3JjZVVwZGF0ZTogaSA9PiAoKSA9PiBxdWV1ZUpvYihpLnVwZGF0ZSksXHJcbiAgICAkbmV4dFRpY2s6IGkgPT4gbmV4dFRpY2suYmluZChpLnByb3h5KSxcclxuICAgICR3YXRjaDogaSA9PiAoX19WVUVfT1BUSU9OU19BUElfXyA/IGluc3RhbmNlV2F0Y2guYmluZChpKSA6IE5PT1ApXHJcbn0pO1xyXG5jb25zdCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSB7XHJcbiAgICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcclxuICAgICAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBsZXQgQHZ1ZS9yZWFjdGl2aXR5IGtub3cgaXQgc2hvdWxkIG5ldmVyIG9ic2VydmUgVnVlIHB1YmxpYyBpbnN0YW5jZXMuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGZvciBpbnRlcm5hbCBmb3JtYXR0ZXJzIHRvIGtub3cgdGhhdCB0aGlzIGlzIGEgVnVlIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgPT09ICdfX2lzVnVlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGF0YSAvIHByb3BzIC8gY3R4XHJcbiAgICAgICAgLy8gVGhpcyBnZXR0ZXIgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHByb3BlcnR5IGFjY2VzcyBvbiB0aGUgcmVuZGVyIGNvbnRleHRcclxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcclxuICAgICAgICAvLyBpcyB0aGUgbXVsdGlwbGUgaGFzT3duKCkgY2FsbHMuIEl0J3MgbXVjaCBmYXN0ZXIgdG8gZG8gYSBzaW1wbGUgcHJvcGVydHlcclxuICAgICAgICAvLyBhY2Nlc3Mgb24gYSBwbGFpbiBvYmplY3QsIHNvIHdlIHVzZSBhbiBhY2Nlc3NDYWNoZSBvYmplY3QgKHdpdGggbnVsbFxyXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDAgLyogU0VUVVAgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxIC8qIERBVEEgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzIC8qIENPTlRFWFQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIgLyogUFJPUFMgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IGp1c3QgZmFsbHRocm91Z2hcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAwIC8qIFNFVFVQICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIERBVEEgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDIgLyogUFJPUFMgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMyAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8IHNob3VsZENhY2hlQWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBPVEhFUiAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwdWJsaWNHZXR0ZXIgPSBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV07XHJcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcclxuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKHB1YmxpY0dldHRlcikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xyXG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0dldHRlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGNzcyBtb2R1bGUgKGluamVjdGVkIGJ5IHZ1ZS1sb2FkZXIpXHJcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxyXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjc3NNb2R1bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcclxuICAgICAgICAgICAgLy8gdXNlciBtYXkgc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGB0aGlzYCB0aGF0IHN0YXJ0IHdpdGggYCRgXHJcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAzIC8qIENPTlRFWFQgKi87XHJcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgICAgICAoKGdsb2JhbFByb3BlcnRpZXMgPSBhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSxcclxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxQcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAoIWlzU3RyaW5nKGtleSkgfHxcclxuICAgICAgICAgICAgICAgIC8vICMxMDkxIGF2b2lkIGludGVybmFsIGlzUmVmL2lzVk5vZGUgY2hlY2tzIG9uIGNvbXBvbmVudCBpbnN0YW5jZSBsZWFkaW5nXHJcbiAgICAgICAgICAgICAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcclxuICAgICAgICAgICAgICAgIGtleS5pbmRleE9mKCdfX3YnKSAhPT0gMCkpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJlxyXG4gICAgICAgICAgICAgICAgKGtleVswXSA9PT0gJyQnIHx8IGtleVswXSA9PT0gJ18nKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RhbmNlID09PSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGJ1dCBpcyBub3QgZGVmaW5lZCBvbiBpbnN0YW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgc2V0dXBTdGF0ZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGFzT3duKGluc3RhbmNlLnByb3BzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyAmJiBrZXkuc2xpY2UoMSkgaW4gaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCAkIGFyZSByZXNlcnZlZCBhbmQgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGhhcyh7IF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH0gfSwga2V5KSB7XHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcclxuICAgICAgICByZXR1cm4gKGFjY2Vzc0NhY2hlW2tleV0gIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGN0eCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XHJcbiAgICB9XHJcbn07XHJcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlKSB7XHJcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcclxuICAgICAgICB3YXJuKGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gYCArXHJcbiAgICAgICAgICAgIGBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IGV4dGVuZCh7fSwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLCB7XHJcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICAvLyBmYXN0IHBhdGggZm9yIHVuc2NvcGFibGVzIHdoZW4gdXNpbmcgYHdpdGhgIGJsb2NrXHJcbiAgICAgICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycy5nZXQodGFyZ2V0LCBrZXksIHRhcmdldCk7XHJcbiAgICB9LFxyXG4gICAgaGFzKF8sIGtleSkge1xyXG4gICAgICAgIGNvbnN0IGhhcyA9IGtleVswXSAhPT0gJ18nICYmICFpc0dsb2JhbGx5V2hpdGVsaXN0ZWQoa2V5KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXMgJiYgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmhhcyhfLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIF8gd2hpY2ggaXMgYSByZXNlcnZlZCBwcmVmaXggZm9yIFZ1ZSBpbnRlcm5hbHMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoYXM7XHJcbiAgICB9XHJcbn0pO1xyXG4vLyBJbiBkZXYgbW9kZSwgdGhlIHByb3h5IHRhcmdldCBleHBvc2VzIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgc2VlbiBvbiBgdGhpc2BcclxuLy8gZm9yIGVhc2llciBjb25zb2xlIGluc3BlY3Rpb24uIEluIHByb2QgbW9kZSBpdCB3aWxsIGJlIGFuIGVtcHR5IG9iamVjdCBzb1xyXG4vLyB0aGVzZSBwcm9wZXJ0aWVzIGRlZmluaXRpb25zIGNhbiBiZSBza2lwcGVkLlxyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJDb250ZXh0KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcclxuICAgIC8vIGV4cG9zZSBpbnRlcm5hbCBpbnN0YW5jZSBmb3IgcHJveHkgaGFuZGxlcnNcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGBfYCwge1xyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlXHJcbiAgICB9KTtcclxuICAgIC8vIGV4cG9zZSBwdWJsaWMgcHJvcGVydGllc1xyXG4gICAgT2JqZWN0LmtleXMocHVibGljUHJvcGVydGllc01hcCkuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXHJcbiAgICAgICAgICAgIC8vIGludGVyY2VwdGVkIGJ5IHRoZSBwcm94eSBzbyBubyBuZWVkIGZvciBpbXBsZW1lbnRhdGlvbixcclxuICAgICAgICAgICAgLy8gYnV0IG5lZWRlZCB0byBwcmV2ZW50IHNldCBlcnJvcnNcclxuICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuLy8gZGV2IG9ubHlcclxuZnVuY3Rpb24gZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHsgY3R4LCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdIH0gPSBpbnN0YW5jZTtcclxuICAgIGlmIChwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyhwcm9wc09wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbnN0YW5jZS5wcm9wc1trZXldLFxyXG4gICAgICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8vIGRldiBvbmx5XHJcbmZ1bmN0aW9uIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlIH0gPSBpbnN0YW5jZTtcclxuICAgIE9iamVjdC5rZXlzKHRvUmF3KHNldHVwU3RhdGUpKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaWYgKGtleVswXSA9PT0gJyQnIHx8IGtleVswXSA9PT0gJ18nKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHNldHVwKCkgcmV0dXJuIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gc2hvdWxkIG5vdCBzdGFydCB3aXRoIFwiJFwiIG9yIFwiX1wiIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdoaWNoIGFyZSByZXNlcnZlZCBwcmVmaXhlcyBmb3IgVnVlIGludGVybmFscy5gKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcclxuICAgICAgICAgICAgc2V0OiBOT09QXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxuXG5jb25zdCBlbXB0eUFwcENvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XHJcbmxldCB1aWQkMSA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKHZub2RlLCBwYXJlbnQsIHN1c3BlbnNlKSB7XHJcbiAgICBjb25zdCB0eXBlID0gdm5vZGUudHlwZTtcclxuICAgIC8vIGluaGVyaXQgcGFyZW50IGFwcCBjb250ZXh0IC0gb3IgLSBpZiByb290LCBhZG9wdCBmcm9tIHJvb3Qgdm5vZGVcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSAocGFyZW50ID8gcGFyZW50LmFwcENvbnRleHQgOiB2bm9kZS5hcHBDb250ZXh0KSB8fCBlbXB0eUFwcENvbnRleHQ7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHtcclxuICAgICAgICB1aWQ6IHVpZCQxKyssXHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgYXBwQ29udGV4dCxcclxuICAgICAgICByb290OiBudWxsLFxyXG4gICAgICAgIG5leHQ6IG51bGwsXHJcbiAgICAgICAgc3ViVHJlZTogbnVsbCxcclxuICAgICAgICB1cGRhdGU6IG51bGwsXHJcbiAgICAgICAgcmVuZGVyOiBudWxsLFxyXG4gICAgICAgIHByb3h5OiBudWxsLFxyXG4gICAgICAgIGV4cG9zZWQ6IG51bGwsXHJcbiAgICAgICAgd2l0aFByb3h5OiBudWxsLFxyXG4gICAgICAgIGVmZmVjdHM6IG51bGwsXHJcbiAgICAgICAgcHJvdmlkZXM6IHBhcmVudCA/IHBhcmVudC5wcm92aWRlcyA6IE9iamVjdC5jcmVhdGUoYXBwQ29udGV4dC5wcm92aWRlcyksXHJcbiAgICAgICAgYWNjZXNzQ2FjaGU6IG51bGwsXHJcbiAgICAgICAgcmVuZGVyQ2FjaGU6IFtdLFxyXG4gICAgICAgIC8vIGxvY2FsIHJlc292bGVkIGFzc2V0c1xyXG4gICAgICAgIGNvbXBvbmVudHM6IG51bGwsXHJcbiAgICAgICAgZGlyZWN0aXZlczogbnVsbCxcclxuICAgICAgICAvLyByZXNvbHZlZCBwcm9wcyBhbmQgZW1pdHMgb3B0aW9uc1xyXG4gICAgICAgIHByb3BzT3B0aW9uczogbm9ybWFsaXplUHJvcHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxyXG4gICAgICAgIGVtaXRzT3B0aW9uczogbm9ybWFsaXplRW1pdHNPcHRpb25zKHR5cGUsIGFwcENvbnRleHQpLFxyXG4gICAgICAgIC8vIGVtaXRcclxuICAgICAgICBlbWl0OiBudWxsLFxyXG4gICAgICAgIGVtaXR0ZWQ6IG51bGwsXHJcbiAgICAgICAgLy8gcHJvcHMgZGVmYXVsdCB2YWx1ZVxyXG4gICAgICAgIHByb3BzRGVmYXVsdHM6IEVNUFRZX09CSixcclxuICAgICAgICAvLyBpbmhlcml0QXR0cnNcclxuICAgICAgICBpbmhlcml0QXR0cnM6IHR5cGUuaW5oZXJpdEF0dHJzLFxyXG4gICAgICAgIC8vIHN0YXRlXHJcbiAgICAgICAgY3R4OiBFTVBUWV9PQkosXHJcbiAgICAgICAgZGF0YTogRU1QVFlfT0JKLFxyXG4gICAgICAgIHByb3BzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgYXR0cnM6IEVNUFRZX09CSixcclxuICAgICAgICBzbG90czogRU1QVFlfT0JKLFxyXG4gICAgICAgIHJlZnM6IEVNUFRZX09CSixcclxuICAgICAgICBzZXR1cFN0YXRlOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2V0dXBDb250ZXh0OiBudWxsLFxyXG4gICAgICAgIC8vIHN1c3BlbnNlIHJlbGF0ZWRcclxuICAgICAgICBzdXNwZW5zZSxcclxuICAgICAgICBzdXNwZW5zZUlkOiBzdXNwZW5zZSA/IHN1c3BlbnNlLnBlbmRpbmdJZCA6IDAsXHJcbiAgICAgICAgYXN5bmNEZXA6IG51bGwsXHJcbiAgICAgICAgYXN5bmNSZXNvbHZlZDogZmFsc2UsXHJcbiAgICAgICAgLy8gbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICAgICAgLy8gbm90IHVzaW5nIGVudW1zIGhlcmUgYmVjYXVzZSBpdCByZXN1bHRzIGluIGNvbXB1dGVkIHByb3BlcnRpZXNcclxuICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc0RlYWN0aXZhdGVkOiBmYWxzZSxcclxuICAgICAgICBiYzogbnVsbCxcclxuICAgICAgICBjOiBudWxsLFxyXG4gICAgICAgIGJtOiBudWxsLFxyXG4gICAgICAgIG06IG51bGwsXHJcbiAgICAgICAgYnU6IG51bGwsXHJcbiAgICAgICAgdTogbnVsbCxcclxuICAgICAgICB1bTogbnVsbCxcclxuICAgICAgICBidW06IG51bGwsXHJcbiAgICAgICAgZGE6IG51bGwsXHJcbiAgICAgICAgYTogbnVsbCxcclxuICAgICAgICBydGc6IG51bGwsXHJcbiAgICAgICAgcnRjOiBudWxsLFxyXG4gICAgICAgIGVjOiBudWxsLFxyXG4gICAgICAgIHNwOiBudWxsXHJcbiAgICB9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluc3RhbmNlLmN0eCA9IGNyZWF0ZVJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaW5zdGFuY2UuY3R4ID0geyBfOiBpbnN0YW5jZSB9O1xyXG4gICAgfVxyXG4gICAgaW5zdGFuY2Uucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogaW5zdGFuY2U7XHJcbiAgICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcclxuICAgIHJldHVybiBpbnN0YW5jZTtcclxufVxyXG5sZXQgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuY29uc3Qgc2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XHJcbiAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxufTtcclxuY29uc3QgaXNCdWlsdEluVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcpO1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgY29uZmlnKSB7XHJcbiAgICBjb25zdCBhcHBJc05hdGl2ZVRhZyA9IGNvbmZpZy5pc05hdGl2ZVRhZyB8fCBOTztcclxuICAgIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgYXBwSXNOYXRpdmVUYWcobmFtZSkpIHtcclxuICAgICAgICB3YXJuKCdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiAnICsgbmFtZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuIGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovO1xyXG59XHJcbmxldCBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBmYWxzZTtcclxuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UpIHtcclxuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGlzU1NSO1xyXG4gICAgY29uc3QgeyBwcm9wcywgY2hpbGRyZW4gfSA9IGluc3RhbmNlLnZub2RlO1xyXG4gICAgY29uc3QgaXNTdGF0ZWZ1bCA9IGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpO1xyXG4gICAgaW5pdFByb3BzKGluc3RhbmNlLCBwcm9wcywgaXNTdGF0ZWZ1bCwgaXNTU1IpO1xyXG4gICAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbik7XHJcbiAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGlzU3RhdGVmdWxcclxuICAgICAgICA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbiAgICByZXR1cm4gc2V0dXBSZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcclxuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuY29tcG9uZW50cyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lc1tpXSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xyXG4gICAgICAgICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmNvbXBpbGVyT3B0aW9ucyAmJiBpc1J1bnRpbWVPbmx5KCkpIHtcclxuICAgICAgICAgICAgd2FybihgXCJjb21waWxlck9wdGlvbnNcIiBpcyBvbmx5IHN1cHBvcnRlZCB3aGVuIHVzaW5nIGEgYnVpbGQgb2YgVnVlIHRoYXQgYCArXHJcbiAgICAgICAgICAgICAgICBgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIuIFNpbmNlIHlvdSBhcmUgdXNpbmcgYSBydW50aW1lLW9ubHkgYCArXHJcbiAgICAgICAgICAgICAgICBgYnVpbGQsIHRoZSBvcHRpb25zIHNob3VsZCBiZSBwYXNzZWQgdmlhIHlvdXIgYnVpbGQgdG9vbCBjb25maWcgaW5zdGVhZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAwLiBjcmVhdGUgcmVuZGVyIHByb3h5IHByb3BlcnR5IGFjY2VzcyBjYWNoZVxyXG4gICAgaW5zdGFuY2UuYWNjZXNzQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgLy8gMS4gY3JlYXRlIHB1YmxpYyBpbnN0YW5jZSAvIHJlbmRlciBwcm94eVxyXG4gICAgLy8gYWxzbyBtYXJrIGl0IHJhdyBzbyBpdCdzIG5ldmVyIG9ic2VydmVkXHJcbiAgICBpbnN0YW5jZS5wcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgLy8gMi4gY2FsbCBzZXR1cCgpXHJcbiAgICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XHJcbiAgICBpZiAoc2V0dXApIHtcclxuICAgICAgICBjb25zdCBzZXR1cENvbnRleHQgPSAoaW5zdGFuY2Uuc2V0dXBDb250ZXh0ID1cclxuICAgICAgICAgICAgc2V0dXAubGVuZ3RoID4gMSA/IGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkgOiBudWxsKTtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc2V0dXAsIGluc3RhbmNlLCAwIC8qIFNFVFVQX0ZVTkNUSU9OICovLCBbKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICBpZiAoaXNTU1IpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgcHJvbWlzZSBzbyBzZXJ2ZXItcmVuZGVyZXIgY2FuIHdhaXQgb24gaXRcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCByZXNvbHZlZFJlc3VsdCwgaXNTU1IpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgaW5zdGFuY2UsIDAgLyogU0VUVVBfRlVOQ1RJT04gKi8pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3luYyBzZXR1cCByZXR1cm5lZCBQcm9taXNlLlxyXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBoZXJlIGFuZCB3YWl0IGZvciByZS1lbnRyeS5cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jRGVwID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgLy8gc2V0dXAgcmV0dXJuZWQgYW4gaW5saW5lIHJlbmRlciBmdW5jdGlvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCBub3QgcmV0dXJuIFZOb2RlcyBkaXJlY3RseSAtIGAgK1xyXG4gICAgICAgICAgICAgICAgYHJldHVybiBhIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBiaW5kaW5ncy5cclxuICAgICAgICAvLyBhc3N1bWluZyBhIHJlbmRlciBmdW5jdGlvbiBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGlzIHByZXNlbnQuXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnNldHVwU3RhdGUgPSBwcm94eVJlZnMoc2V0dXBSZXN1bHQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldHVwUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBzZXR1cFJlc3VsdH1gKTtcclxuICAgIH1cclxuICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XHJcbn1cclxubGV0IGNvbXBpbGU7XHJcbi8vIGRldiBvbmx5XHJcbmNvbnN0IGlzUnVudGltZU9ubHkgPSAoKSA9PiAhY29tcGlsZTtcclxuLyoqXHJcbiAqIEZvciBydW50aW1lLWRvbSB0byByZWdpc3RlciB0aGUgY29tcGlsZXIuXHJcbiAqIE5vdGUgdGhlIGV4cG9ydGVkIG1ldGhvZCB1c2VzIGFueSB0byBhdm9pZCBkLnRzIHJlbHlpbmcgb24gdGhlIGNvbXBpbGVyIHR5cGVzLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcclxuICAgIGNvbXBpbGUgPSBfY29tcGlsZTtcclxufVxyXG5mdW5jdGlvbiBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IsIHNraXBPcHRpb25zKSB7XHJcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgLy8gdGVtcGxhdGUgLyByZW5kZXIgZnVuY3Rpb24gbm9ybWFsaXphdGlvblxyXG4gICAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcclxuICAgICAgICAvLyBjb3VsZCBiZSBzZXQgZnJvbSBzZXR1cCgpXHJcbiAgICAgICAgaWYgKGNvbXBpbGUgJiYgIUNvbXBvbmVudC5yZW5kZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBDb21wb25lbnQudGVtcGxhdGU7XHJcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgaXNDdXN0b21FbGVtZW50LCBjb21waWxlck9wdGlvbnMgfSA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkZWxpbWl0ZXJzLCBjb21waWxlck9wdGlvbnM6IGNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyB9ID0gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmluYWxDb21waWxlck9wdGlvbnMgPSBleHRlbmQoZXh0ZW5kKHtcclxuICAgICAgICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyc1xyXG4gICAgICAgICAgICAgICAgfSwgY29tcGlsZXJPcHRpb25zKSwgY29tcG9uZW50Q29tcGlsZXJPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIENvbXBvbmVudC5yZW5kZXIgPSBjb21waWxlKHRlbXBsYXRlLCBmaW5hbENvbXBpbGVyT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5yZW5kZXIgPSAoQ29tcG9uZW50LnJlbmRlciB8fCBOT09QKTtcclxuICAgICAgICAvLyBmb3IgcnVudGltZS1jb21waWxlZCByZW5kZXIgZnVuY3Rpb25zIHVzaW5nIGB3aXRoYCBibG9ja3MsIHRoZSByZW5kZXJcclxuICAgICAgICAvLyBwcm94eSB1c2VkIG5lZWRzIGEgZGlmZmVyZW50IGBoYXNgIGhhbmRsZXIgd2hpY2ggaXMgbW9yZSBwZXJmb3JtYW50IGFuZFxyXG4gICAgICAgIC8vIGFsc28gb25seSBhbGxvd3MgYSB3aGl0ZWxpc3Qgb2YgZ2xvYmFscyB0byBmYWxsdGhyb3VnaC5cclxuICAgICAgICBpZiAoaW5zdGFuY2UucmVuZGVyLl9yYykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS53aXRoUHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHN1cHBvcnQgZm9yIDIueCBvcHRpb25zXHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhKGZhbHNlICkpIHtcclxuICAgICAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgYXBwbHlPcHRpb25zKGluc3RhbmNlKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIHdhcm4gbWlzc2luZyB0ZW1wbGF0ZS9yZW5kZXJcclxuICAgIC8vIHRoZSBydW50aW1lIGNvbXBpbGF0aW9uIG9mIHRlbXBsYXRlIGluIFNTUiBpcyBkb25lIGJ5IHNlcnZlci1yZW5kZXJcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIUNvbXBvbmVudC5yZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QICYmICFpc1NTUikge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghY29tcGlsZSAmJiBDb21wb25lbnQudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IHByb3ZpZGVkIHRlbXBsYXRlIG9wdGlvbiBidXQgYCArXHJcbiAgICAgICAgICAgICAgICBgcnVudGltZSBjb21waWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgVnVlLmAgK1xyXG4gICAgICAgICAgICAgICAgKGAgQ29uZmlndXJlIHlvdXIgYnVuZGxlciB0byBhbGlhcyBcInZ1ZVwiIHRvIFwidnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzXCIuYFxyXG4gICAgICAgICAgICAgICAgICAgICkgLyogc2hvdWxkIG5vdCBoYXBwZW4gKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGlzIG1pc3NpbmcgdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBhdHRySGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6ICh0YXJnZXQsIGtleSkgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xyXG4gICAgfSxcclxuICAgIHNldDogKCkgPT4ge1xyXG4gICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlUHJvcGVydHk6ICgpID0+IHtcclxuICAgICAgICB3YXJuKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGV4cG9zZSA9IGV4cG9zZWQgPT4ge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaW5zdGFuY2UuZXhwb3NlZCkge1xyXG4gICAgICAgICAgICB3YXJuKGBleHBvc2UoKSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBwZXIgc2V0dXAoKS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IHByb3h5UmVmcyhleHBvc2VkKTtcclxuICAgIH07XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyAob3ZlcndyaXRlcyBzaG91bGQgbm90IGJlIGRvbmUgaW4gcHJvZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIGF0dHJIYW5kbGVycyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldCBzbG90cygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2Uuc2xvdHMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgZW1pdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBvc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGF0dHJzOiBpbnN0YW5jZS5hdHRycyxcclxuICAgICAgICAgICAgc2xvdHM6IGluc3RhbmNlLnNsb3RzLFxyXG4gICAgICAgICAgICBlbWl0OiBpbnN0YW5jZS5lbWl0LFxyXG4gICAgICAgICAgICBleHBvc2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbi8vIHJlY29yZCBlZmZlY3RzIGNyZWF0ZWQgZHVyaW5nIGEgY29tcG9uZW50J3Mgc2V0dXAoKSBzbyB0aGF0IHRoZXkgY2FuIGJlXHJcbi8vIHN0b3BwZWQgd2hlbiB0aGUgY29tcG9uZW50IHVubW91bnRzXHJcbmZ1bmN0aW9uIHJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QoZWZmZWN0LCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgKGluc3RhbmNlLmVmZmVjdHMgfHwgKGluc3RhbmNlLmVmZmVjdHMgPSBbXSkpLnB1c2goZWZmZWN0KTtcclxuICAgIH1cclxufVxyXG5jb25zdCBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xyXG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIGMgPT4gYy50b1VwcGVyQ2FzZSgpKS5yZXBsYWNlKC9bLV9dL2csICcnKTtcclxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpIHtcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKENvbXBvbmVudClcclxuICAgICAgICA/IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZVxyXG4gICAgICAgIDogQ29tcG9uZW50Lm5hbWU7XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgQ29tcG9uZW50LCBpc1Jvb3QgPSBmYWxzZSkge1xyXG4gICAgbGV0IG5hbWUgPSBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCk7XHJcbiAgICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xyXG4gICAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2hbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFuYW1lICYmIGluc3RhbmNlICYmIGluc3RhbmNlLnBhcmVudCkge1xyXG4gICAgICAgIC8vIHRyeSB0byBpbmZlciB0aGUgbmFtZSBiYXNlZCBvbiByZXZlcnNlIHJlc29sdXRpb25cclxuICAgICAgICBjb25zdCBpbmZlckZyb21SZWdpc3RyeSA9IChyZWdpc3RyeSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZWdpc3RyeSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5W2tleV0gPT09IENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG5hbWUgPVxyXG4gICAgICAgICAgICBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5jb21wb25lbnRzIHx8XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKSB8fCBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XHJcbn1cclxuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUpICYmICdfX3ZjY09wdHMnIGluIHZhbHVlO1xyXG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVkKGdldHRlck9yT3B0aW9ucykge1xyXG4gICAgY29uc3QgYyA9IGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zKTtcclxuICAgIHJlY29yZEluc3RhbmNlQm91bmRFZmZlY3QoYy5lZmZlY3QpO1xyXG4gICAgcmV0dXJuIGM7XHJcbn1cblxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gZGVmaW5lUHJvcHMoKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgZGVmaW5lUHJvcHMoKSBpcyBhIGNvbXBpbGVyLWhpbnQgaGVscGVyIHRoYXQgaXMgb25seSB1c2FibGUgaW5zaWRlIGAgK1xyXG4gICAgICAgICAgICBgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGAgK1xyXG4gICAgICAgICAgICBgY29tcGlsZWQgYXdheSBhbmQgcGFzc2luZyBpdCBhdCBydW50aW1lIGhhcyBubyBlZmZlY3QuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiBkZWZpbmVFbWl0KCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYGRlZmluZUVtaXQoKSBpcyBhIGNvbXBpbGVyLWhpbnQgaGVscGVyIHRoYXQgaXMgb25seSB1c2FibGUgaW5zaWRlIGAgK1xyXG4gICAgICAgICAgICBgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGAgK1xyXG4gICAgICAgICAgICBgY29tcGlsZWQgYXdheSBhbmQgcGFzc2luZyBpdCBhdCBydW50aW1lIGhhcyBubyBlZmZlY3QuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5mdW5jdGlvbiB1c2VDb250ZXh0KCkge1xyXG4gICAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaSkge1xyXG4gICAgICAgIHdhcm4oYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaS5zZXR1cENvbnRleHQgfHwgKGkuc2V0dXBDb250ZXh0ID0gY3JlYXRlU2V0dXBDb250ZXh0KGkpKTtcclxufVxuXG4vLyBBY3R1YWwgaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gaCh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKSB7XHJcbiAgICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIGlmIChsID09PSAyKSB7XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHByb3BzT3JDaGlsZHJlbikgJiYgIWlzQXJyYXkocHJvcHNPckNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAvLyBzaW5nbGUgdm5vZGUgd2l0aG91dCBwcm9wc1xyXG4gICAgICAgICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgW3Byb3BzT3JDaGlsZHJlbl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzIHdpdGhvdXQgY2hpbGRyZW5cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBvbWl0IHByb3BzXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBwcm9wc09yQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChsID4gMykge1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGwgPT09IDMgJiYgaXNWTm9kZShjaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XHJcbiAgICB9XHJcbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgc3NyQ29udGV4dGAgOiBgYCk7XHJcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gaW5qZWN0KHNzckNvbnRleHRLZXkpO1xyXG4gICAgICAgIGlmICghY3R4KSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgYCArXHJcbiAgICAgICAgICAgICAgICBgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN0eDtcclxuICAgIH1cclxufTtcblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG4gICAgaWYgKCEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojM2JhNzc2JyB9O1xyXG4gICAgY29uc3QgbnVtYmVyU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzBiMWJjOScgfTtcclxuICAgIGNvbnN0IHN0cmluZ1N0eWxlID0geyBzdHlsZTogJ2NvbG9yOiNiNjJlMjQnIH07XHJcbiAgICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6IzlkMjg4YycgfTtcclxuICAgIC8vIGN1c3RvbSBmb3JtYXR0ZXIgZm9yIENocm9tZVxyXG4gICAgLy8gaHR0cHM6Ly93d3cubWF0dHpldW5lcnQuY29tLzIwMTYvMDIvMTkvY3VzdG9tLWNocm9tZS1kZXZ0b29scy1vYmplY3QtZm9ybWF0dGVycy5odG1sXHJcbiAgICBjb25zdCBmb3JtYXR0ZXIgPSB7XHJcbiAgICAgICAgaGVhZGVyKG9iaikge1xyXG4gICAgICAgICAgICAvLyBUT0RPIGFsc28gZm9ybWF0IENvbXBvbmVudFB1YmxpY0luc3RhbmNlICYgY3R4LnNsb3RzL2F0dHJzIGluIHNldHVwXHJcbiAgICAgICAgICAgIGlmICghaXNPYmplY3Qob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkaXYnLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWYob2JqKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICBbJ3NwYW4nLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqLnZhbHVlKSxcclxuICAgICAgICAgICAgICAgICAgICBgPmBcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFjdGl2ZShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCAnUmVhY3RpdmUnXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcclxuICAgICAgICAgICAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCAnUmVhZG9ubHknXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcclxuICAgICAgICAgICAgICAgICAgICAnPidcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNCb2R5KG9iaikge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIG9iai5fX2lzVnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYm9keShvYmopIHtcclxuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmouX19pc1Z1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gZm9ybWF0SW5zdGFuY2UoaW5zdGFuY2UpIHtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBbXTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UudHlwZS5wcm9wcyAmJiBpbnN0YW5jZS5wcm9wcykge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdwcm9wcycsIHRvUmF3KGluc3RhbmNlLnByb3BzKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFuY2Uuc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ3NldHVwJywgaW5zdGFuY2Uuc2V0dXBTdGF0ZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5zdGFuY2UuZGF0YSAhPT0gRU1QVFlfT0JKKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2RhdGEnLCB0b1JhdyhpbnN0YW5jZS5kYXRhKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb21wdXRlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnY29tcHV0ZWQnKTtcclxuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygnY29tcHV0ZWQnLCBjb21wdXRlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCAnaW5qZWN0Jyk7XHJcbiAgICAgICAgaWYgKGluamVjdGVkKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2luamVjdGVkJywgaW5qZWN0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYmxvY2tzLnB1c2goW1xyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdzcGFuJyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZToga2V5d29yZFN0eWxlLnN0eWxlICsgJztvcGFjaXR5OjAuNjYnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJyQgKGludGVybmFsKTogJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbJ29iamVjdCcsIHsgb2JqZWN0OiBpbnN0YW5jZSB9XVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHJldHVybiBibG9ja3M7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUJsb2NrKHR5cGUsIHRhcmdldCkge1xyXG4gICAgICAgIHRhcmdldCA9IGV4dGVuZCh7fSwgdGFyZ2V0KTtcclxuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCB7fV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICB7IHN0eWxlOiAnbGluZS1oZWlnaHQ6MS4yNWVtO21hcmdpbi1ib3R0b206MC42ZW0nIH0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY29sb3I6IzQ3NjU4MidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0eXBlXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAncGFkZGluZy1sZWZ0OjEuMjVlbSdcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcChrZXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgWydzcGFuJywga2V5d29yZFN0eWxlLCBrZXkgKyAnOiAnXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUodGFyZ2V0W2tleV0sIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIG51bWJlclN0eWxlLCB2XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBzdHJpbmdTdHlsZSwgSlNPTi5zdHJpbmdpZnkodildO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBrZXl3b3JkU3R5bGUsIHZdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc09iamVjdCh2KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gWydvYmplY3QnLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIFN0cmluZyh2KV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZXh0cmFjdEtleXMoaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgICAgICBjb25zdCBDb21wID0gaW5zdGFuY2UudHlwZTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xyXG4gICAgICAgICAgICBpZiAoaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXh0cmFjdGVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XHJcbiAgICAgICAgaWYgKChpc0FycmF5KG9wdHMpICYmIG9wdHMuaW5jbHVkZXMoa2V5KSkgfHxcclxuICAgICAgICAgICAgKGlzT2JqZWN0KG9wdHMpICYmIGtleSBpbiBvcHRzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXAuZXh0ZW5kcyAmJiBpc0tleU9mVHlwZShDb21wLmV4dGVuZHMsIGtleSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKG0gPT4gaXNLZXlPZlR5cGUobSwga2V5LCB0eXBlKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2VuUmVmRmxhZyh2KSB7XHJcbiAgICAgICAgaWYgKHYuX3NoYWxsb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBTaGFsbG93UmVmYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYuZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYFJlZmA7XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xyXG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycyA9IFtmb3JtYXR0ZXJdO1xyXG4gICAgfVxyXG59XG5cbi8vIENvcmUgQVBJIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5jb25zdCB2ZXJzaW9uID0gXCIzLjEuMVwiO1xyXG4vKipcclxuICogU1NSIHV0aWxzIGZvciBcXEB2dWUvc2VydmVyLXJlbmRlcmVyLiBPbmx5IGV4cG9zZWQgaW4gY2pzIGJ1aWxkcy5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBzc3JVdGlscyA9IChudWxsKTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbCBvbmx5IGV4cG9zZWQgaW4gY29tcGF0IGJ1aWxkc1xyXG4gKi9cclxuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgb25seSBleHBvc2VkIGluIGNvbXBhdCBidWlsZHMuXHJcbiAqL1xyXG5jb25zdCBjb21wYXRVdGlscyA9IChudWxsKTtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIENvbW1lbnQkMSBhcyBDb21tZW50LCBGcmFnbWVudCwgS2VlcEFsaXZlLCBTdGF0aWMsIFN1c3BlbnNlLCBUZWxlcG9ydCwgVGV4dCwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGNhbGxXaXRoRXJyb3JIYW5kbGluZywgY2xvbmVWTm9kZSwgY29tcGF0VXRpbHMsIGNvbXB1dGVkLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNsb3RzLCBjcmVhdGVTdGF0aWNWTm9kZSwgY3JlYXRlVGV4dFZOb2RlLCBjcmVhdGVWTm9kZSwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lRW1pdCwgZGVmaW5lUHJvcHMsIGRldnRvb2xzLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgaCwgaGFuZGxlRXJyb3IsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluamVjdCwgaXNSdW50aW1lT25seSwgaXNWTm9kZSwgbWVyZ2VQcm9wcywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25TZXJ2ZXJQcmVmZXRjaCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwdXNoU2NvcGVJZCwgcXVldWVQb3N0Rmx1c2hDYiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlckxpc3QsIHJlbmRlclNsb3QsIHJlc29sdmVDb21wb25lbnQsIHJlc29sdmVEaXJlY3RpdmUsIHJlc29sdmVEeW5hbWljQ29tcG9uZW50LCByZXNvbHZlRmlsdGVyLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLCBzZXRCbG9ja1RyYWNraW5nLCBzZXREZXZ0b29sc0hvb2ssIHNldFRyYW5zaXRpb25Ib29rcywgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHRvSGFuZGxlcnMsIHRyYW5zZm9ybVZOb2RlQXJncywgdXNlQ29udGV4dCwgdXNlU1NSQ29udGV4dCwgdXNlVHJhbnNpdGlvblN0YXRlLCB2ZXJzaW9uLCB3YXJuLCB3YXRjaCwgd2F0Y2hFZmZlY3QsIHdpdGhDdHgsIHdpdGhEaXJlY3RpdmVzLCB3aXRoU2NvcGVJZCB9O1xuIiwiaW1wb3J0IHsgY2FtZWxpemUsIHdhcm4sIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLCBnZXRDdXJyZW50SW5zdGFuY2UsIG9uTW91bnRlZCwgd2F0Y2hFZmZlY3QsIG9uVXBkYXRlZCwgRnJhZ21lbnQsIGgsIEJhc2VUcmFuc2l0aW9uLCB1c2VUcmFuc2l0aW9uU3RhdGUsIHRvUmF3LCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIHNldFRyYW5zaXRpb25Ib29rcywgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgY3JlYXRlVk5vZGUsIGNyZWF0ZVJlbmRlcmVyLCBpc1J1bnRpbWVPbmx5LCBjcmVhdGVIeWRyYXRpb25SZW5kZXJlciB9IGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGlzU3RyaW5nLCBpc0FycmF5LCBoeXBoZW5hdGUsIGNhcGl0YWxpemUsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc09uLCBpc01vZGVsTGlzdGVuZXIsIGlzRnVuY3Rpb24sIEVNUFRZX09CSiwgZXh0ZW5kLCBpc09iamVjdCwgdG9OdW1iZXIsIGludm9rZUFycmF5Rm5zLCBsb29zZUluZGV4T2YsIGlzU2V0LCBsb29zZUVxdWFsLCBpc0hUTUxUYWcsIGlzU1ZHVGFnIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5jb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XHJcbmNvbnN0IGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiBudWxsKTtcclxubGV0IHRlbXBDb250YWluZXI7XHJcbmxldCB0ZW1wU1ZHQ29udGFpbmVyO1xyXG5jb25zdCBub2RlT3BzID0ge1xyXG4gICAgaW5zZXJ0OiAoY2hpbGQsIHBhcmVudCwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogY2hpbGQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVFbGVtZW50OiAodGFnLCBpc1NWRywgaXMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBpc1NWR1xyXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcclxuICAgICAgICAgICAgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIGlzID8geyBpcyB9IDogdW5kZWZpbmVkKTtcclxuICAgICAgICBpZiAodGFnID09PSAnc2VsZWN0JyAmJiBwcm9wcyAmJiBwcm9wcy5tdWx0aXBsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCBwcm9wcy5tdWx0aXBsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH0sXHJcbiAgICBjcmVhdGVUZXh0OiB0ZXh0ID0+IGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSxcclxuICAgIGNyZWF0ZUNvbW1lbnQ6IHRleHQgPT4gZG9jLmNyZWF0ZUNvbW1lbnQodGV4dCksXHJcbiAgICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xyXG4gICAgICAgIG5vZGUubm9kZVZhbHVlID0gdGV4dDtcclxuICAgIH0sXHJcbiAgICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XHJcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgfSxcclxuICAgIHBhcmVudE5vZGU6IG5vZGUgPT4gbm9kZS5wYXJlbnROb2RlLFxyXG4gICAgbmV4dFNpYmxpbmc6IG5vZGUgPT4gbm9kZS5uZXh0U2libGluZyxcclxuICAgIHF1ZXJ5U2VsZWN0b3I6IHNlbGVjdG9yID0+IGRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcclxuICAgIHNldFNjb3BlSWQoZWwsIGlkKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGlkLCAnJyk7XHJcbiAgICB9LFxyXG4gICAgY2xvbmVOb2RlKGVsKSB7XHJcbiAgICAgICAgY29uc3QgY2xvbmVkID0gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIC8vICMzMDcyXHJcbiAgICAgICAgLy8gLSBpbiBgcGF0Y2hET01Qcm9wYCwgd2Ugc3RvcmUgdGhlIGFjdHVhbCB2YWx1ZSBpbiB0aGUgYGVsLl92YWx1ZWAgcHJvcGVydHkuXHJcbiAgICAgICAgLy8gLSBub3JtYWxseSwgZWxlbWVudHMgdXNpbmcgYDp2YWx1ZWAgYmluZGluZ3Mgd2lsbCBub3QgYmUgaG9pc3RlZCwgYnV0IGlmXHJcbiAgICAgICAgLy8gICB0aGUgYm91bmQgdmFsdWUgaXMgYSBjb25zdGFudCwgZS5nLiBgOnZhbHVlPVwidHJ1ZVwiYCAtIHRoZXkgZG8gZ2V0XHJcbiAgICAgICAgLy8gICBob2lzdGVkLlxyXG4gICAgICAgIC8vIC0gaW4gcHJvZHVjdGlvbiwgaG9pc3RlZCBub2RlcyBhcmUgY2xvbmVkIHdoZW4gc3Vic2VxdWVudCBpbnNlcnRzLCBidXRcclxuICAgICAgICAvLyAgIGNsb25lTm9kZSgpIGRvZXMgbm90IGNvcHkgdGhlIGN1c3RvbSBwcm9wZXJ0eSB3ZSBhdHRhY2hlZC5cclxuICAgICAgICAvLyAtIFRoaXMgbWF5IG5lZWQgdG8gYWNjb3VudCBmb3Igb3RoZXIgY3VzdG9tIERPTSBwcm9wZXJ0aWVzIHdlIGF0dGFjaCB0b1xyXG4gICAgICAgIC8vICAgZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gYF92YWx1ZWAgaW4gdGhlIGZ1dHVyZS5cclxuICAgICAgICBpZiAoYF92YWx1ZWAgaW4gZWwpIHtcclxuICAgICAgICAgICAgY2xvbmVkLl92YWx1ZSA9IGVsLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcclxuICAgIH0sXHJcbiAgICAvLyBfX1VOU0FGRV9fXHJcbiAgICAvLyBSZWFzb246IGlubmVySFRNTC5cclxuICAgIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cclxuICAgIC8vIEFzIGxvbmcgYXMgdGhlIHVzZXIgb25seSB1c2VzIHRydXN0ZWQgdGVtcGxhdGVzLCB0aGlzIGlzIHNhZmUuXHJcbiAgICBpbnNlcnRTdGF0aWNDb250ZW50KGNvbnRlbnQsIHBhcmVudCwgYW5jaG9yLCBpc1NWRykge1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSBpc1NWR1xyXG4gICAgICAgICAgICA/IHRlbXBTVkdDb250YWluZXIgfHxcclxuICAgICAgICAgICAgICAgICh0ZW1wU1ZHQ29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgJ3N2ZycpKVxyXG4gICAgICAgICAgICA6IHRlbXBDb250YWluZXIgfHwgKHRlbXBDb250YWluZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xyXG4gICAgICAgIHRlbXAuaW5uZXJIVE1MID0gY29udGVudDtcclxuICAgICAgICBjb25zdCBmaXJzdCA9IHRlbXAuZmlyc3RDaGlsZDtcclxuICAgICAgICBsZXQgbm9kZSA9IGZpcnN0O1xyXG4gICAgICAgIGxldCBsYXN0ID0gbm9kZTtcclxuICAgICAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgICAgICBsYXN0ID0gbm9kZTtcclxuICAgICAgICAgICAgbm9kZU9wcy5pbnNlcnQobm9kZSwgcGFyZW50LCBhbmNob3IpO1xyXG4gICAgICAgICAgICBub2RlID0gdGVtcC5maXJzdENoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2ZpcnN0LCBsYXN0XTtcclxuICAgIH1cclxufTtcblxuLy8gY29tcGlsZXIgc2hvdWxkIG5vcm1hbGl6ZSBjbGFzcyArIDpjbGFzcyBiaW5kaW5ncyBvbiB0aGUgc2FtZSBlbGVtZW50XHJcbi8vIGludG8gYSBzaW5nbGUgYmluZGluZyBbJ3N0YXRpY0NsYXNzJywgZHluYW1pY11cclxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIHZhbHVlID0gJyc7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNTVkcpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gZGlyZWN0bHkgc2V0dGluZyBjbGFzc05hbWUgc2hvdWxkIGJlIGZhc3RlciB0aGFuIHNldEF0dHJpYnV0ZSBpbiB0aGVvcnlcclxuICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIGVsZW1lbnQgZHVyaW5nIGEgdHJhbnNpdGlvbiwgdGFrZSB0aGUgdGVtcG9yYXJ5IHRyYW5zaXRpb25cclxuICAgICAgICAvLyBjbGFzc2VzIGludG8gYWNjb3VudC5cclxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl92dGM7XHJcbiAgICAgICAgaWYgKHRyYW5zaXRpb25DbGFzc2VzKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlXHJcbiAgICAgICAgICAgICAgICA/IFt2YWx1ZSwgLi4udHJhbnNpdGlvbkNsYXNzZXNdXHJcbiAgICAgICAgICAgICAgICA6IFsuLi50cmFuc2l0aW9uQ2xhc3Nlc10pLmpvaW4oJyAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gcGF0Y2hTdHlsZShlbCwgcHJldiwgbmV4dCkge1xyXG4gICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcclxuICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKG5leHQpKSB7XHJcbiAgICAgICAgaWYgKHByZXYgIT09IG5leHQpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgICAgIHN0eWxlLmNzc1RleHQgPSBuZXh0O1xyXG4gICAgICAgICAgICAvLyBpbmRpY2F0ZXMgdGhhdCB0aGUgYGRpc3BsYXlgIG9mIHRoZSBlbGVtZW50IGlzIGNvbnRyb2xsZWQgYnkgYHYtc2hvd2AsXHJcbiAgICAgICAgICAgIC8vIHNvIHdlIGFsd2F5cyBrZWVwIHRoZSBjdXJyZW50IGBkaXNwbGF5YCB2YWx1ZSByZWdhcmRsZXNzIG9mIHRoZSBgc3R5bGVgIHZhbHVlLFxyXG4gICAgICAgICAgICAvLyB0aHVzIGhhbmRpbmcgb3ZlciBjb250cm9sIHRvIGB2LXNob3dgLlxyXG4gICAgICAgICAgICBpZiAoJ192b2QnIGluIGVsKSB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZS5kaXNwbGF5ID0gY3VycmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcclxuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXYgJiYgIWlzU3RyaW5nKHByZXYpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0W2tleV0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xyXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgdmFsLmZvckVhY2godiA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b20gcHJvcGVydHkgZGVmaW5pdGlvblxyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcclxuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gIWltcG9ydGFudFxyXG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKHByZWZpeGVkKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XHJcbmNvbnN0IHByZWZpeENhY2hlID0ge307XHJcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcclxuICAgIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xyXG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gKHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZSk7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgbmFtZTtcclxuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IHByZWZpeGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF3TmFtZTtcclxufVxuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xyXG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSkge1xyXG4gICAgaWYgKGlzU1ZHICYmIGtleS5zdGFydHNXaXRoKCd4bGluazonKSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBub3RlIHdlIGFyZSBvbmx5IGNoZWNraW5nIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0IGRvbid0IGhhdmUgYVxyXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgZG9tIHByb3Agb2YgdGhlIHNhbWUgbmFtZSBoZXJlLlxyXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGlzQm9vbGVhbiAmJiB2YWx1ZSA9PT0gZmFsc2UpKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgaXNCb29sZWFuID8gJycgOiB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIF9fVU5TQUZFX19cclxuLy8gZnVuY3Rpb25zLiBUaGUgdXNlciBpcyByZXNwb25zaWJsZSBmb3IgdXNpbmcgdGhlbSB3aXRoIG9ubHkgdHJ1c3RlZCBjb250ZW50LlxyXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIFxyXG4vLyB0aGUgZm9sbG93aW5nIGFyZ3MgYXJlIHBhc3NlZCBvbmx5IGR1ZSB0byBwb3RlbnRpYWwgaW5uZXJIVE1ML3RleHRDb250ZW50XHJcbi8vIG92ZXJyaWRpbmcgZXhpc3RpbmcgVk5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZSBvbGQgdHJlZSBtdXN0IGJlIHByb3Blcmx5XHJcbi8vIHVubW91bnRlZC5cclxucHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pIHtcclxuICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnIHx8IGtleSA9PT0gJ3RleHRDb250ZW50Jykge1xyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcclxuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxyXG4gICAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQuXHJcbiAgICAgICAgZWwuX3ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09IG51bGwpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGVsW2tleV07XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJyAmJiB0eXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgLy8gZS5nLiA8c2VsZWN0IG11bHRpcGxlPiBjb21waWxlcyB0byB7IG11bHRpcGxlOiAnJyB9XHJcbiAgICAgICAgICAgIGVsW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09IG51bGwgJiYgdHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgLy8gZS5nLiA8ZGl2IDppZD1cIm51bGxcIj5cclxuICAgICAgICAgICAgZWxba2V5XSA9ICcnO1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAvLyBlLmcuIDxpbWcgOndpZHRoPVwibnVsbFwiPlxyXG4gICAgICAgICAgICBlbFtrZXldID0gMDtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBzb21lIHByb3BlcnRpZXMgcGVyZm9ybSB2YWx1ZSB2YWxpZGF0aW9uIGFuZCB0aHJvd1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBlbFtrZXldID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKX0+OiBgICtcclxuICAgICAgICAgICAgICAgIGB2YWx1ZSAke3ZhbHVlfSBpcyBpbnZhbGlkLmAsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxyXG5sZXQgX2dldE5vdyA9IERhdGUubm93O1xyXG5sZXQgc2tpcFRpbWVzdGFtcENoZWNrID0gZmFsc2U7XHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcclxuICAgIC8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXHJcbiAgICAvLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcclxuICAgIC8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cclxuICAgIGlmIChfZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApIHtcclxuICAgICAgICAvLyBpZiB0aGUgbG93LXJlcyB0aW1lc3RhbXAgd2hpY2ggaXMgYmlnZ2VyIHRoYW4gdGhlIGV2ZW50IHRpbWVzdGFtcFxyXG4gICAgICAgIC8vICh3aGljaCBpcyBldmFsdWF0ZWQgQUZURVIpIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXHJcbiAgICAgICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXJzIGFzIHdlbGwuXHJcbiAgICAgICAgX2dldE5vdyA9ICgpID0+IHBlcmZvcm1hbmNlLm5vdygpO1xyXG4gICAgfVxyXG4gICAgLy8gIzM0ODU6IEZpcmVmb3ggPD0gNTMgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25cclxuICAgIC8vIGFuZCBkb2VzIG5vdCBmaXJlIG1pY3JvdGFza3MgaW4gYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbiwgc28gc2FmZSB0byBleGNsdWRlLlxyXG4gICAgY29uc3QgZmZNYXRjaCA9IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7XHJcbiAgICBza2lwVGltZXN0YW1wQ2hlY2sgPSAhIShmZk1hdGNoICYmIE51bWJlcihmZk1hdGNoWzFdKSA8PSA1Myk7XHJcbn1cclxuLy8gVG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHJlcGVhdGVkbHkgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSwgd2UgY2FjaGVcclxuLy8gYW5kIHVzZSB0aGUgc2FtZSB0aW1lc3RhbXAgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnMgYXR0YWNoZWQgaW4gdGhlIHNhbWUgdGljay5cclxubGV0IGNhY2hlZE5vdyA9IDA7XHJcbmNvbnN0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuY29uc3QgcmVzZXQgPSAoKSA9PiB7XHJcbiAgICBjYWNoZWROb3cgPSAwO1xyXG59O1xyXG5jb25zdCBnZXROb3cgPSAoKSA9PiBjYWNoZWROb3cgfHwgKHAudGhlbihyZXNldCksIChjYWNoZWROb3cgPSBfZ2V0Tm93KCkpKTtcclxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XHJcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XHJcbiAgICAvLyB2ZWkgPSB2dWUgZXZlbnQgaW52b2tlcnNcclxuICAgIGNvbnN0IGludm9rZXJzID0gZWwuX3ZlaSB8fCAoZWwuX3ZlaSA9IHt9KTtcclxuICAgIGNvbnN0IGV4aXN0aW5nSW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdO1xyXG4gICAgaWYgKG5leHRWYWx1ZSAmJiBleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAvLyBwYXRjaFxyXG4gICAgICAgIGV4aXN0aW5nSW52b2tlci52YWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcclxuICAgICAgICBpZiAobmV4dFZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZFxyXG4gICAgICAgICAgICBjb25zdCBpbnZva2VyID0gKGludm9rZXJzW3Jhd05hbWVdID0gY3JlYXRlSW52b2tlcihuZXh0VmFsdWUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGludm9rZXJzW3Jhd05hbWVdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcclxuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcclxuICAgIGxldCBvcHRpb25zO1xyXG4gICAgaWYgKG9wdGlvbnNNb2RpZmllclJFLnRlc3QobmFtZSkpIHtcclxuICAgICAgICBvcHRpb25zID0ge307XHJcbiAgICAgICAgbGV0IG07XHJcbiAgICAgICAgd2hpbGUgKChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBvcHRpb25zW21bMF0udG9Mb3dlckNhc2UoKV0gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbaHlwaGVuYXRlKG5hbWUuc2xpY2UoMikpLCBvcHRpb25zXTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbnZva2VyKGluaXRpYWxWYWx1ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xyXG4gICAgICAgIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxyXG4gICAgICAgIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcclxuICAgICAgICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXHJcbiAgICAgICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxyXG4gICAgICAgIGNvbnN0IHRpbWVTdGFtcCA9IGUudGltZVN0YW1wIHx8IF9nZXROb3coKTtcclxuICAgICAgICBpZiAoc2tpcFRpbWVzdGFtcENoZWNrIHx8IHRpbWVTdGFtcCA+PSBpbnZva2VyLmF0dGFjaGVkIC0gMSkge1xyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCBpbnZva2VyLnZhbHVlKSwgaW5zdGFuY2UsIDUgLyogTkFUSVZFX0VWRU5UX0hBTkRMRVIgKi8sIFtlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGludm9rZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XHJcbiAgICBpbnZva2VyLmF0dGFjaGVkID0gZ2V0Tm93KCk7XHJcbiAgICByZXR1cm4gaW52b2tlcjtcclxufVxyXG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xyXG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxTdG9wID0gZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247XHJcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RvcC5jYWxsKGUpO1xyXG4gICAgICAgICAgICBlLl9zdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZm4gPT4gKGUpID0+ICFlLl9zdG9wcGVkICYmIGZuKGUpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxuXG5jb25zdCBuYXRpdmVPblJFID0gL15vblthLXpdLztcclxuY29uc3QgZm9yY2VQYXRjaFByb3AgPSAoXywga2V5KSA9PiBrZXkgPT09ICd2YWx1ZSc7XHJcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaXNTVkcgPSBmYWxzZSwgcHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pID0+IHtcclxuICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgLy8gc3BlY2lhbFxyXG4gICAgICAgIGNhc2UgJ2NsYXNzJzpcclxuICAgICAgICAgICAgcGF0Y2hDbGFzcyhlbCwgbmV4dFZhbHVlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3N0eWxlJzpcclxuICAgICAgICAgICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBsaXN0ZW5lcnNcclxuICAgICAgICAgICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEV2ZW50KGVsLCBrZXksIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBwYXJlbnRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNob3VsZFNldEFzUHJvcChlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2hET01Qcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgcHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciA8aW5wdXQgdi1tb2RlbCB0eXBlPVwiY2hlY2tib3hcIj4gd2l0aFxyXG4gICAgICAgICAgICAgICAgLy8gOnRydWUtdmFsdWUgJiA6ZmFsc2UtdmFsdWVcclxuICAgICAgICAgICAgICAgIC8vIHN0b3JlIHZhbHVlIGFzIGRvbSBwcm9wZXJ0aWVzIHNpbmNlIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmVcclxuICAgICAgICAgICAgICAgIC8vIHN0cmluZ2lmaWVkLlxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3RydWUtdmFsdWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuX3RydWVWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZhbHNlLXZhbHVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLl9mYWxzZVZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICBpZiAoaXNTVkcpIHtcclxuICAgICAgICAvLyBtb3N0IGtleXMgbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlIG9uIHN2ZyBlbGVtZW50cyB0byB3b3JrXHJcbiAgICAgICAgLy8gLi4uZXhjZXB0IGlubmVySFRNTFxyXG4gICAgICAgIGlmIChrZXkgPT09ICdpbm5lckhUTUwnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvciBuYXRpdmUgb25jbGljayB3aXRoIGZ1bmN0aW9uIHZhbHVlc1xyXG4gICAgICAgIGlmIChrZXkgaW4gZWwgJiYgbmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIHNwZWxsY2hlY2sgYW5kIGRyYWdnYWJsZSBhcmUgbnVtZXJhdGVkIGF0dHJzLCBob3dldmVyIHRoZWlyXHJcbiAgICAvLyBjb3JyZXNwb25kaW5nIERPTSBwcm9wZXJ0aWVzIGFyZSBhY3R1YWxseSBib29sZWFucyAtIHRoaXMgbGVhZHMgdG9cclxuICAgIC8vIHNldHRpbmcgaXQgd2l0aCBhIHN0cmluZyBcImZhbHNlXCIgdmFsdWUgbGVhZGluZyBpdCB0byBiZSBjb2VyY2VkIHRvXHJcbiAgICAvLyBgdHJ1ZWAsIHNvIHdlIG5lZWQgdG8gYWx3YXlzIHRyZWF0IHRoZW0gYXMgYXR0cmlidXRlcy5cclxuICAgIC8vIE5vdGUgdGhhdCBgY29udGVudEVkaXRhYmxlYCBkb2Vzbid0IGhhdmUgdGhpcyBwcm9ibGVtOiBpdHMgRE9NXHJcbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIGVudW1lcmF0ZWQgc3RyaW5nIHZhbHVlcy5cclxuICAgIGlmIChrZXkgPT09ICdzcGVsbGNoZWNrJyB8fCBrZXkgPT09ICdkcmFnZ2FibGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gIzE3ODcsICMyODQwIGZvcm0gcHJvcGVydHkgb24gZm9ybSBlbGVtZW50cyBpcyByZWFkb25seSBhbmQgbXVzdCBiZSBzZXQgYXNcclxuICAgIC8vIGF0dHJpYnV0ZS5cclxuICAgIGlmIChrZXkgPT09ICdmb3JtJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNTI2IDxpbnB1dCBsaXN0PiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gIzI3NjYgPHRleHRhcmVhIHR5cGU+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxyXG4gICAgaWYgKGtleSA9PT0gJ3R5cGUnICYmIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBuYXRpdmUgb25jbGljayB3aXRoIHN0cmluZyB2YWx1ZSwgbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlXHJcbiAgICBpZiAobmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleSBpbiBlbDtcclxufVxuXG5mdW5jdGlvbiB1c2VDc3NNb2R1bGUobmFtZSA9ICckc3R5bGUnKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgdXNlQ3NzTW9kdWxlIG11c3QgYmUgY2FsbGVkIGluc2lkZSBzZXR1cCgpYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBpbnN0YW5jZS50eXBlLl9fY3NzTW9kdWxlcztcclxuICAgICAgICBpZiAoIW1vZHVsZXMpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlcyBpbmplY3RlZC5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbW9kID0gbW9kdWxlc1tuYW1lXTtcclxuICAgICAgICBpZiAoIW1vZCkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlIG5hbWVkIFwiJHtuYW1lfVwiLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgU0ZDJ3MgQ1NTIHZhcmlhYmxlIGluamVjdGlvbiBmZWF0dXJlLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIpIHtcclxuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKGB1c2VDc3NWYXJzIGlzIGNhbGxlZCB3aXRob3V0IGN1cnJlbnQgYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZS5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBzZXRWYXJzID0gKCkgPT4gc2V0VmFyc09uVk5vZGUoaW5zdGFuY2Uuc3ViVHJlZSwgZ2V0dGVyKGluc3RhbmNlLnByb3h5KSk7XHJcbiAgICBvbk1vdW50ZWQoKCkgPT4gd2F0Y2hFZmZlY3Qoc2V0VmFycywgeyBmbHVzaDogJ3Bvc3QnIH0pKTtcclxuICAgIG9uVXBkYXRlZChzZXRWYXJzKTtcclxufVxyXG5mdW5jdGlvbiBzZXRWYXJzT25WTm9kZSh2bm9kZSwgdmFycykge1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIGNvbnN0IHN1c3BlbnNlID0gdm5vZGUuc3VzcGVuc2U7XHJcbiAgICAgICAgdm5vZGUgPSBzdXNwZW5zZS5hY3RpdmVCcmFuY2g7XHJcbiAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgIXN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRWYXJzT25WTm9kZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIHZhcnMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmlsbCBkb3duIEhPQ3MgdW50aWwgaXQncyBhIG5vbi1jb21wb25lbnQgdm5vZGVcclxuICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudC5zdWJUcmVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiB2bm9kZS5lbCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gdm5vZGUuZWwuc3R5bGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaChjID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMpKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xyXG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcclxuLy8gRE9NIFRyYW5zaXRpb24gaXMgYSBoaWdoZXItb3JkZXItY29tcG9uZW50IGJhc2VkIG9uIHRoZSBwbGF0Zm9ybS1hZ25vc3RpY1xyXG4vLyBiYXNlIFRyYW5zaXRpb24gY29tcG9uZW50LCB3aXRoIERPTS1zcGVjaWZpYyBsb2dpYy5cclxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xyXG5UcmFuc2l0aW9uLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb24nO1xyXG5jb25zdCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgY3NzOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcclxuICAgIGVudGVyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhckZyb21DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0gKFRyYW5zaXRpb24ucHJvcHMgPSAvKiNfX1BVUkVfXyovIGV4dGVuZCh7fSwgQmFzZVRyYW5zaXRpb24ucHJvcHMsIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKTtcclxuLyoqXHJcbiAqICMzMjI3IEluY29taW5nIGhvb2tzIG1heSBiZSBtZXJnZWQgaW50byBhcnJheXMgd2hlbiB3cmFwcGluZyBUcmFuc2l0aW9uXHJcbiAqIHdpdGggY3VzdG9tIEhPQ3MuXHJcbiAqL1xyXG5jb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzID0gW10pID0+IHtcclxuICAgIGlmIChpc0FycmF5KGhvb2spKSB7XHJcbiAgICAgICAgaG9vay5mb3JFYWNoKGggPT4gaCguLi5hcmdzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChob29rKSB7XHJcbiAgICAgICAgaG9vayguLi5hcmdzKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgaG9vayBleHBlY3RzIGEgY2FsbGJhY2sgKDJuZCBhcmcpLCB3aGljaCBtZWFucyB0aGUgdXNlclxyXG4gKiBpbnRlbmRzIHRvIGV4cGxpY2l0bHkgY29udHJvbCB0aGUgZW5kIG9mIHRoZSB0cmFuc2l0aW9uLlxyXG4gKi9cclxuY29uc3QgaGFzRXhwbGljaXRDYWxsYmFjayA9IChob29rKSA9PiB7XHJcbiAgICByZXR1cm4gaG9va1xyXG4gICAgICAgID8gaXNBcnJheShob29rKVxyXG4gICAgICAgICAgICA/IGhvb2suc29tZShoID0+IGgubGVuZ3RoID4gMSlcclxuICAgICAgICAgICAgOiBob29rLmxlbmd0aCA+IDFcclxuICAgICAgICA6IGZhbHNlO1xyXG59O1xyXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKSB7XHJcbiAgICBjb25zdCBiYXNlUHJvcHMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XHJcbiAgICAgICAgICAgIGJhc2VQcm9wc1trZXldID0gcmF3UHJvcHNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocmF3UHJvcHMuY3NzID09PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBiYXNlUHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG5hbWUgPSAndicsIHR5cGUsIGR1cmF0aW9uLCBlbnRlckZyb21DbGFzcyA9IGAke25hbWV9LWVudGVyLWZyb21gLCBlbnRlckFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tZW50ZXItYWN0aXZlYCwgZW50ZXJUb0NsYXNzID0gYCR7bmFtZX0tZW50ZXItdG9gLCBhcHBlYXJGcm9tQ2xhc3MgPSBlbnRlckZyb21DbGFzcywgYXBwZWFyQWN0aXZlQ2xhc3MgPSBlbnRlckFjdGl2ZUNsYXNzLCBhcHBlYXJUb0NsYXNzID0gZW50ZXJUb0NsYXNzLCBsZWF2ZUZyb21DbGFzcyA9IGAke25hbWV9LWxlYXZlLWZyb21gLCBsZWF2ZUFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtYWN0aXZlYCwgbGVhdmVUb0NsYXNzID0gYCR7bmFtZX0tbGVhdmUtdG9gIH0gPSByYXdQcm9wcztcclxuICAgIGNvbnN0IGR1cmF0aW9ucyA9IG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKTtcclxuICAgIGNvbnN0IGVudGVyRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzBdO1xyXG4gICAgY29uc3QgbGVhdmVEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMV07XHJcbiAgICBjb25zdCB7IG9uQmVmb3JlRW50ZXIsIG9uRW50ZXIsIG9uRW50ZXJDYW5jZWxsZWQsIG9uTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyID0gb25CZWZvcmVFbnRlciwgb25BcHBlYXIgPSBvbkVudGVyLCBvbkFwcGVhckNhbmNlbGxlZCA9IG9uRW50ZXJDYW5jZWxsZWQgfSA9IGJhc2VQcm9wcztcclxuICAgIGNvbnN0IGZpbmlzaEVudGVyID0gKGVsLCBpc0FwcGVhciwgZG9uZSkgPT4ge1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBkb25lICYmIGRvbmUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xyXG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIGRvbmUgJiYgZG9uZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG1ha2VFbnRlckhvb2sgPSAoaXNBcHBlYXIpID0+IHtcclxuICAgICAgICByZXR1cm4gKGVsLCBkb25lKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvb2sgPSBpc0FwcGVhciA/IG9uQXBwZWFyIDogb25FbnRlcjtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaEVudGVyKGVsLCBpc0FwcGVhciwgZG9uZSk7XHJcbiAgICAgICAgICAgIGNhbGxIb29rKGhvb2ssIFtlbCwgcmVzb2x2ZV0pO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckZyb21DbGFzcyA6IGVudGVyRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhob29rKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZChiYXNlUHJvcHMsIHtcclxuICAgICAgICBvbkJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlRW50ZXIsIFtlbF0pO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyKGVsKSB7XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlQXBwZWFyLCBbZWxdKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckFjdGl2ZUNsYXNzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRW50ZXI6IG1ha2VFbnRlckhvb2soZmFsc2UpLFxyXG4gICAgICAgIG9uQXBwZWFyOiBtYWtlRW50ZXJIb29rKHRydWUpLFxyXG4gICAgICAgIG9uTGVhdmUoZWwsIGRvbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaExlYXZlKGVsLCBkb25lKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgIC8vIGZvcmNlIHJlZmxvdyBzbyAqLWxlYXZlLWZyb20gY2xhc3NlcyBpbW1lZGlhdGVseSB0YWtlIGVmZmVjdCAoIzI1OTMpXHJcbiAgICAgICAgICAgIGZvcmNlUmVmbG93KCk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgICAgIG5leHRGcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcclxuICAgICAgICAgICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhvbkxlYXZlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlLCBbZWwsIHJlc29sdmVdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRW50ZXJDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgY2FsbEhvb2sob25FbnRlckNhbmNlbGxlZCwgW2VsXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFwcGVhckNhbmNlbGxlZChlbCkge1xyXG4gICAgICAgICAgICBmaW5pc2hFbnRlcihlbCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQXBwZWFyQ2FuY2VsbGVkLCBbZWxdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoTGVhdmUoZWwpO1xyXG4gICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbikge1xyXG4gICAgaWYgKGR1cmF0aW9uID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KGR1cmF0aW9uKSkge1xyXG4gICAgICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcclxuICAgICAgICByZXR1cm4gW24sIG5dO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIE51bWJlck9mKHZhbCkge1xyXG4gICAgY29uc3QgcmVzID0gdG9OdW1iZXIodmFsKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXHJcbiAgICAgICAgdmFsaWRhdGVEdXJhdGlvbihyZXMpO1xyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUR1cmF0aW9uKHZhbCkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWwgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIGAgK1xyXG4gICAgICAgICAgICBgZ290ICR7SlNPTi5zdHJpbmdpZnkodmFsKX0uYCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgd2FybihgPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uIGlzIE5hTiAtIGAgK1xyXG4gICAgICAgICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XHJcbiAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcclxuICAgIChlbC5fdnRjIHx8XHJcbiAgICAgICAgKGVsLl92dGMgPSBuZXcgU2V0KCkpKS5hZGQoY2xzKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xyXG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XHJcbiAgICBjb25zdCB7IF92dGMgfSA9IGVsO1xyXG4gICAgaWYgKF92dGMpIHtcclxuICAgICAgICBfdnRjLmRlbGV0ZShjbHMpO1xyXG4gICAgICAgIGlmICghX3Z0Yy5zaXplKSB7XHJcbiAgICAgICAgICAgIGVsLl92dGMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5leHRGcmFtZShjYikge1xyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xyXG4gICAgfSk7XHJcbn1cclxubGV0IGVuZElkID0gMDtcclxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGV4cGxpY2l0VGltZW91dCwgcmVzb2x2ZSkge1xyXG4gICAgY29uc3QgaWQgPSAoZWwuX2VuZElkID0gKytlbmRJZCk7XHJcbiAgICBjb25zdCByZXNvbHZlSWZOb3RTdGFsZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAoaWQgPT09IGVsLl9lbmRJZCkge1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGlmIChleHBsaWNpdFRpbWVvdXQpIHtcclxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlSWZOb3RTdGFsZSwgZXhwbGljaXRUaW1lb3V0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgdHlwZSwgdGltZW91dCwgcHJvcENvdW50IH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcclxuICAgIGlmICghdHlwZSkge1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBlbmRFdmVudCA9IHR5cGUgKyAnZW5kJztcclxuICAgIGxldCBlbmRlZCA9IDA7XHJcbiAgICBjb25zdCBlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xyXG4gICAgICAgIHJlc29sdmVJZk5vdFN0YWxlKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb25FbmQgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwgJiYgKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xyXG4gICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB0aW1lb3V0ICsgMSk7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSkge1xyXG4gICAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xyXG4gICAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xyXG4gICAgY29uc3QgZ2V0U3R5bGVQcm9wZXJ0aWVzID0gKGtleSkgPT4gKHN0eWxlc1trZXldIHx8ICcnKS5zcGxpdCgnLCAnKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEZWxheScpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhUUkFOU0lUSU9OICsgJ0R1cmF0aW9uJyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoQU5JTUFUSU9OICsgJ0RlbGF5Jyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoQU5JTUFUSU9OICsgJ0R1cmF0aW9uJyk7XHJcbiAgICBjb25zdCBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XHJcbiAgICBsZXQgdHlwZSA9IG51bGw7XHJcbiAgICBsZXQgdGltZW91dCA9IDA7XHJcbiAgICBsZXQgcHJvcENvdW50ID0gMDtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IFRSQU5TSVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcclxuICAgICAgICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcclxuICAgICAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcclxuICAgICAgICB0eXBlID1cclxuICAgICAgICAgICAgdGltZW91dCA+IDBcclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBUUkFOU0lUSU9OXHJcbiAgICAgICAgICAgICAgICAgICAgOiBBTklNQVRJT05cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBwcm9wQ291bnQgPSB0eXBlXHJcbiAgICAgICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXHJcbiAgICAgICAgICAgIDogMDtcclxuICAgIH1cclxuICAgIGNvbnN0IGhhc1RyYW5zZm9ybSA9IHR5cGUgPT09IFRSQU5TSVRJT04gJiZcclxuICAgICAgICAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvLnRlc3Qoc3R5bGVzW1RSQU5TSVRJT04gKyAnUHJvcGVydHknXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgdGltZW91dCxcclxuICAgICAgICBwcm9wQ291bnQsXHJcbiAgICAgICAgaGFzVHJhbnNmb3JtXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcclxuICAgIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLm1heCguLi5kdXJhdGlvbnMubWFwKChkLCBpKSA9PiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pKSk7XHJcbn1cclxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXJcclxuLy8gbnVtYmVycyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXHJcbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd25cclxuLy8gKGkuZS4gYWN0aW5nIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcclxuZnVuY3Rpb24gdG9NcyhzKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDA7XHJcbn1cclxuLy8gc3luY2hyb25vdXNseSBmb3JjZSBsYXlvdXQgdG8gcHV0IGVsZW1lbnRzIGludG8gYSBjZXJ0YWluIHN0YXRlXHJcbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xyXG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgbmV3UG9zaXRpb25NYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0ge1xyXG4gICAgbmFtZTogJ1RyYW5zaXRpb25Hcm91cCcsXHJcbiAgICBwcm9wczogLyojX19QVVJFX18qLyBleHRlbmQoe30sIFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsIHtcclxuICAgICAgICB0YWc6IFN0cmluZyxcclxuICAgICAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xyXG4gICAgfSksXHJcbiAgICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xyXG4gICAgICAgIGxldCBwcmV2Q2hpbGRyZW47XHJcbiAgICAgICAgbGV0IGNoaWxkcmVuO1xyXG4gICAgICAgIG9uVXBkYXRlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIGlzIGd1YXJhbnRlZWQgdG8gZXhpc3QgYWZ0ZXIgaW5pdGlhbCByZW5kZXJcclxuICAgICAgICAgICAgaWYgKCFwcmV2Q2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbW92ZUNsYXNzID0gcHJvcHMubW92ZUNsYXNzIHx8IGAke3Byb3BzLm5hbWUgfHwgJ3YnfS1tb3ZlYDtcclxuICAgICAgICAgICAgaWYgKCFoYXNDU1NUcmFuc2Zvcm0ocHJldkNoaWxkcmVuWzBdLmVsLCBpbnN0YW5jZS52bm9kZS5lbCwgbW92ZUNsYXNzKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xyXG4gICAgICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdmVkQ2hpbGRyZW4gPSBwcmV2Q2hpbGRyZW4uZmlsdGVyKGFwcGx5VHJhbnNsYXRpb24pO1xyXG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cclxuICAgICAgICAgICAgZm9yY2VSZWZsb3coKTtcclxuICAgICAgICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcclxuICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2IgPSAoZWwuX21vdmVDYiA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlIHx8IC90cmFuc2Zvcm0kLy50ZXN0KGUucHJvcGVydHlOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgY2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzc1RyYW5zaXRpb25Qcm9wcyA9IHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpO1xyXG4gICAgICAgICAgICBsZXQgdGFnID0gcmF3UHJvcHMudGFnIHx8IEZyYWdtZW50O1xyXG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ID8gZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKHNsb3RzLmRlZmF1bHQoKSkgOiBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhjaGlsZCwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHByZXZDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25NYXAuc2V0KGNoaWxkLCBjaGlsZC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHRhZywgbnVsbCwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IFRyYW5zaXRpb25Hcm91cCA9IFRyYW5zaXRpb25Hcm91cEltcGw7XHJcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcclxuICAgIGNvbnN0IGVsID0gYy5lbDtcclxuICAgIGlmIChlbC5fbW92ZUNiKSB7XHJcbiAgICAgICAgZWwuX21vdmVDYigpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVsLl9lbnRlckNiKSB7XHJcbiAgICAgICAgZWwuX2VudGVyQ2IoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbihjKSB7XHJcbiAgICBuZXdQb3NpdGlvbk1hcC5zZXQoYywgYy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbn1cclxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbihjKSB7XHJcbiAgICBjb25zdCBvbGRQb3MgPSBwb3NpdGlvbk1hcC5nZXQoYyk7XHJcbiAgICBjb25zdCBuZXdQb3MgPSBuZXdQb3NpdGlvbk1hcC5nZXQoYyk7XHJcbiAgICBjb25zdCBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XHJcbiAgICBjb25zdCBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xyXG4gICAgaWYgKGR4IHx8IGR5KSB7XHJcbiAgICAgICAgY29uc3QgcyA9IGMuZWwuc3R5bGU7XHJcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtkeH1weCwke2R5fXB4KWA7XHJcbiAgICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xyXG4gICAgICAgIHJldHVybiBjO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XHJcbiAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcclxuICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xyXG4gICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxyXG4gICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXHJcbiAgICAvLyBpcyBhcHBsaWVkLlxyXG4gICAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcclxuICAgIGlmIChlbC5fdnRjKSB7XHJcbiAgICAgICAgZWwuX3Z0Yy5mb3JFYWNoKGNscyA9PiB7XHJcbiAgICAgICAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgY29uc3QgY29udGFpbmVyID0gKHJvb3Qubm9kZVR5cGUgPT09IDFcclxuICAgICAgICA/IHJvb3RcclxuICAgICAgICA6IHJvb3QucGFyZW50Tm9kZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICByZXR1cm4gaGFzVHJhbnNmb3JtO1xyXG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcclxuICAgIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTtcclxuICAgIHJldHVybiBpc0FycmF5KGZuKSA/IHZhbHVlID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcclxufTtcclxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcclxuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCAnaW5wdXQnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCB0eXBlKSB7XHJcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcclxuICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xyXG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcclxufVxyXG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cclxuLy8gYmUgdHJlZS1zaGFrZW4gaW4gY2FzZSB2LW1vZGVsIGlzIG5ldmVyIHVzZWQuXHJcbmNvbnN0IHZNb2RlbFRleHQgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcic7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/ICdjaGFuZ2UnIDogJ2lucHV0JywgZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLnRhcmdldC5jb21wb3NpbmcpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGxldCBkb21WYWx1ZSA9IGVsLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICAgICAgZG9tVmFsdWUgPSBkb21WYWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2FzdFRvTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IHRvTnVtYmVyKGRvbVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGRvbVZhbHVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAodHJpbSkge1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZS50cmltKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWxhenkpIHtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxyXG4gICAgICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXHJcbiAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcclxuICAgICAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgLy8gc2V0IHZhbHVlIG9uIG1vdW50ZWQgc28gaXQncyBhZnRlciBtaW4vbWF4IGZvciB0eXBlPVwicmFuZ2VcIlxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgZWwudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICAvLyBhdm9pZCBjbGVhcmluZyB1bnJlc29sdmVkIHRleHQuICMyMzAyXHJcbiAgICAgICAgaWYgKGVsLmNvbXBvc2luZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCkge1xyXG4gICAgICAgICAgICBpZiAodHJpbSAmJiBlbC52YWx1ZS50cmltKCkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChudW1iZXIgfHwgZWwudHlwZSA9PT0gJ251bWJlcicpICYmIHRvTnVtYmVyKGVsLnZhbHVlKSA9PT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIGlmIChlbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xyXG4gICAgY3JlYXRlZChlbCwgXywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50VmFsdWUgPSBnZXRWYWx1ZShlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbC5jaGVja2VkO1xyXG4gICAgICAgICAgICBjb25zdCBhc3NpZ24gPSBlbC5fYXNzaWduO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShtb2RlbFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsb29zZUluZGV4T2YobW9kZWxWYWx1ZSwgZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQgJiYgIWZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKG1vZGVsVmFsdWUuY29uY2F0KGVsZW1lbnRWYWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWNoZWNrZWQgJiYgZm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFsuLi5tb2RlbFZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihmaWx0ZXJlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNTZXQobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IG5ldyBTZXQobW9kZWxWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5hZGQoZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsb25lZC5kZWxldGUoZWxlbWVudFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFzc2lnbihjbG9uZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIC8vIHNldCBpbml0aWFsIGNoZWNrZWQgb24gbW91bnQgdG8gd2FpdCBmb3IgdHJ1ZS12YWx1ZS9mYWxzZS12YWx1ZVxyXG4gICAgbW91bnRlZDogc2V0Q2hlY2tlZCxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICAgICAgc2V0Q2hlY2tlZChlbCwgYmluZGluZywgdm5vZGUpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRDaGVja2VkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcclxuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZ2V0Q2hlY2tib3hWYWx1ZShlbCwgdHJ1ZSkpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xyXG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZ2V0VmFsdWUoZWwpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHZNb2RlbFNlbGVjdCA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGNvbnN0IGlzU2V0TW9kZWwgPSBpc1NldCh2YWx1ZSk7XHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXHJcbiAgICAgICAgICAgICAgICAuY2FsbChlbC5vcHRpb25zLCAobykgPT4gby5zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIC5tYXAoKG8pID0+IG51bWJlciA/IHRvTnVtYmVyKGdldFZhbHVlKG8pKSA6IGdldFZhbHVlKG8pKTtcclxuICAgICAgICAgICAgZWwuX2Fzc2lnbihlbC5tdWx0aXBsZVxyXG4gICAgICAgICAgICAgICAgPyBpc1NldE1vZGVsXHJcbiAgICAgICAgICAgICAgICAgICAgPyBuZXcgU2V0KHNlbGVjdGVkVmFsKVxyXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxcclxuICAgICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWxbMF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgIH0sXHJcbiAgICAvLyBzZXQgdmFsdWUgaW4gbW91bnRlZCAmIHVwZGF0ZWQgYmVjYXVzZSA8c2VsZWN0PiByZWxpZXMgb24gaXRzIGNoaWxkcmVuXHJcbiAgICAvLyA8b3B0aW9uPnMuXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgX2JpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSkge1xyXG4gICAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xyXG4gICAgaWYgKGlzTXVsdGlwbGUgJiYgIWlzQXJyYXkodmFsdWUpICYmICFpc1NldCh2YWx1ZSkpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPiBleHBlY3RzIGFuIEFycmF5IG9yIFNldCB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGAgK1xyXG4gICAgICAgICAgICAgICAgYGJ1dCBnb3QgJHtPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKX0uYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xyXG4gICAgICAgIGlmIChpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpXHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzTXVsdGlwbGUgJiYgZWwuc2VsZWN0ZWRJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XHJcbiAgICB9XHJcbn1cclxuLy8gcmV0cmlldmUgcmF3IHZhbHVlIHNldCB2aWEgOnZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XHJcbiAgICByZXR1cm4gJ192YWx1ZScgaW4gZWwgPyBlbC5fdmFsdWUgOiBlbC52YWx1ZTtcclxufVxyXG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgZm9yIHRydWUtdmFsdWUgYW5kIGZhbHNlLXZhbHVlIHNldCB2aWEgOnRydWUtdmFsdWUgb3IgOmZhbHNlLXZhbHVlIGJpbmRpbmdzXHJcbmZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpIHtcclxuICAgIGNvbnN0IGtleSA9IGNoZWNrZWQgPyAnX3RydWVWYWx1ZScgOiAnX2ZhbHNlVmFsdWUnO1xyXG4gICAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xyXG59XHJcbmNvbnN0IHZNb2RlbER5bmFtaWMgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCAnY3JlYXRlZCcpO1xyXG4gICAgfSxcclxuICAgIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdtb3VudGVkJyk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgJ2JlZm9yZVVwZGF0ZScpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAndXBkYXRlZCcpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XHJcbiAgICBsZXQgbW9kZWxUb1VzZTtcclxuICAgIHN3aXRjaCAoZWwudGFnTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ1NFTEVDVCc6XHJcbiAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxTZWxlY3Q7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1RFWFRBUkVBJzpcclxuICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFRleHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHN3aXRjaCAodm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxDaGVja2JveDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsUmFkaW87XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxUZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XHJcbiAgICBmbiAmJiBmbihlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSk7XHJcbn1cblxuY29uc3Qgc3lzdGVtTW9kaWZpZXJzID0gWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ107XHJcbmNvbnN0IG1vZGlmaWVyR3VhcmRzID0ge1xyXG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgcHJldmVudDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXHJcbiAgICBzZWxmOiBlID0+IGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQsXHJcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXHJcbiAgICBzaGlmdDogZSA9PiAhZS5zaGlmdEtleSxcclxuICAgIGFsdDogZSA9PiAhZS5hbHRLZXksXHJcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXHJcbiAgICBsZWZ0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDAsXHJcbiAgICBtaWRkbGU6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcclxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXHJcbiAgICBleGFjdDogKGUsIG1vZGlmaWVycykgPT4gc3lzdGVtTW9kaWZpZXJzLnNvbWUobSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcclxufTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XHJcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcclxuICAgIH07XHJcbn07XHJcbi8vIEtlcHQgZm9yIDIueCBjb21wYXQuXHJcbi8vIE5vdGU6IElFMTEgY29tcGF0IGZvciBgc3BhY2ViYXJgIGFuZCBgZGVsYCBpcyByZW1vdmVkIGZvciBub3cuXHJcbmNvbnN0IGtleU5hbWVzID0ge1xyXG4gICAgZXNjOiAnZXNjYXBlJyxcclxuICAgIHNwYWNlOiAnICcsXHJcbiAgICB1cDogJ2Fycm93LXVwJyxcclxuICAgIGxlZnQ6ICdhcnJvdy1sZWZ0JyxcclxuICAgIHJpZ2h0OiAnYXJyb3ctcmlnaHQnLFxyXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxyXG4gICAgZGVsZXRlOiAnYmFja3NwYWNlJ1xyXG59O1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoISgna2V5JyBpbiBldmVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xyXG4gICAgICAgIGlmIChtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZuKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCB2U2hvdyA9IHtcclxuICAgIGJlZm9yZU1vdW50KGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZVVubW91bnQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiAnbm9uZSc7XHJcbn1cblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gZXh0ZW5kKHsgcGF0Y2hQcm9wLCBmb3JjZVBhdGNoUHJvcCB9LCBub2RlT3BzKTtcclxuLy8gbGF6eSBjcmVhdGUgdGhlIHJlbmRlcmVyIC0gdGhpcyBtYWtlcyBjb3JlIHJlbmRlcmVyIGxvZ2ljIHRyZWUtc2hha2FibGVcclxuLy8gaW4gY2FzZSB0aGUgdXNlciBvbmx5IGltcG9ydHMgcmVhY3Rpdml0eSB1dGlsaXRpZXMgZnJvbSBWdWUuXHJcbmxldCByZW5kZXJlcjtcclxubGV0IGVuYWJsZWRIeWRyYXRpb24gPSBmYWxzZTtcclxuZnVuY3Rpb24gZW5zdXJlUmVuZGVyZXIoKSB7XHJcbiAgICByZXR1cm4gcmVuZGVyZXIgfHwgKHJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKSk7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XHJcbiAgICByZW5kZXJlciA9IGVuYWJsZWRIeWRyYXRpb25cclxuICAgICAgICA/IHJlbmRlcmVyXHJcbiAgICAgICAgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xyXG4gICAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyZXI7XHJcbn1cclxuLy8gdXNlIGV4cGxpY2l0IHR5cGUgY2FzdHMgaGVyZSB0byBhdm9pZCBpbXBvcnQoKSBjYWxscyBpbiByb2xsZWQtdXAgZC50c1xyXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xyXG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XHJcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGFwcC5fY29tcG9uZW50O1xyXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgLy8gX19VTlNBRkVfX1xyXG4gICAgICAgICAgICAvLyBSZWFzb246IHBvdGVudGlhbCBleGVjdXRpb24gb2YgSlMgZXhwcmVzc2lvbnMgaW4gaW4tRE9NIHRlbXBsYXRlLlxyXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0aGUgaW4tRE9NIHRlbXBsYXRlIGlzIHRydXN0ZWQuIElmIGl0J3NcclxuICAgICAgICAgICAgLy8gcmVuZGVyZWQgYnkgdGhlIHNlcnZlciwgdGhlIHRlbXBsYXRlIHNob3VsZCBub3QgY29udGFpbiBhbnkgdXNlciBkYXRhLlxyXG4gICAgICAgICAgICBjb21wb25lbnQudGVtcGxhdGUgPSBjb250YWluZXIuaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjbGVhciBjb250ZW50IGJlZm9yZSBtb3VudGluZ1xyXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ3YtY2xvYWsnKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3h5O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XHJcbiAgICAgICAgaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcclxuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSwgY29udGFpbmVyIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcclxuICAgIC8vIEluamVjdCBgaXNOYXRpdmVUYWdgXHJcbiAgICAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbXBvbmVudCBuYW1lIHZhbGlkYXRpb24gKGRldiBvbmx5KVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcclxuICAgICAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG59XHJcbi8vIGRldiBvbmx5XHJcbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xyXG4gICAgaWYgKGlzUnVudGltZU9ubHkoKSkge1xyXG4gICAgICAgIGNvbnN0IGlzQ3VzdG9tRWxlbWVudCA9IGFwcC5jb25maWcuaXNDdXN0b21FbGVtZW50O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNDdXN0b21FbGVtZW50Jywge1xyXG4gICAgICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDdXN0b21FbGVtZW50O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBUaGUgXFxgaXNDdXN0b21FbGVtZW50XFxgIGNvbmZpZyBvcHRpb24gaXMgZGVwcmVjYXRlZC4gVXNlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcclxuICAgICAgICBjb25zdCBtc2cgPSBgVGhlIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBjb25maWcgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgYCArXHJcbiAgICAgICAgICAgIGBhIGJ1aWxkIG9mIFZ1ZS5qcyB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyIChha2EgXCJmdWxsIGJ1aWxkXCIpLiBgICtcclxuICAgICAgICAgICAgYFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIGAgK1xyXG4gICAgICAgICAgICBgbXVzdCBiZSBwYXNzZWQgdG8gXFxgQHZ1ZS9jb21waWxlci1kb21cXGAgaW4gdGhlIGJ1aWxkIHNldHVwIGluc3RlYWQuXFxuYCArXHJcbiAgICAgICAgICAgIGAtIEZvciB2dWUtbG9hZGVyOiBwYXNzIGl0IHZpYSB2dWUtbG9hZGVyJ3MgXFxgY29tcGlsZXJPcHRpb25zXFxgIGxvYWRlciBvcHRpb24uXFxuYCArXHJcbiAgICAgICAgICAgIGAtIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxcbmAgK1xyXG4gICAgICAgICAgICBgLSBGb3Igdml0ZTogcGFzcyBpdCB2aWEgQHZpdGVqcy9wbHVnaW4tdnVlIG9wdGlvbnMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvdHJlZS9tYWluL3BhY2thZ2VzL3BsdWdpbi12dWUjZXhhbXBsZS1mb3ItcGFzc2luZy1vcHRpb25zLXRvLXZ1ZWNvbXBpbGVyLWRvbWA7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdjb21waWxlck9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIGdldCgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlck9wdGlvbnM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbW91bnQgYXBwOiBtb3VudCB0YXJnZXQgc2VsZWN0b3IgXCIke2NvbnRhaW5lcn1cIiByZXR1cm5lZCBudWxsLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIGNvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290ICYmXHJcbiAgICAgICAgY29udGFpbmVyLm1vZGUgPT09ICdjbG9zZWQnKSB7XHJcbiAgICAgICAgd2FybihgbW91bnRpbmcgb24gYSBTaGFkb3dSb290IHdpdGggXFxge21vZGU6IFwiY2xvc2VkXCJ9XFxgIG1heSBsZWFkIHRvIHVucHJlZGljdGFibGUgYnVnc2ApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxufVxuXG5leHBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAsIGNyZWF0ZUFwcCwgY3JlYXRlU1NSQXBwLCBoeWRyYXRlLCByZW5kZXIsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdk1vZGVsQ2hlY2tib3gsIHZNb2RlbER5bmFtaWMsIHZNb2RlbFJhZGlvLCB2TW9kZWxTZWxlY3QsIHZNb2RlbFRleHQsIHZTaG93LCB3aXRoS2V5cywgd2l0aE1vZGlmaWVycyB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiLyohXG4gICogdnVlLXJvdXRlciB2NC4wLjlcbiAgKiAoYykgMjAyMSBFZHVhcmRvIFNhbiBNYXJ0aW4gTW9yb3RlXG4gICogQGxpY2Vuc2UgTUlUXG4gICovXG5pbXBvcnQgeyBnZXRDdXJyZW50SW5zdGFuY2UsIGluamVjdCwgb25Vbm1vdW50ZWQsIG9uRGVhY3RpdmF0ZWQsIG9uQWN0aXZhdGVkLCBjb21wdXRlZCwgdW5yZWYsIGRlZmluZUNvbXBvbmVudCwgcmVhY3RpdmUsIHdhdGNoRWZmZWN0LCBoLCBwcm92aWRlLCByZWYsIHdhdGNoLCBzaGFsbG93UmVmLCBuZXh0VGljayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBzZXR1cERldnRvb2xzUGx1Z2luIH0gZnJvbSAnQHZ1ZS9kZXZ0b29scy1hcGknO1xuXG5jb25zdCBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBQb2x5U3ltYm9sID0gKG5hbWUpID0+IFxyXG4vLyB2ciA9IHZ1ZSByb3V0ZXJcclxuaGFzU3ltYm9sXHJcbiAgICA/IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnICsgbmFtZSA6IG5hbWUpXHJcbiAgICA6ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnW3Z1ZS1yb3V0ZXJdOiAnIDogJ192cl8nKSArIG5hbWU7XHJcbi8vIHJ2bG0gPSBSb3V0ZXIgVmlldyBMb2NhdGlvbiBNYXRjaGVkXHJcbi8qKlxyXG4gKiBSb3V0ZVJlY29yZCBiZWluZyByZW5kZXJlZCBieSB0aGUgY2xvc2VzdCBhbmNlc3RvciBSb3V0ZXIgVmlldy4gVXNlZCBmb3JcclxuICogYG9uQmVmb3JlUm91dGVVcGRhdGVgIGFuZCBgb25CZWZvcmVSb3V0ZUxlYXZlYC4gcnZsbSBzdGFuZHMgZm9yIFJvdXRlciBWaWV3XHJcbiAqIExvY2F0aW9uIE1hdGNoZWRcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBtYXRjaGVkUm91dGVLZXkgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ3JvdXRlciB2aWV3IGxvY2F0aW9uIG1hdGNoZWQnIDogJ3J2bG0nKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSByb3V0ZXIgdmlldyBkZXB0aCB0byBjb250cm9sIHdoaWNoIGNvbXBvbmVudCBpblxyXG4gKiBgbWF0Y2hlZGAgaXMgcmVuZGVyZWQuIHJ2ZCBzdGFuZHMgZm9yIFJvdXRlciBWaWV3IERlcHRoXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgdmlld0RlcHRoS2V5ID0gLyojX19QVVJFX18qLyBQb2x5U3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXIgdmlldyBkZXB0aCcgOiAncnZkJyk7XHJcbi8qKlxyXG4gKiBBbGxvd3Mgb3ZlcnJpZGluZyB0aGUgcm91dGVyIGluc3RhbmNlIHJldHVybmVkIGJ5IGB1c2VSb3V0ZXJgIGluIHRlc3RzLiByXHJcbiAqIHN0YW5kcyBmb3Igcm91dGVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgcm91dGVyS2V5ID0gLyojX19QVVJFX18qLyBQb2x5U3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXInIDogJ3InKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBjdXJyZW50IHJvdXRlIHJldHVybmVkIGJ5IGB1c2VSb3V0ZWAgaW4gdGVzdHMuIHJsXHJcbiAqIHN0YW5kcyBmb3Igcm91dGUgbG9jYXRpb25cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCByb3V0ZUxvY2F0aW9uS2V5ID0gLyojX19QVVJFX18qLyBQb2x5U3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZSBsb2NhdGlvbicgOiAncmwnKTtcclxuLyoqXHJcbiAqIEFsbG93cyBvdmVycmlkaW5nIHRoZSBjdXJyZW50IHJvdXRlIHVzZWQgYnkgcm91dGVyLXZpZXcuIEludGVybmFsbHkgdGhpcyBpc1xyXG4gKiB1c2VkIHdoZW4gdGhlIGByb3V0ZWAgcHJvcCBpcyBwYXNzZWQuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3Qgcm91dGVyVmlld0xvY2F0aW9uS2V5ID0gLyojX19QVVJFX18qLyBQb2x5U3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdyb3V0ZXIgdmlldyBsb2NhdGlvbicgOiAncnZsJyk7XG5cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBpc0VTTW9kdWxlKG9iaikge1xyXG4gICAgcmV0dXJuIG9iai5fX2VzTW9kdWxlIHx8IChoYXNTeW1ib2wgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKTtcclxufVxyXG5jb25zdCBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xyXG5mdW5jdGlvbiBhcHBseVRvUGFyYW1zKGZuLCBwYXJhbXMpIHtcclxuICAgIGNvbnN0IG5ld1BhcmFtcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gcGFyYW1zKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbXNba2V5XTtcclxuICAgICAgICBuZXdQYXJhbXNba2V5XSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKGZuKSA6IGZuKHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdQYXJhbXM7XHJcbn1cclxubGV0IG5vb3AgPSAoKSA9PiB7IH07XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XHJcbiAgICAvLyBhdm9pZCB1c2luZyAuLi5hcmdzIGFzIGl0IGJyZWFrcyBpbiBvbGRlciBFZGdlIGJ1aWxkc1xyXG4gICAgY29uc3QgYXJncyA9IEFycmF5LmZyb20oYXJndW1lbnRzKS5zbGljZSgxKTtcclxuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBbJ1tWdWUgUm91dGVyIHdhcm5dOiAnICsgbXNnXS5jb25jYXQoYXJncykpO1xyXG59XG5cbmNvbnN0IFRSQUlMSU5HX1NMQVNIX1JFID0gL1xcLyQvO1xyXG5jb25zdCByZW1vdmVUcmFpbGluZ1NsYXNoID0gKHBhdGgpID0+IHBhdGgucmVwbGFjZShUUkFJTElOR19TTEFTSF9SRSwgJycpO1xyXG4vKipcclxuICogVHJhbnNmb3JtcyBhbiBVUkkgaW50byBhIG5vcm1hbGl6ZWQgaGlzdG9yeSBsb2NhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gcGFyc2VRdWVyeVxyXG4gKiBAcGFyYW0gbG9jYXRpb24gLSBVUkkgdG8gbm9ybWFsaXplXHJcbiAqIEBwYXJhbSBjdXJyZW50TG9jYXRpb24gLSBjdXJyZW50IGFic29sdXRlIGxvY2F0aW9uLiBBbGxvd3MgcmVzb2x2aW5nIHJlbGF0aXZlXHJcbiAqIHBhdGhzLiBNdXN0IHN0YXJ0IHdpdGggYC9gLiBEZWZhdWx0cyB0byBgL2BcclxuICogQHJldHVybnMgYSBub3JtYWxpemVkIGhpc3RvcnkgbG9jYXRpb25cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlVVJMKHBhcnNlUXVlcnksIGxvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24gPSAnLycpIHtcclxuICAgIGxldCBwYXRoLCBxdWVyeSA9IHt9LCBzZWFyY2hTdHJpbmcgPSAnJywgaGFzaCA9ICcnO1xyXG4gICAgLy8gQ291bGQgdXNlIFVSTCBhbmQgVVJMU2VhcmNoUGFyYW1zIGJ1dCBJRSAxMSBkb2Vzbid0IHN1cHBvcnQgaXRcclxuICAgIGNvbnN0IHNlYXJjaFBvcyA9IGxvY2F0aW9uLmluZGV4T2YoJz8nKTtcclxuICAgIGNvbnN0IGhhc2hQb3MgPSBsb2NhdGlvbi5pbmRleE9mKCcjJywgc2VhcmNoUG9zID4gLTEgPyBzZWFyY2hQb3MgOiAwKTtcclxuICAgIGlmIChzZWFyY2hQb3MgPiAtMSkge1xyXG4gICAgICAgIHBhdGggPSBsb2NhdGlvbi5zbGljZSgwLCBzZWFyY2hQb3MpO1xyXG4gICAgICAgIHNlYXJjaFN0cmluZyA9IGxvY2F0aW9uLnNsaWNlKHNlYXJjaFBvcyArIDEsIGhhc2hQb3MgPiAtMSA/IGhhc2hQb3MgOiBsb2NhdGlvbi5sZW5ndGgpO1xyXG4gICAgICAgIHF1ZXJ5ID0gcGFyc2VRdWVyeShzZWFyY2hTdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGhhc2hQb3MgPiAtMSkge1xyXG4gICAgICAgIHBhdGggPSBwYXRoIHx8IGxvY2F0aW9uLnNsaWNlKDAsIGhhc2hQb3MpO1xyXG4gICAgICAgIC8vIGtlZXAgdGhlICMgY2hhcmFjdGVyXHJcbiAgICAgICAgaGFzaCA9IGxvY2F0aW9uLnNsaWNlKGhhc2hQb3MsIGxvY2F0aW9uLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICAvLyBubyBzZWFyY2ggYW5kIG5vIHF1ZXJ5XHJcbiAgICBwYXRoID0gcmVzb2x2ZVJlbGF0aXZlUGF0aChwYXRoICE9IG51bGwgPyBwYXRoIDogbG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAvLyBlbXB0eSBwYXRoIG1lYW5zIGEgcmVsYXRpdmUgcXVlcnkgb3IgaGFzaCBgP2Zvbz1mYCwgYCN0aGluZ2BcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZnVsbFBhdGg6IHBhdGggKyAoc2VhcmNoU3RyaW5nICYmICc/JykgKyBzZWFyY2hTdHJpbmcgKyBoYXNoLFxyXG4gICAgICAgIHBhdGgsXHJcbiAgICAgICAgcXVlcnksXHJcbiAgICAgICAgaGFzaCxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEgVVJMIG9iamVjdFxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5naWZ5UXVlcnlcclxuICogQHBhcmFtIGxvY2F0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnlVUkwoc3RyaW5naWZ5UXVlcnksIGxvY2F0aW9uKSB7XHJcbiAgICBsZXQgcXVlcnkgPSBsb2NhdGlvbi5xdWVyeSA/IHN0cmluZ2lmeVF1ZXJ5KGxvY2F0aW9uLnF1ZXJ5KSA6ICcnO1xyXG4gICAgcmV0dXJuIGxvY2F0aW9uLnBhdGggKyAocXVlcnkgJiYgJz8nKSArIHF1ZXJ5ICsgKGxvY2F0aW9uLmhhc2ggfHwgJycpO1xyXG59XHJcbi8qKlxyXG4gKiBTdHJpcHMgb2ZmIHRoZSBiYXNlIGZyb20gdGhlIGJlZ2lubmluZyBvZiBhIGxvY2F0aW9uLnBhdGhuYW1lIGluIGEgbm9uXHJcbiAqIGNhc2Utc2Vuc2l0aXZlIHdheS5cclxuICpcclxuICogQHBhcmFtIHBhdGhuYW1lIC0gbG9jYXRpb24ucGF0aG5hbWVcclxuICogQHBhcmFtIGJhc2UgLSBiYXNlIHRvIHN0cmlwIG9mZlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaXBCYXNlKHBhdGhuYW1lLCBiYXNlKSB7XHJcbiAgICAvLyBubyBiYXNlIG9yIGJhc2UgaXMgbm90IGZvdW5kIGF0IHRoZSBiZWdpbm5pbmdcclxuICAgIGlmICghYmFzZSB8fCAhcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2UudG9Mb3dlckNhc2UoKSkpXHJcbiAgICAgICAgcmV0dXJuIHBhdGhuYW1lO1xyXG4gICAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2UubGVuZ3RoKSB8fCAnLyc7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrcyBpZiB0d28gUm91dGVMb2NhdGlvbiBhcmUgZXF1YWwuIFRoaXMgbWVhbnMgdGhhdCBib3RoIGxvY2F0aW9ucyBhcmVcclxuICogcG9pbnRpbmcgdG93YXJkcyB0aGUgc2FtZSB7QGxpbmsgUm91dGVSZWNvcmR9IGFuZCB0aGF0IGFsbCBgcGFyYW1zYCwgYHF1ZXJ5YFxyXG4gKiBwYXJhbWV0ZXJzIGFuZCBgaGFzaGAgYXJlIHRoZSBzYW1lXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3Qge0BsaW5rIFJvdXRlTG9jYXRpb259XHJcbiAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBSb3V0ZUxvY2F0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvbihzdHJpbmdpZnlRdWVyeSwgYSwgYikge1xyXG4gICAgbGV0IGFMYXN0SW5kZXggPSBhLm1hdGNoZWQubGVuZ3RoIC0gMTtcclxuICAgIGxldCBiTGFzdEluZGV4ID0gYi5tYXRjaGVkLmxlbmd0aCAtIDE7XHJcbiAgICByZXR1cm4gKGFMYXN0SW5kZXggPiAtMSAmJlxyXG4gICAgICAgIGFMYXN0SW5kZXggPT09IGJMYXN0SW5kZXggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChhLm1hdGNoZWRbYUxhc3RJbmRleF0sIGIubWF0Y2hlZFtiTGFzdEluZGV4XSkgJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEucGFyYW1zLCBiLnBhcmFtcykgJiZcclxuICAgICAgICBzdHJpbmdpZnlRdWVyeShhLnF1ZXJ5KSA9PT0gc3RyaW5naWZ5UXVlcnkoYi5xdWVyeSkgJiZcclxuICAgICAgICBhLmhhc2ggPT09IGIuaGFzaCk7XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIHR3byBgUm91dGVSZWNvcmRzYCBhcmUgZXF1YWwuIFRha2VzIGludG8gYWNjb3VudCBhbGlhc2VzOiB0aGV5IGFyZVxyXG4gKiBjb25zaWRlcmVkIGVxdWFsIHRvIHRoZSBgUm91dGVSZWNvcmRgIHRoZXkgYXJlIGFsaWFzaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gYSAtIGZpcnN0IHtAbGluayBSb3V0ZVJlY29yZH1cclxuICogQHBhcmFtIGIgLSBzZWNvbmQge0BsaW5rIFJvdXRlUmVjb3JkfVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVSZWNvcmQoYSwgYikge1xyXG4gICAgLy8gc2luY2UgdGhlIG9yaWdpbmFsIHJlY29yZCBoYXMgYW4gdW5kZWZpbmVkIHZhbHVlIGZvciBhbGlhc09mXHJcbiAgICAvLyBidXQgYWxsIGFsaWFzZXMgcG9pbnQgdG8gdGhlIG9yaWdpbmFsIHJlY29yZCwgdGhpcyB3aWxsIGFsd2F5cyBjb21wYXJlXHJcbiAgICAvLyB0aGUgb3JpZ2luYWwgcmVjb3JkXHJcbiAgICByZXR1cm4gKGEuYWxpYXNPZiB8fCBhKSA9PT0gKGIuYWxpYXNPZiB8fCBiKTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGEsIGIpIHtcclxuICAgIGlmIChPYmplY3Qua2V5cyhhKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gYSkge1xyXG4gICAgICAgIGlmICghaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGFba2V5XSwgYltrZXldKSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lUm91dGVMb2NhdGlvblBhcmFtc1ZhbHVlKGEsIGIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpXHJcbiAgICAgICAgPyBpc0VxdWl2YWxlbnRBcnJheShhLCBiKVxyXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgICAgICA/IGlzRXF1aXZhbGVudEFycmF5KGIsIGEpXHJcbiAgICAgICAgICAgIDogYSA9PT0gYjtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdHdvIGFycmF5cyBhcmUgdGhlIHNhbWUgb3IgaWYgYW4gYXJyYXkgd2l0aCBvbmUgc2luZ2xlIGVudHJ5IGlzIHRoZVxyXG4gKiBzYW1lIGFzIGFub3RoZXIgcHJpbWl0aXZlIHZhbHVlLiBVc2VkIHRvIGNoZWNrIHF1ZXJ5IGFuZCBwYXJhbWV0ZXJzXHJcbiAqXHJcbiAqIEBwYXJhbSBhIC0gYXJyYXkgb2YgdmFsdWVzXHJcbiAqIEBwYXJhbSBiIC0gYXJyYXkgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIHZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiBpc0VxdWl2YWxlbnRBcnJheShhLCBiKSB7XHJcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKVxyXG4gICAgICAgID8gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoKHZhbHVlLCBpKSA9PiB2YWx1ZSA9PT0gYltpXSlcclxuICAgICAgICA6IGEubGVuZ3RoID09PSAxICYmIGFbMF0gPT09IGI7XHJcbn1cclxuLyoqXHJcbiAqIFJlc29sdmVzIGEgcmVsYXRpdmUgcGF0aCB0aGF0IHN0YXJ0cyB3aXRoIGAuYC5cclxuICpcclxuICogQHBhcmFtIHRvIC0gcGF0aCBsb2NhdGlvbiB3ZSBhcmUgcmVzb2x2aW5nXHJcbiAqIEBwYXJhbSBmcm9tIC0gY3VycmVudExvY2F0aW9uLnBhdGgsIHNob3VsZCBzdGFydCB3aXRoIGAvYFxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVJlbGF0aXZlUGF0aCh0bywgZnJvbSkge1xyXG4gICAgaWYgKHRvLnN0YXJ0c1dpdGgoJy8nKSlcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmcm9tLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgIHdhcm4oYENhbm5vdCByZXNvbHZlIGEgcmVsYXRpdmUgbG9jYXRpb24gd2l0aG91dCBhbiBhYnNvbHV0ZSBwYXRoLiBUcnlpbmcgdG8gcmVzb2x2ZSBcIiR7dG99XCIgZnJvbSBcIiR7ZnJvbX1cIi4gSXQgc2hvdWxkIGxvb2sgbGlrZSBcIi8ke2Zyb219XCIuYCk7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0bylcclxuICAgICAgICByZXR1cm4gZnJvbTtcclxuICAgIGNvbnN0IGZyb21TZWdtZW50cyA9IGZyb20uc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IHRvU2VnbWVudHMgPSB0by5zcGxpdCgnLycpO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gZnJvbVNlZ21lbnRzLmxlbmd0aCAtIDE7XHJcbiAgICBsZXQgdG9Qb3NpdGlvbjtcclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZm9yICh0b1Bvc2l0aW9uID0gMDsgdG9Qb3NpdGlvbiA8IHRvU2VnbWVudHMubGVuZ3RoOyB0b1Bvc2l0aW9uKyspIHtcclxuICAgICAgICBzZWdtZW50ID0gdG9TZWdtZW50c1t0b1Bvc2l0aW9uXTtcclxuICAgICAgICAvLyBjYW4ndCBnbyBiZWxvdyB6ZXJvXHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAxIHx8IHNlZ21lbnQgPT09ICcuJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgaWYgKHNlZ21lbnQgPT09ICcuLicpXHJcbiAgICAgICAgICAgIHBvc2l0aW9uLS07XHJcbiAgICAgICAgLy8gZm91bmQgc29tZXRoaW5nIHRoYXQgaXMgbm90IHJlbGF0aXZlIHBhdGhcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChmcm9tU2VnbWVudHMuc2xpY2UoMCwgcG9zaXRpb24pLmpvaW4oJy8nKSArXHJcbiAgICAgICAgJy8nICtcclxuICAgICAgICB0b1NlZ21lbnRzXHJcbiAgICAgICAgICAgIC5zbGljZSh0b1Bvc2l0aW9uIC0gKHRvUG9zaXRpb24gPT09IHRvU2VnbWVudHMubGVuZ3RoID8gMSA6IDApKVxyXG4gICAgICAgICAgICAuam9pbignLycpKTtcclxufVxuXG52YXIgTmF2aWdhdGlvblR5cGU7XHJcbihmdW5jdGlvbiAoTmF2aWdhdGlvblR5cGUpIHtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicG9wXCJdID0gXCJwb3BcIjtcclxuICAgIE5hdmlnYXRpb25UeXBlW1wicHVzaFwiXSA9IFwicHVzaFwiO1xyXG59KShOYXZpZ2F0aW9uVHlwZSB8fCAoTmF2aWdhdGlvblR5cGUgPSB7fSkpO1xyXG52YXIgTmF2aWdhdGlvbkRpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uRGlyZWN0aW9uKSB7XHJcbiAgICBOYXZpZ2F0aW9uRGlyZWN0aW9uW1wiYmFja1wiXSA9IFwiYmFja1wiO1xyXG4gICAgTmF2aWdhdGlvbkRpcmVjdGlvbltcImZvcndhcmRcIl0gPSBcImZvcndhcmRcIjtcclxuICAgIE5hdmlnYXRpb25EaXJlY3Rpb25bXCJ1bmtub3duXCJdID0gXCJcIjtcclxufSkoTmF2aWdhdGlvbkRpcmVjdGlvbiB8fCAoTmF2aWdhdGlvbkRpcmVjdGlvbiA9IHt9KSk7XHJcbi8qKlxyXG4gKiBTdGFydGluZyBsb2NhdGlvbiBmb3IgSGlzdG9yaWVzXHJcbiAqL1xyXG5jb25zdCBTVEFSVCA9ICcnO1xyXG4vLyBHZW5lcmljIHV0aWxzXHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGEgYmFzZSBieSByZW1vdmluZyBhbnkgdHJhaWxpbmcgc2xhc2ggYW5kIHJlYWRpbmcgdGhlIGJhc2UgdGFnIGlmXHJcbiAqIHByZXNlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBiYXNlIC0gYmFzZSB0byBub3JtYWxpemVcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2UoYmFzZSkge1xyXG4gICAgaWYgKCFiYXNlKSB7XHJcbiAgICAgICAgaWYgKGlzQnJvd3Nlcikge1xyXG4gICAgICAgICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcclxuICAgICAgICAgICAgY29uc3QgYmFzZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYmFzZScpO1xyXG4gICAgICAgICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcclxuICAgICAgICAgICAgLy8gc3RyaXAgZnVsbCBVUkwgb3JpZ2luXHJcbiAgICAgICAgICAgIGJhc2UgPSBiYXNlLnJlcGxhY2UoL15cXHcrOlxcL1xcL1teXFwvXSsvLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBiYXNlID0gJy8nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGVuc3VyZSBsZWFkaW5nIHNsYXNoIHdoZW4gaXQgd2FzIHJlbW92ZWQgYnkgdGhlIHJlZ2V4IGFib3ZlIGF2b2lkIGxlYWRpbmdcclxuICAgIC8vIHNsYXNoIHdpdGggaGFzaCBiZWNhdXNlIHRoZSBmaWxlIGNvdWxkIGJlIHJlYWQgZnJvbSB0aGUgZGlzayBsaWtlIGZpbGU6Ly9cclxuICAgIC8vIGFuZCB0aGUgbGVhZGluZyBzbGFzaCB3b3VsZCBjYXVzZSBwcm9ibGVtc1xyXG4gICAgaWYgKGJhc2VbMF0gIT09ICcvJyAmJiBiYXNlWzBdICE9PSAnIycpXHJcbiAgICAgICAgYmFzZSA9ICcvJyArIGJhc2U7XHJcbiAgICAvLyByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoIHNvIGFsbCBvdGhlciBtZXRob2QgY2FuIGp1c3QgZG8gYGJhc2UgKyBmdWxsUGF0aGBcclxuICAgIC8vIHRvIGJ1aWxkIGFuIGhyZWZcclxuICAgIHJldHVybiByZW1vdmVUcmFpbGluZ1NsYXNoKGJhc2UpO1xyXG59XHJcbi8vIHJlbW92ZSBhbnkgY2hhcmFjdGVyIGJlZm9yZSB0aGUgaGFzaFxyXG5jb25zdCBCRUZPUkVfSEFTSF9SRSA9IC9eW14jXSsjLztcclxuZnVuY3Rpb24gY3JlYXRlSHJlZihiYXNlLCBsb2NhdGlvbikge1xyXG4gICAgcmV0dXJuIGJhc2UucmVwbGFjZShCRUZPUkVfSEFTSF9SRSwgJyMnKSArIGxvY2F0aW9uO1xyXG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KSB7XHJcbiAgICBjb25zdCBkb2NSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgY29uc3QgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJlaGF2aW9yOiBvZmZzZXQuYmVoYXZpb3IsXHJcbiAgICAgICAgbGVmdDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSAob2Zmc2V0LmxlZnQgfHwgMCksXHJcbiAgICAgICAgdG9wOiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSAob2Zmc2V0LnRvcCB8fCAwKSxcclxuICAgIH07XHJcbn1cclxuY29uc3QgY29tcHV0ZVNjcm9sbFBvc2l0aW9uID0gKCkgPT4gKHtcclxuICAgIGxlZnQ6IHdpbmRvdy5wYWdlWE9mZnNldCxcclxuICAgIHRvcDogd2luZG93LnBhZ2VZT2Zmc2V0LFxyXG59KTtcclxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbihwb3NpdGlvbikge1xyXG4gICAgbGV0IHNjcm9sbFRvT3B0aW9ucztcclxuICAgIGlmICgnZWwnIGluIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgbGV0IHBvc2l0aW9uRWwgPSBwb3NpdGlvbi5lbDtcclxuICAgICAgICBjb25zdCBpc0lkU2VsZWN0b3IgPSB0eXBlb2YgcG9zaXRpb25FbCA9PT0gJ3N0cmluZycgJiYgcG9zaXRpb25FbC5zdGFydHNXaXRoKCcjJyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYGlkYHMgY2FuIGFjY2VwdCBwcmV0dHkgbXVjaCBhbnkgY2hhcmFjdGVycywgaW5jbHVkaW5nIENTUyBjb21iaW5hdG9yc1xyXG4gICAgICAgICAqIGxpa2UgYD5gIG9yIGB+YC4gSXQncyBzdGlsbCBwb3NzaWJsZSB0byByZXRyaWV2ZSBlbGVtZW50cyB1c2luZ1xyXG4gICAgICAgICAqIGBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnficpYCBidXQgaXQgbmVlZHMgdG8gYmUgZXNjYXBlZCB3aGVuIHVzaW5nXHJcbiAgICAgICAgICogYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNcXFxcficpYCBmb3IgaXQgdG8gYmUgdmFsaWQuIFRoZSBvbmx5XHJcbiAgICAgICAgICogcmVxdWlyZW1lbnRzIGZvciBgaWRgcyBhcmUgdGhlbSB0byBiZSB1bmlxdWUgb24gdGhlIHBhZ2UgYW5kIHRvIG5vdCBiZVxyXG4gICAgICAgICAqIGVtcHR5IChgaWQ9XCJcImApLiBCZWNhdXNlIG9mIHRoYXQsIHdoZW4gcGFzc2luZyBhbiBpZCBzZWxlY3RvciwgaXQgc2hvdWxkXHJcbiAgICAgICAgICogYmUgcHJvcGVybHkgZXNjYXBlZCBmb3IgaXQgdG8gd29yayB3aXRoIGBxdWVyeVNlbGVjdG9yYC4gV2UgY291bGQgY2hlY2tcclxuICAgICAgICAgKiBmb3IgdGhlIGlkIHNlbGVjdG9yIHRvIGJlIHNpbXBsZSAobm8gQ1NTIGNvbWJpbmF0b3JzIGArID5+YCkgYnV0IHRoYXRcclxuICAgICAgICAgKiB3b3VsZCBtYWtlIHRoaW5ncyBpbmNvbnNpc3RlbnQgc2luY2UgdGhleSBhcmUgdmFsaWQgY2hhcmFjdGVycyBmb3IgYW5cclxuICAgICAgICAgKiBgaWRgIGJ1dCB3b3VsZCBuZWVkIHRvIGJlIGVzY2FwZWQgd2hlbiB1c2luZyBgcXVlcnlTZWxlY3RvcmAsIGJyZWFraW5nXHJcbiAgICAgICAgICogdGhlaXIgdXNhZ2UgYW5kIGVuZGluZyB1cCBpbiBubyBzZWxlY3RvciByZXR1cm5lZC4gU2VsZWN0b3JzIG5lZWQgdG8gYmVcclxuICAgICAgICAgKiBlc2NhcGVkOlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogLSBgIzEtdGhpbmdgIGJlY29tZXMgYCNcXDMxIC10aGluZ2BcclxuICAgICAgICAgKiAtIGAjd2l0aH5zeW1ib2xzYCBiZWNvbWVzIGAjd2l0aFxcXFx+c3ltYm9sc2BcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIC0gTW9yZSBpbmZvcm1hdGlvbiBhYm91dCAgdGhlIHRvcGljIGNhbiBiZSBmb3VuZCBhdFxyXG4gICAgICAgICAqICAgaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2h0bWw1LWlkLWNsYXNzLlxyXG4gICAgICAgICAqIC0gUHJhY3RpY2FsIGV4YW1wbGU6IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL2h0bWw1LWlkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0eXBlb2YgcG9zaXRpb24uZWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmICghaXNJZFNlbGVjdG9yIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbi5lbC5zbGljZSgxKSkpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uLmVsKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJZFNlbGVjdG9yICYmIGZvdW5kRWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgVGhlIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiBzaG91bGQgYmUgcGFzc2VkIGFzIFwiZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyR7cG9zaXRpb24uZWx9JylcIiBiZWNhdXNlIGl0IHN0YXJ0cyB3aXRoIFwiI1wiLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gdG8gYXZvaWQgb3RoZXIgd2FybmluZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBUaGUgc2VsZWN0b3IgXCIke3Bvc2l0aW9uLmVsfVwiIGlzIGludmFsaWQuIElmIHlvdSBhcmUgdXNpbmcgYW4gaWQgc2VsZWN0b3IsIG1ha2Ugc3VyZSB0byBlc2NhcGUgaXQuIFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGVzY2FwaW5nIGNoYXJhY3RlcnMgaW4gc2VsZWN0b3JzIGF0IGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9jc3MtZXNjYXBlcyBvciB1c2UgQ1NTLmVzY2FwZSAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NTUy9lc2NhcGUpLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB0byBhdm9pZCBvdGhlciB3YXJuaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbCA9IHR5cGVvZiBwb3NpdGlvbkVsID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICA/IGlzSWRTZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3NpdGlvbkVsLnNsaWNlKDEpKVxyXG4gICAgICAgICAgICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvc2l0aW9uRWwpXHJcbiAgICAgICAgICAgIDogcG9zaXRpb25FbDtcclxuICAgICAgICBpZiAoIWVsKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ291bGRuJ3QgZmluZCBlbGVtZW50IHVzaW5nIHNlbGVjdG9yIFwiJHtwb3NpdGlvbi5lbH1cIiByZXR1cm5lZCBieSBzY3JvbGxCZWhhdmlvci5gKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY3JvbGxUb09wdGlvbnMgPSBnZXRFbGVtZW50UG9zaXRpb24oZWwsIHBvc2l0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHNjcm9sbFRvT3B0aW9ucyA9IHBvc2l0aW9uO1xyXG4gICAgfVxyXG4gICAgaWYgKCdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKVxyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhzY3JvbGxUb09wdGlvbnMpO1xyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFRvT3B0aW9ucy5sZWZ0ICE9IG51bGwgPyBzY3JvbGxUb09wdGlvbnMubGVmdCA6IHdpbmRvdy5wYWdlWE9mZnNldCwgc2Nyb2xsVG9PcHRpb25zLnRvcCAhPSBudWxsID8gc2Nyb2xsVG9PcHRpb25zLnRvcCA6IHdpbmRvdy5wYWdlWU9mZnNldCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KHBhdGgsIGRlbHRhKSB7XHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IGhpc3Rvcnkuc3RhdGUgPyBoaXN0b3J5LnN0YXRlLnBvc2l0aW9uIC0gZGVsdGEgOiAtMTtcclxuICAgIHJldHVybiBwb3NpdGlvbiArIHBhdGg7XHJcbn1cclxuY29uc3Qgc2Nyb2xsUG9zaXRpb25zID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24oa2V5LCBzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgc2Nyb2xsUG9zaXRpb25zLnNldChrZXksIHNjcm9sbFBvc2l0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGtleSkge1xyXG4gICAgY29uc3Qgc2Nyb2xsID0gc2Nyb2xsUG9zaXRpb25zLmdldChrZXkpO1xyXG4gICAgLy8gY29uc3VtZSBpdCBzbyBpdCdzIG5vdCB1c2VkIGFnYWluXHJcbiAgICBzY3JvbGxQb3NpdGlvbnMuZGVsZXRlKGtleSk7XHJcbiAgICByZXR1cm4gc2Nyb2xsO1xyXG59XHJcbi8vIFRPRE86IFJGQyBhYm91dCBob3cgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25cclxuLyoqXHJcbiAqIFNjcm9sbEJlaGF2aW9yIGluc3RhbmNlIHVzZWQgYnkgdGhlIHJvdXRlciB0byBjb21wdXRlIGFuZCByZXN0b3JlIHRoZSBzY3JvbGxcclxuICogcG9zaXRpb24gd2hlbiBuYXZpZ2F0aW5nLlxyXG4gKi9cclxuLy8gZXhwb3J0IGludGVyZmFjZSBTY3JvbGxIYW5kbGVyPFNjcm9sbFBvc2l0aW9uRW50cnkgZXh0ZW5kcyBIaXN0b3J5U3RhdGVWYWx1ZSwgU2Nyb2xsUG9zaXRpb24gZXh0ZW5kcyBTY3JvbGxQb3NpdGlvbkVudHJ5PiB7XHJcbi8vICAgLy8gcmV0dXJucyBhIHNjcm9sbCBwb3NpdGlvbiB0aGF0IGNhbiBiZSBzYXZlZCBpbiBoaXN0b3J5XHJcbi8vICAgY29tcHV0ZSgpOiBTY3JvbGxQb3NpdGlvbkVudHJ5XHJcbi8vICAgLy8gY2FuIHRha2UgYW4gZXh0ZW5kZWQgU2Nyb2xsUG9zaXRpb25FbnRyeVxyXG4vLyAgIHNjcm9sbChwb3NpdGlvbjogU2Nyb2xsUG9zaXRpb24pOiB2b2lkXHJcbi8vIH1cclxuLy8gZXhwb3J0IGNvbnN0IHNjcm9sbEhhbmRsZXI6IFNjcm9sbEhhbmRsZXI8U2Nyb2xsUG9zaXRpb24+ID0ge1xyXG4vLyAgIGNvbXB1dGU6IGNvbXB1dGVTY3JvbGwsXHJcbi8vICAgc2Nyb2xsOiBzY3JvbGxUb1Bvc2l0aW9uLFxyXG4vLyB9XG5cbmxldCBjcmVhdGVCYXNlTG9jYXRpb24gPSAoKSA9PiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0O1xyXG4vKipcclxuICogQ3JlYXRlcyBhIG5vcm1hbGl6ZWQgaGlzdG9yeSBsb2NhdGlvbiBmcm9tIGEgd2luZG93LmxvY2F0aW9uIG9iamVjdFxyXG4gKiBAcGFyYW0gbG9jYXRpb24gLVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ3VycmVudExvY2F0aW9uKGJhc2UsIGxvY2F0aW9uKSB7XHJcbiAgICBjb25zdCB7IHBhdGhuYW1lLCBzZWFyY2gsIGhhc2ggfSA9IGxvY2F0aW9uO1xyXG4gICAgLy8gYWxsb3dzIGhhc2ggYmFzZXMgbGlrZSAjLCAvIywgIy8sICMhLCAjIS8sIC8jIS8sIG9yIGV2ZW4gL2ZvbGRlciNlbmRcclxuICAgIGNvbnN0IGhhc2hQb3MgPSBiYXNlLmluZGV4T2YoJyMnKTtcclxuICAgIGlmIChoYXNoUG9zID4gLTEpIHtcclxuICAgICAgICBsZXQgc2xpY2VQb3MgPSBoYXNoLmluY2x1ZGVzKGJhc2Uuc2xpY2UoaGFzaFBvcykpXHJcbiAgICAgICAgICAgID8gYmFzZS5zbGljZShoYXNoUG9zKS5sZW5ndGhcclxuICAgICAgICAgICAgOiAxO1xyXG4gICAgICAgIGxldCBwYXRoRnJvbUhhc2ggPSBoYXNoLnNsaWNlKHNsaWNlUG9zKTtcclxuICAgICAgICAvLyBwcmVwZW5kIHRoZSBzdGFydGluZyBzbGFzaCB0byBoYXNoIHNvIHRoZSB1cmwgc3RhcnRzIHdpdGggLyNcclxuICAgICAgICBpZiAocGF0aEZyb21IYXNoWzBdICE9PSAnLycpXHJcbiAgICAgICAgICAgIHBhdGhGcm9tSGFzaCA9ICcvJyArIHBhdGhGcm9tSGFzaDtcclxuICAgICAgICByZXR1cm4gc3RyaXBCYXNlKHBhdGhGcm9tSGFzaCwgJycpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF0aCA9IHN0cmlwQmFzZShwYXRobmFtZSwgYmFzZSk7XHJcbiAgICByZXR1cm4gcGF0aCArIHNlYXJjaCArIGhhc2g7XHJcbn1cclxuZnVuY3Rpb24gdXNlSGlzdG9yeUxpc3RlbmVycyhiYXNlLCBoaXN0b3J5U3RhdGUsIGN1cnJlbnRMb2NhdGlvbiwgcmVwbGFjZSkge1xyXG4gICAgbGV0IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgbGV0IHRlYXJkb3ducyA9IFtdO1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIGl0IGJlIGEgc3RhY2s/IGEgRGljdC4gQ2hlY2sgaWYgdGhlIHBvcHN0YXRlIGxpc3RlbmVyXHJcbiAgICAvLyBjYW4gdHJpZ2dlciB0d2ljZVxyXG4gICAgbGV0IHBhdXNlU3RhdGUgPSBudWxsO1xyXG4gICAgY29uc3QgcG9wU3RhdGVIYW5kbGVyID0gKHsgc3RhdGUsIH0pID0+IHtcclxuICAgICAgICBjb25zdCB0byA9IGNyZWF0ZUN1cnJlbnRMb2NhdGlvbihiYXNlLCBsb2NhdGlvbik7XHJcbiAgICAgICAgY29uc3QgZnJvbSA9IGN1cnJlbnRMb2NhdGlvbi52YWx1ZTtcclxuICAgICAgICBjb25zdCBmcm9tU3RhdGUgPSBoaXN0b3J5U3RhdGUudmFsdWU7XHJcbiAgICAgICAgbGV0IGRlbHRhID0gMDtcclxuICAgICAgICBpZiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uLnZhbHVlID0gdG87XHJcbiAgICAgICAgICAgIGhpc3RvcnlTdGF0ZS52YWx1ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICAvLyBpZ25vcmUgdGhlIHBvcHN0YXRlIGFuZCByZXNldCB0aGUgcGF1c2VTdGF0ZVxyXG4gICAgICAgICAgICBpZiAocGF1c2VTdGF0ZSAmJiBwYXVzZVN0YXRlID09PSBmcm9tKSB7XHJcbiAgICAgICAgICAgICAgICBwYXVzZVN0YXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWx0YSA9IGZyb21TdGF0ZSA/IHN0YXRlLnBvc2l0aW9uIC0gZnJvbVN0YXRlLnBvc2l0aW9uIDogMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcGxhY2UodG8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh7IGRlbHRhRnJvbUN1cnJlbnQgfSlcclxuICAgICAgICAvLyBIZXJlIHdlIGNvdWxkIGFsc28gcmV2ZXJ0IHRoZSBuYXZpZ2F0aW9uIGJ5IGNhbGxpbmcgaGlzdG9yeS5nbygtZGVsdGEpXHJcbiAgICAgICAgLy8gdGhpcyBsaXN0ZW5lciB3aWxsIGhhdmUgdG8gYmUgYWRhcHRlZCB0byBub3QgdHJpZ2dlciBhZ2FpbiBhbmQgdG8gd2FpdCBmb3IgdGhlIHVybFxyXG4gICAgICAgIC8vIHRvIGJlIHVwZGF0ZWQgYmVmb3JlIHRyaWdnZXJpbmcgdGhlIGxpc3RlbmVycy4gU29tZSBraW5kIG9mIHZhbGlkYXRpb24gZnVuY3Rpb24gd291bGQgYWxzb1xyXG4gICAgICAgIC8vIG5lZWQgdG8gYmUgcGFzc2VkIHRvIHRoZSBsaXN0ZW5lcnMgc28gdGhlIG5hdmlnYXRpb24gY2FuIGJlIGFjY2VwdGVkXHJcbiAgICAgICAgLy8gY2FsbCBhbGwgbGlzdGVuZXJzXHJcbiAgICAgICAgbGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcihjdXJyZW50TG9jYXRpb24udmFsdWUsIGZyb20sIHtcclxuICAgICAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogTmF2aWdhdGlvblR5cGUucG9wLFxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBkZWx0YVxyXG4gICAgICAgICAgICAgICAgICAgID8gZGVsdGEgPiAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gTmF2aWdhdGlvbkRpcmVjdGlvbi5mb3J3YXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogTmF2aWdhdGlvbkRpcmVjdGlvbi5iYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLnVua25vd24sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIHBhdXNlTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHBhdXNlU3RhdGUgPSBjdXJyZW50TG9jYXRpb24udmFsdWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsaXN0ZW4oY2FsbGJhY2spIHtcclxuICAgICAgICAvLyBzZXR1cCB0aGUgbGlzdGVuZXIgYW5kIHByZXBhcmUgdGVhcmRvd24gY2FsbGJhY2tzXHJcbiAgICAgICAgbGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgIGNvbnN0IHRlYXJkb3duID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRlYXJkb3ducy5wdXNoKHRlYXJkb3duKTtcclxuICAgICAgICByZXR1cm4gdGVhcmRvd247XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBiZWZvcmVVbmxvYWRMaXN0ZW5lcigpIHtcclxuICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IHdpbmRvdztcclxuICAgICAgICBpZiAoIWhpc3Rvcnkuc3RhdGUpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShhc3NpZ24oe30sIGhpc3Rvcnkuc3RhdGUsIHsgc2Nyb2xsOiBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSB9KSwgJycpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHRlYXJkb3duIG9mIHRlYXJkb3ducylcclxuICAgICAgICAgICAgdGVhcmRvd24oKTtcclxuICAgICAgICB0ZWFyZG93bnMgPSBbXTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBwb3BTdGF0ZUhhbmRsZXIpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBiZWZvcmVVbmxvYWRMaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICAvLyBzZXR1cCB0aGUgbGlzdGVuZXJzIGFuZCBwcmVwYXJlIHRlYXJkb3duIGNhbGxiYWNrc1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgcG9wU3RhdGVIYW5kbGVyKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBiZWZvcmVVbmxvYWRMaXN0ZW5lcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhdXNlTGlzdGVuZXJzLFxyXG4gICAgICAgIGxpc3RlbixcclxuICAgICAgICBkZXN0cm95LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBhIHN0YXRlIG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gYnVpbGRTdGF0ZShiYWNrLCBjdXJyZW50LCBmb3J3YXJkLCByZXBsYWNlZCA9IGZhbHNlLCBjb21wdXRlU2Nyb2xsID0gZmFsc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmFjayxcclxuICAgICAgICBjdXJyZW50LFxyXG4gICAgICAgIGZvcndhcmQsXHJcbiAgICAgICAgcmVwbGFjZWQsXHJcbiAgICAgICAgcG9zaXRpb246IHdpbmRvdy5oaXN0b3J5Lmxlbmd0aCxcclxuICAgICAgICBzY3JvbGw6IGNvbXB1dGVTY3JvbGwgPyBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSA6IG51bGwsXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHVzZUhpc3RvcnlTdGF0ZU5hdmlnYXRpb24oYmFzZSkge1xyXG4gICAgY29uc3QgeyBoaXN0b3J5LCBsb2NhdGlvbiB9ID0gd2luZG93O1xyXG4gICAgLy8gcHJpdmF0ZSB2YXJpYWJsZXNcclxuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSB7XHJcbiAgICAgICAgdmFsdWU6IGNyZWF0ZUN1cnJlbnRMb2NhdGlvbihiYXNlLCBsb2NhdGlvbiksXHJcbiAgICB9O1xyXG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IHsgdmFsdWU6IGhpc3Rvcnkuc3RhdGUgfTtcclxuICAgIC8vIGJ1aWxkIGN1cnJlbnQgaGlzdG9yeSBlbnRyeSBhcyB0aGlzIGlzIGEgZnJlc2ggbmF2aWdhdGlvblxyXG4gICAgaWYgKCFoaXN0b3J5U3RhdGUudmFsdWUpIHtcclxuICAgICAgICBjaGFuZ2VMb2NhdGlvbihjdXJyZW50TG9jYXRpb24udmFsdWUsIHtcclxuICAgICAgICAgICAgYmFjazogbnVsbCxcclxuICAgICAgICAgICAgY3VycmVudDogY3VycmVudExvY2F0aW9uLnZhbHVlLFxyXG4gICAgICAgICAgICBmb3J3YXJkOiBudWxsLFxyXG4gICAgICAgICAgICAvLyB0aGUgbGVuZ3RoIGlzIG9mZiBieSBvbmUsIHdlIG5lZWQgdG8gZGVjcmVhc2UgaXRcclxuICAgICAgICAgICAgcG9zaXRpb246IGhpc3RvcnkubGVuZ3RoIC0gMSxcclxuICAgICAgICAgICAgcmVwbGFjZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIGRvbid0IGFkZCBhIHNjcm9sbCBhcyB0aGUgdXNlciBtYXkgaGF2ZSBhbiBhbmNob3IgYW5kIHdlIHdhbnRcclxuICAgICAgICAgICAgLy8gc2Nyb2xsQmVoYXZpb3IgdG8gYmUgdHJpZ2dlcmVkIHdpdGhvdXQgYSBzYXZlZCBwb3NpdGlvblxyXG4gICAgICAgICAgICBzY3JvbGw6IG51bGwsXHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjaGFuZ2VMb2NhdGlvbih0bywgc3RhdGUsIHJlcGxhY2UpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBpZiBhIGJhc2UgdGFnIGlzIHByb3ZpZGVkIGFuZCB3ZSBhcmUgb24gYSBub3JtYWwgZG9tYWluLCB3ZSBoYXZlIHRvXHJcbiAgICAgICAgICogcmVzcGVjdCB0aGUgcHJvdmlkZWQgYGJhc2VgIGF0dHJpYnV0ZSBiZWNhdXNlIHB1c2hTdGF0ZSgpIHdpbGwgdXNlIGl0IGFuZFxyXG4gICAgICAgICAqIHBvdGVudGlhbGx5IGVyYXNlIGFueXRoaW5nIGJlZm9yZSB0aGUgYCNgIGxpa2UgYXRcclxuICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci1uZXh0L2lzc3Vlcy82ODUgd2hlcmUgYSBiYXNlIG9mXHJcbiAgICAgICAgICogYC9mb2xkZXIvI2AgYnV0IGEgYmFzZSBvZiBgL2Agd291bGQgZXJhc2UgdGhlIGAvZm9sZGVyL2Agc2VjdGlvbi4gSWZcclxuICAgICAgICAgKiB0aGVyZSBpcyBubyBob3N0LCB0aGUgYDxiYXNlPmAgdGFnIG1ha2VzIG5vIHNlbnNlIGFuZCBpZiB0aGVyZSBpc24ndCBhXHJcbiAgICAgICAgICogYmFzZSB0YWcgd2UgY2FuIGp1c3QgdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGAjYC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBoYXNoSW5kZXggPSBiYXNlLmluZGV4T2YoJyMnKTtcclxuICAgICAgICBjb25zdCB1cmwgPSBoYXNoSW5kZXggPiAtMVxyXG4gICAgICAgICAgICA/IChsb2NhdGlvbi5ob3N0ICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKVxyXG4gICAgICAgICAgICAgICAgPyBiYXNlXHJcbiAgICAgICAgICAgICAgICA6IGJhc2Uuc2xpY2UoaGFzaEluZGV4KSkgKyB0b1xyXG4gICAgICAgICAgICA6IGNyZWF0ZUJhc2VMb2NhdGlvbigpICsgYmFzZSArIHRvO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIEJST1dTRVIgUVVJUktcclxuICAgICAgICAgICAgLy8gTk9URTogU2FmYXJpIHRocm93cyBhIFNlY3VyaXR5RXJyb3Igd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gMTAwIHRpbWVzIGluIDMwIHNlY29uZHNcclxuICAgICAgICAgICAgaGlzdG9yeVtyZXBsYWNlID8gJ3JlcGxhY2VTdGF0ZScgOiAncHVzaFN0YXRlJ10oc3RhdGUsICcnLCB1cmwpO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUgPSBzdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKCdFcnJvciB3aXRoIHB1c2gvcmVwbGFjZSBTdGF0ZScsIGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gRm9yY2UgdGhlIG5hdmlnYXRpb24sIHRoaXMgYWxzbyByZXNldHMgdGhlIGNhbGwgY291bnRcclxuICAgICAgICAgICAgbG9jYXRpb25bcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdhc3NpZ24nXSh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlcGxhY2UodG8sIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGFzc2lnbih7fSwgaGlzdG9yeS5zdGF0ZSwgYnVpbGRTdGF0ZShoaXN0b3J5U3RhdGUudmFsdWUuYmFjaywgXHJcbiAgICAgICAgLy8ga2VlcCBiYWNrIGFuZCBmb3J3YXJkIGVudHJpZXMgYnV0IG92ZXJyaWRlIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICB0bywgaGlzdG9yeVN0YXRlLnZhbHVlLmZvcndhcmQsIHRydWUpLCBkYXRhLCB7IHBvc2l0aW9uOiBoaXN0b3J5U3RhdGUudmFsdWUucG9zaXRpb24gfSk7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCB0cnVlKTtcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24udmFsdWUgPSB0bztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2godG8sIGRhdGEpIHtcclxuICAgICAgICAvLyBBZGQgdG8gY3VycmVudCBlbnRyeSB0aGUgaW5mb3JtYXRpb24gb2Ygd2hlcmUgd2UgYXJlIGdvaW5nXHJcbiAgICAgICAgLy8gYXMgd2VsbCBhcyBzYXZpbmcgdGhlIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBhc3NpZ24oe30sIFxyXG4gICAgICAgIC8vIHVzZSBjdXJyZW50IGhpc3Rvcnkgc3RhdGUgdG8gZ3JhY2VmdWxseSBoYW5kbGUgYSB3cm9uZyBjYWxsIHRvXHJcbiAgICAgICAgLy8gaGlzdG9yeS5yZXBsYWNlU3RhdGVcclxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci1uZXh0L2lzc3Vlcy8zNjZcclxuICAgICAgICBoaXN0b3J5U3RhdGUudmFsdWUsIGhpc3Rvcnkuc3RhdGUsIHtcclxuICAgICAgICAgICAgZm9yd2FyZDogdG8sXHJcbiAgICAgICAgICAgIHNjcm9sbDogY29tcHV0ZVNjcm9sbFBvc2l0aW9uKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGlzdG9yeS5zdGF0ZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBoaXN0b3J5LnN0YXRlIHNlZW1zIHRvIGhhdmUgYmVlbiBtYW51YWxseSByZXBsYWNlZCB3aXRob3V0IHByZXNlcnZpbmcgdGhlIG5lY2Vzc2FyeSB2YWx1ZXMuIE1ha2Ugc3VyZSB0byBwcmVzZXJ2ZSBleGlzdGluZyBoaXN0b3J5IHN0YXRlIGlmIHlvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBoaXN0b3J5LnJlcGxhY2VTdGF0ZTpcXG5cXG5gICtcclxuICAgICAgICAgICAgICAgIGBoaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5LnN0YXRlLCAnJywgdXJsKVxcblxcbmAgK1xyXG4gICAgICAgICAgICAgICAgYFlvdSBjYW4gZmluZCBtb3JlIGluZm9ybWF0aW9uIGF0IGh0dHBzOi8vbmV4dC5yb3V0ZXIudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi8jdXNhZ2Utb2YtaGlzdG9yeS1zdGF0ZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24oY3VycmVudFN0YXRlLmN1cnJlbnQsIGN1cnJlbnRTdGF0ZSwgdHJ1ZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhc3NpZ24oe30sIGJ1aWxkU3RhdGUoY3VycmVudExvY2F0aW9uLnZhbHVlLCB0bywgbnVsbCksIHsgcG9zaXRpb246IGN1cnJlbnRTdGF0ZS5wb3NpdGlvbiArIDEgfSwgZGF0YSk7XHJcbiAgICAgICAgY2hhbmdlTG9jYXRpb24odG8sIHN0YXRlLCBmYWxzZSk7XHJcbiAgICAgICAgY3VycmVudExvY2F0aW9uLnZhbHVlID0gdG87XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGxvY2F0aW9uOiBjdXJyZW50TG9jYXRpb24sXHJcbiAgICAgICAgc3RhdGU6IGhpc3RvcnlTdGF0ZSxcclxuICAgICAgICBwdXNoLFxyXG4gICAgICAgIHJlcGxhY2UsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGFuIEhUTUw1IGhpc3RvcnkuIE1vc3QgY29tbW9uIGhpc3RvcnkgZm9yIHNpbmdsZSBwYWdlIGFwcGxpY2F0aW9ucy5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlV2ViSGlzdG9yeShiYXNlKSB7XHJcbiAgICBiYXNlID0gbm9ybWFsaXplQmFzZShiYXNlKTtcclxuICAgIGNvbnN0IGhpc3RvcnlOYXZpZ2F0aW9uID0gdXNlSGlzdG9yeVN0YXRlTmF2aWdhdGlvbihiYXNlKTtcclxuICAgIGNvbnN0IGhpc3RvcnlMaXN0ZW5lcnMgPSB1c2VIaXN0b3J5TGlzdGVuZXJzKGJhc2UsIGhpc3RvcnlOYXZpZ2F0aW9uLnN0YXRlLCBoaXN0b3J5TmF2aWdhdGlvbi5sb2NhdGlvbiwgaGlzdG9yeU5hdmlnYXRpb24ucmVwbGFjZSk7XHJcbiAgICBmdW5jdGlvbiBnbyhkZWx0YSwgdHJpZ2dlckxpc3RlbmVycyA9IHRydWUpIHtcclxuICAgICAgICBpZiAoIXRyaWdnZXJMaXN0ZW5lcnMpXHJcbiAgICAgICAgICAgIGhpc3RvcnlMaXN0ZW5lcnMucGF1c2VMaXN0ZW5lcnMoKTtcclxuICAgICAgICBoaXN0b3J5LmdvKGRlbHRhKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJvdXRlckhpc3RvcnkgPSBhc3NpZ24oe1xyXG4gICAgICAgIC8vIGl0J3Mgb3ZlcnJpZGRlbiByaWdodCBhZnRlclxyXG4gICAgICAgIGxvY2F0aW9uOiAnJyxcclxuICAgICAgICBiYXNlLFxyXG4gICAgICAgIGdvLFxyXG4gICAgICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYuYmluZChudWxsLCBiYXNlKSxcclxuICAgIH0sIGhpc3RvcnlOYXZpZ2F0aW9uLCBoaXN0b3J5TGlzdGVuZXJzKTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb3V0ZXJIaXN0b3J5LCAnbG9jYXRpb24nLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6ICgpID0+IGhpc3RvcnlOYXZpZ2F0aW9uLmxvY2F0aW9uLnZhbHVlLFxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVySGlzdG9yeSwgJ3N0YXRlJywge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0OiAoKSA9PiBoaXN0b3J5TmF2aWdhdGlvbi5zdGF0ZS52YWx1ZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJvdXRlckhpc3Rvcnk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBpbi1tZW1vcnkgYmFzZWQgaGlzdG9yeS4gVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIGhpc3RvcnkgaXMgdG8gaGFuZGxlIFNTUi4gSXQgc3RhcnRzIGluIGEgc3BlY2lhbCBsb2NhdGlvbiB0aGF0IGlzIG5vd2hlcmUuXHJcbiAqIEl0J3MgdXAgdG8gdGhlIHVzZXIgdG8gcmVwbGFjZSB0aGF0IGxvY2F0aW9uIHdpdGggdGhlIHN0YXJ0ZXIgbG9jYXRpb24gYnkgZWl0aGVyIGNhbGxpbmcgYHJvdXRlci5wdXNoYCBvciBgcm91dGVyLnJlcGxhY2VgLlxyXG4gKlxyXG4gKiBAcGFyYW0gYmFzZSAtIEJhc2UgYXBwbGllZCB0byBhbGwgdXJscywgZGVmYXVsdHMgdG8gJy8nXHJcbiAqIEByZXR1cm5zIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSByb3V0ZXIgY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoYmFzZSA9ICcnKSB7XHJcbiAgICBsZXQgbGlzdGVuZXJzID0gW107XHJcbiAgICBsZXQgcXVldWUgPSBbU1RBUlRdO1xyXG4gICAgbGV0IHBvc2l0aW9uID0gMDtcclxuICAgIGZ1bmN0aW9uIHNldExvY2F0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgcG9zaXRpb24rKztcclxuICAgICAgICBpZiAocG9zaXRpb24gPT09IHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgYXQgdGhlIGVuZCwgd2UgY2FuIHNpbXBseSBhcHBlbmQgYSBuZXcgZW50cnlcclxuICAgICAgICAgICAgcXVldWUucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgaW4gdGhlIG1pZGRsZSwgd2UgcmVtb3ZlIGV2ZXJ5dGhpbmcgZnJvbSBoZXJlIGluIHRoZSBxdWV1ZVxyXG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UocG9zaXRpb24pO1xyXG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGxvY2F0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyTGlzdGVuZXJzKHRvLCBmcm9tLCB7IGRpcmVjdGlvbiwgZGVsdGEgfSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbixcclxuICAgICAgICAgICAgZGVsdGEsXHJcbiAgICAgICAgICAgIHR5cGU6IE5hdmlnYXRpb25UeXBlLnBvcCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAobGV0IGNhbGxiYWNrIG9mIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayh0bywgZnJvbSwgaW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgcm91dGVySGlzdG9yeSA9IHtcclxuICAgICAgICAvLyByZXdyaXR0ZW4gYnkgT2JqZWN0LmRlZmluZVByb3BlcnR5XHJcbiAgICAgICAgbG9jYXRpb246IFNUQVJULFxyXG4gICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBrZXB0IGluIHF1ZXVlXHJcbiAgICAgICAgc3RhdGU6IHt9LFxyXG4gICAgICAgIGJhc2UsXHJcbiAgICAgICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZi5iaW5kKG51bGwsIGJhc2UpLFxyXG4gICAgICAgIHJlcGxhY2UodG8pIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGN1cnJlbnQgZW50cnkgYW5kIGRlY3JlbWVudCBwb3NpdGlvblxyXG4gICAgICAgICAgICBxdWV1ZS5zcGxpY2UocG9zaXRpb24tLSwgMSk7XHJcbiAgICAgICAgICAgIHNldExvY2F0aW9uKHRvKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHB1c2godG8sIGRhdGEpIHtcclxuICAgICAgICAgICAgc2V0TG9jYXRpb24odG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlzdGVuKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICBsaXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAgICAgcXVldWUgPSBbU1RBUlRdO1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnbyhkZWx0YSwgc2hvdWxkVHJpZ2dlciA9IHRydWUpIHtcclxuICAgICAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMubG9jYXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IFxyXG4gICAgICAgICAgICAvLyB3ZSBhcmUgY29uc2lkZXJpbmcgZGVsdGEgPT09IDAgZ29pbmcgZm9yd2FyZCwgYnV0IGluIGFic3RyYWN0IG1vZGVcclxuICAgICAgICAgICAgLy8gdXNpbmcgMCBmb3IgdGhlIGRlbHRhIGRvZXNuJ3QgbWFrZSBzZW5zZSBsaWtlIGl0IGRvZXMgaW4gaHRtbDUgd2hlcmVcclxuICAgICAgICAgICAgLy8gaXQgcmVsb2FkcyB0aGUgcGFnZVxyXG4gICAgICAgICAgICBkZWx0YSA8IDAgPyBOYXZpZ2F0aW9uRGlyZWN0aW9uLmJhY2sgOiBOYXZpZ2F0aW9uRGlyZWN0aW9uLmZvcndhcmQ7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocG9zaXRpb24gKyBkZWx0YSwgcXVldWUubGVuZ3RoIC0gMSkpO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkVHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckxpc3RlbmVycyh0aGlzLmxvY2F0aW9uLCBmcm9tLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb3V0ZXJIaXN0b3J5LCAnbG9jYXRpb24nLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6ICgpID0+IHF1ZXVlW3Bvc2l0aW9uXSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJvdXRlckhpc3Rvcnk7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBoYXNoIGhpc3RvcnkuIFVzZWZ1bCBmb3Igd2ViIGFwcGxpY2F0aW9ucyB3aXRoIG5vIGhvc3QgKGUuZy5cclxuICogYGZpbGU6Ly9gKSBvciB3aGVuIGNvbmZpZ3VyaW5nIGEgc2VydmVyIHRvIGhhbmRsZSBhbnkgVVJMIGlzIG5vdCBwb3NzaWJsZS5cclxuICpcclxuICogQHBhcmFtIGJhc2UgLSBvcHRpb25hbCBiYXNlIHRvIHByb3ZpZGUuIERlZmF1bHRzIHRvIGBsb2NhdGlvbi5wYXRobmFtZSArXHJcbiAqIGxvY2F0aW9uLnNlYXJjaGAgSWYgdGhlcmUgaXMgYSBgPGJhc2U+YCB0YWcgaW4gdGhlIGBoZWFkYCwgaXRzIHZhbHVlIHdpbGwgYmVcclxuICogaWdub3JlZCBpbiBmYXZvciBvZiB0aGlzIHBhcmFtZXRlciAqKmJ1dCBub3RlIGl0IGFmZmVjdHMgYWxsIHRoZVxyXG4gKiBoaXN0b3J5LnB1c2hTdGF0ZSgpIGNhbGxzKiosIG1lYW5pbmcgdGhhdCBpZiB5b3UgdXNlIGEgYDxiYXNlPmAgdGFnLCBpdCdzXHJcbiAqIGBocmVmYCB2YWx1ZSAqKmhhcyB0byBtYXRjaCB0aGlzIHBhcmFtZXRlcioqIChpZ25vcmluZyBhbnl0aGluZyBhZnRlciB0aGVcclxuICogYCNgKS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogLy8gYXQgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXJcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIjYFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2ZvbGRlci8nKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIvI2BcclxuICogLy8gaWYgdGhlIGAjYCBpcyBwcm92aWRlZCBpbiB0aGUgYmFzZSwgaXQgd29uJ3QgYmUgYWRkZWQgYnkgYGNyZWF0ZVdlYkhhc2hIaXN0b3J5YFxyXG4gKiBjcmVhdGVXZWJIYXNoSGlzdG9yeSgnL2ZvbGRlci8jL2FwcC8nKSAvLyBnaXZlcyBhIHVybCBvZiBgaHR0cHM6Ly9leGFtcGxlLmNvbS9mb2xkZXIvIy9hcHAvYFxyXG4gKiAvLyB5b3Ugc2hvdWxkIGF2b2lkIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCBjaGFuZ2VzIHRoZSBvcmlnaW5hbCB1cmwgYW5kIGJyZWFrcyBjb3B5aW5nIHVybHNcclxuICogY3JlYXRlV2ViSGFzaEhpc3RvcnkoJy9vdGhlci1mb2xkZXIvJykgLy8gZ2l2ZXMgYSB1cmwgb2YgYGh0dHBzOi8vZXhhbXBsZS5jb20vb3RoZXItZm9sZGVyLyNgXHJcbiAqXHJcbiAqIC8vIGF0IGZpbGU6Ly8vdXNyL2V0Yy9mb2xkZXIvaW5kZXguaHRtbFxyXG4gKiAvLyBmb3IgbG9jYXRpb25zIHdpdGggbm8gYGhvc3RgLCB0aGUgYmFzZSBpcyBpZ25vcmVkXHJcbiAqIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KCcvaUFtSWdub3JlZCcpIC8vIGdpdmVzIGEgdXJsIG9mIGBmaWxlOi8vL3Vzci9ldGMvZm9sZGVyL2luZGV4Lmh0bWwjYFxyXG4gKiBgYGBcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVdlYkhhc2hIaXN0b3J5KGJhc2UpIHtcclxuICAgIC8vIE1ha2Ugc3VyZSB0aGlzIGltcGxlbWVudGF0aW9uIGlzIGZpbmUgaW4gdGVybXMgb2YgZW5jb2RpbmcsIHNwZWNpYWxseSBmb3IgSUUxMVxyXG4gICAgLy8gZm9yIGBmaWxlOi8vYCwgZGlyZWN0bHkgdXNlIHRoZSBwYXRobmFtZSBhbmQgaWdub3JlIHRoZSBiYXNlXHJcbiAgICAvLyBsb2NhdGlvbi5wYXRobmFtZSBjb250YWlucyBhbiBpbml0aWFsIGAvYCBldmVuIGF0IHRoZSByb290OiBgaHR0cHM6Ly9leGFtcGxlLmNvbWBcclxuICAgIGJhc2UgPSBsb2NhdGlvbi5ob3N0ID8gYmFzZSB8fCBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCA6ICcnO1xyXG4gICAgLy8gYWxsb3cgdGhlIHVzZXIgdG8gcHJvdmlkZSBhIGAjYCBpbiB0aGUgbWlkZGxlOiBgL2Jhc2UvIy9hcHBgXHJcbiAgICBpZiAoIWJhc2UuaW5jbHVkZXMoJyMnKSlcclxuICAgICAgICBiYXNlICs9ICcjJztcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMvJykgJiYgIWJhc2UuZW5kc1dpdGgoJyMnKSkge1xyXG4gICAgICAgIHdhcm4oYEEgaGFzaCBiYXNlIG11c3QgZW5kIHdpdGggYSBcIiNcIjpcXG5cIiR7YmFzZX1cIiBzaG91bGQgYmUgXCIke2Jhc2UucmVwbGFjZSgvIy4qJC8sICcjJyl9XCIuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlV2ViSGlzdG9yeShiYXNlKTtcclxufVxuXG5mdW5jdGlvbiBpc1JvdXRlTG9jYXRpb24ocm91dGUpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygcm91dGUgPT09ICdzdHJpbmcnIHx8IChyb3V0ZSAmJiB0eXBlb2Ygcm91dGUgPT09ICdvYmplY3QnKTtcclxufVxyXG5mdW5jdGlvbiBpc1JvdXRlTmFtZShuYW1lKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJztcclxufVxuXG4vKipcclxuICogSW5pdGlhbCByb3V0ZSBsb2NhdGlvbiB3aGVyZSB0aGUgcm91dGVyIGlzLiBDYW4gYmUgdXNlZCBpbiBuYXZpZ2F0aW9uIGd1YXJkc1xyXG4gKiB0byBkaWZmZXJlbnRpYXRlIHRoZSBpbml0aWFsIG5hdmlnYXRpb24uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGBgYGpzXHJcbiAqIGltcG9ydCB7IFNUQVJUX0xPQ0FUSU9OIH0gZnJvbSAndnVlLXJvdXRlcidcclxuICpcclxuICogcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAqICAgaWYgKGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OKSB7XHJcbiAqICAgICAvLyBpbml0aWFsIG5hdmlnYXRpb25cclxuICogICB9XHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuY29uc3QgU1RBUlRfTE9DQVRJT05fTk9STUFMSVpFRCA9IHtcclxuICAgIHBhdGg6ICcvJyxcclxuICAgIG5hbWU6IHVuZGVmaW5lZCxcclxuICAgIHBhcmFtczoge30sXHJcbiAgICBxdWVyeToge30sXHJcbiAgICBoYXNoOiAnJyxcclxuICAgIGZ1bGxQYXRoOiAnLycsXHJcbiAgICBtYXRjaGVkOiBbXSxcclxuICAgIG1ldGE6IHt9LFxyXG4gICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxufTtcblxuY29uc3QgTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2wgPSAvKiNfX1BVUkVfXyovIFBvbHlTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gJ25hdmlnYXRpb24gZmFpbHVyZScgOiAnbmYnKTtcclxuLyoqXHJcbiAqIEVudW1lcmF0aW9uIHdpdGggYWxsIHBvc3NpYmxlIHR5cGVzIGZvciBuYXZpZ2F0aW9uIGZhaWx1cmVzLiBDYW4gYmUgcGFzc2VkIHRvXHJcbiAqIHtAbGluayBpc05hdmlnYXRpb25GYWlsdXJlfSB0byBjaGVjayBmb3Igc3BlY2lmaWMgZmFpbHVyZXMuXHJcbiAqL1xyXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xyXG4oZnVuY3Rpb24gKE5hdmlnYXRpb25GYWlsdXJlVHlwZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhYm9ydGVkIG5hdmlnYXRpb24gaXMgYSBuYXZpZ2F0aW9uIHRoYXQgZmFpbGVkIGJlY2F1c2UgYSBuYXZpZ2F0aW9uXHJcbiAgICAgKiBndWFyZCByZXR1cm5lZCBgZmFsc2VgIG9yIGNhbGxlZCBgbmV4dChmYWxzZSlgXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJhYm9ydGVkXCJdID0gNF0gPSBcImFib3J0ZWRcIjtcclxuICAgIC8qKlxyXG4gICAgICogQSBjYW5jZWxsZWQgbmF2aWdhdGlvbiBpcyBhIG5hdmlnYXRpb24gdGhhdCBmYWlsZWQgYmVjYXVzZSBhIG1vcmUgcmVjZW50XHJcbiAgICAgKiBuYXZpZ2F0aW9uIGZpbmlzaGVkIHN0YXJ0ZWQgKG5vdCBuZWNlc3NhcmlseSBmaW5pc2hlZCkuXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJjYW5jZWxsZWRcIl0gPSA4XSA9IFwiY2FuY2VsbGVkXCI7XHJcbiAgICAvKipcclxuICAgICAqIEEgZHVwbGljYXRlZCBuYXZpZ2F0aW9uIGlzIGEgbmF2aWdhdGlvbiB0aGF0IGZhaWxlZCBiZWNhdXNlIGl0IHdhc1xyXG4gICAgICogaW5pdGlhdGVkIHdoaWxlIGFscmVhZHkgYmVpbmcgYXQgdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24uXHJcbiAgICAgKi9cclxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZVtOYXZpZ2F0aW9uRmFpbHVyZVR5cGVbXCJkdXBsaWNhdGVkXCJdID0gMTZdID0gXCJkdXBsaWNhdGVkXCI7XHJcbn0pKE5hdmlnYXRpb25GYWlsdXJlVHlwZSB8fCAoTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge30pKTtcclxuLy8gREVWIG9ubHkgZGVidWcgbWVzc2FnZXNcclxuY29uc3QgRXJyb3JUeXBlTWVzc2FnZXMgPSB7XHJcbiAgICBbMSAvKiBNQVRDSEVSX05PVF9GT1VORCAqL10oeyBsb2NhdGlvbiwgY3VycmVudExvY2F0aW9uIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5vIG1hdGNoIGZvclxcbiAke0pTT04uc3RyaW5naWZ5KGxvY2F0aW9uKX0ke2N1cnJlbnRMb2NhdGlvblxyXG4gICAgICAgICAgICA/ICdcXG53aGlsZSBiZWluZyBhdFxcbicgKyBKU09OLnN0cmluZ2lmeShjdXJyZW50TG9jYXRpb24pXHJcbiAgICAgICAgICAgIDogJyd9YDtcclxuICAgIH0sXHJcbiAgICBbMiAvKiBOQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovXSh7IGZyb20sIHRvLCB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBSZWRpcmVjdGVkIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3N0cmluZ2lmeVJvdXRlKHRvKX1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovXSh7IGZyb20sIHRvIH0pIHtcclxuICAgICAgICByZXR1cm4gYE5hdmlnYXRpb24gYWJvcnRlZCBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLmA7XHJcbiAgICB9LFxyXG4gICAgWzggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi9dKHsgZnJvbSwgdG8gfSkge1xyXG4gICAgICAgIHJldHVybiBgTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcIiR7ZnJvbS5mdWxsUGF0aH1cIiB0byBcIiR7dG8uZnVsbFBhdGh9XCIgd2l0aCBhIG5ldyBuYXZpZ2F0aW9uLmA7XHJcbiAgICB9LFxyXG4gICAgWzE2IC8qIE5BVklHQVRJT05fRFVQTElDQVRFRCAqL10oeyBmcm9tLCB0byB9KSB7XHJcbiAgICAgICAgcmV0dXJuIGBBdm9pZGVkIHJlZHVuZGFudCBuYXZpZ2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb246IFwiJHtmcm9tLmZ1bGxQYXRofVwiLmA7XHJcbiAgICB9LFxyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvcih0eXBlLCBwYXJhbXMpIHtcclxuICAgIC8vIGtlZXAgZnVsbCBlcnJvciBtZXNzYWdlcyBpbiBjanMgdmVyc2lvbnNcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIXRydWUpIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcihFcnJvclR5cGVNZXNzYWdlc1t0eXBlXShwYXJhbXMpKSwge1xyXG4gICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICBbTmF2aWdhdGlvbkZhaWx1cmVTeW1ib2xdOiB0cnVlLFxyXG4gICAgICAgIH0sIHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXNzaWduKG5ldyBFcnJvcigpLCB7XHJcbiAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgIFtOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbF06IHRydWUsXHJcbiAgICAgICAgfSwgcGFyYW1zKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCB0eXBlKSB7XHJcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiZcclxuICAgICAgICBOYXZpZ2F0aW9uRmFpbHVyZVN5bWJvbCBpbiBlcnJvciAmJlxyXG4gICAgICAgICh0eXBlID09IG51bGwgfHwgISEoZXJyb3IudHlwZSAmIHR5cGUpKSk7XHJcbn1cclxuY29uc3QgcHJvcGVydGllc1RvTG9nID0gWydwYXJhbXMnLCAncXVlcnknLCAnaGFzaCddO1xyXG5mdW5jdGlvbiBzdHJpbmdpZnlSb3V0ZSh0bykge1xyXG4gICAgaWYgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycpXHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgaWYgKCdwYXRoJyBpbiB0bylcclxuICAgICAgICByZXR1cm4gdG8ucGF0aDtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwcm9wZXJ0aWVzVG9Mb2cpIHtcclxuICAgICAgICBpZiAoa2V5IGluIHRvKVxyXG4gICAgICAgICAgICBsb2NhdGlvbltrZXldID0gdG9ba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsb2NhdGlvbiwgbnVsbCwgMik7XHJcbn1cblxuLy8gZGVmYXVsdCBwYXR0ZXJuIGZvciBhIHBhcmFtOiBub24gZ3JlZWR5IGV2ZXJ5dGhpbmcgYnV0IC9cclxuY29uc3QgQkFTRV9QQVJBTV9QQVRURVJOID0gJ1teL10rPyc7XHJcbmNvbnN0IEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUyA9IHtcclxuICAgIHNlbnNpdGl2ZTogZmFsc2UsXHJcbiAgICBzdHJpY3Q6IGZhbHNlLFxyXG4gICAgc3RhcnQ6IHRydWUsXHJcbiAgICBlbmQ6IHRydWUsXHJcbn07XHJcbi8vIFNwZWNpYWwgUmVnZXggY2hhcmFjdGVycyB0aGF0IG11c3QgYmUgZXNjYXBlZCBpbiBzdGF0aWMgdG9rZW5zXHJcbmNvbnN0IFJFR0VYX0NIQVJTX1JFID0gL1suKyo/XiR7fSgpW1xcXS9cXFxcXS9nO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHBhdGggcGFyc2VyIGZyb20gYW4gYXJyYXkgb2YgU2VnbWVudHMgKGEgc2VnbWVudCBpcyBhbiBhcnJheSBvZiBUb2tlbnMpXHJcbiAqXHJcbiAqIEBwYXJhbSBzZWdtZW50cyAtIGFycmF5IG9mIHNlZ21lbnRzIHJldHVybmVkIGJ5IHRva2VuaXplUGF0aFxyXG4gKiBAcGFyYW0gZXh0cmFPcHRpb25zIC0gb3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHJlZ2V4cFxyXG4gKiBAcmV0dXJucyBhIFBhdGhQYXJzZXJcclxuICovXHJcbmZ1bmN0aW9uIHRva2Vuc1RvUGFyc2VyKHNlZ21lbnRzLCBleHRyYU9wdGlvbnMpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBhc3NpZ24oe30sIEJBU0VfUEFUSF9QQVJTRVJfT1BUSU9OUywgZXh0cmFPcHRpb25zKTtcclxuICAgIC8vIHRoZSBhbW91bnQgb2Ygc2NvcmVzIGlzIHRoZSBzYW1lIGFzIHRoZSBsZW5ndGggb2Ygc2VnbWVudHMgZXhjZXB0IGZvciB0aGUgcm9vdCBzZWdtZW50IFwiL1wiXHJcbiAgICBsZXQgc2NvcmUgPSBbXTtcclxuICAgIC8vIHRoZSByZWdleHAgYXMgYSBzdHJpbmdcclxuICAgIGxldCBwYXR0ZXJuID0gb3B0aW9ucy5zdGFydCA/ICdeJyA6ICcnO1xyXG4gICAgLy8gZXh0cmFjdGVkIGtleXNcclxuICAgIGNvbnN0IGtleXMgPSBbXTtcclxuICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xyXG4gICAgICAgIC8vIHRoZSByb290IHNlZ21lbnQgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnRcclxuICAgICAgICBjb25zdCBzZWdtZW50U2NvcmVzID0gc2VnbWVudC5sZW5ndGggPyBbXSA6IFs5MCAvKiBSb290ICovXTtcclxuICAgICAgICAvLyBhbGxvdyB0cmFpbGluZyBzbGFzaFxyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmljdCAmJiAhc2VnbWVudC5sZW5ndGgpXHJcbiAgICAgICAgICAgIHBhdHRlcm4gKz0gJy8nO1xyXG4gICAgICAgIGZvciAobGV0IHRva2VuSW5kZXggPSAwOyB0b2tlbkluZGV4IDwgc2VnbWVudC5sZW5ndGg7IHRva2VuSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHNlZ21lbnRbdG9rZW5JbmRleF07XHJcbiAgICAgICAgICAgIC8vIHJlc2V0cyB0aGUgc2NvcmUgaWYgd2UgYXJlIGluc2lkZSBhIHN1YiBzZWdtZW50IC86YS1vdGhlci06YlxyXG4gICAgICAgICAgICBsZXQgc3ViU2VnbWVudFNjb3JlID0gNDAgLyogU2VnbWVudCAqLyArXHJcbiAgICAgICAgICAgICAgICAob3B0aW9ucy5zZW5zaXRpdmUgPyAwLjI1IC8qIEJvbnVzQ2FzZVNlbnNpdGl2ZSAqLyA6IDApO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXBlbmQgdGhlIHNsYXNoIGlmIHdlIGFyZSBzdGFydGluZyBhIG5ldyBzZWdtZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybiArPSAnLyc7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuICs9IHRva2VuLnZhbHVlLnJlcGxhY2UoUkVHRVhfQ0hBUlNfUkUsICdcXFxcJCYnKTtcclxuICAgICAgICAgICAgICAgIHN1YlNlZ21lbnRTY29yZSArPSA0MCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gMSAvKiBQYXJhbSAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2YWx1ZSwgcmVwZWF0YWJsZSwgb3B0aW9uYWwsIHJlZ2V4cCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlID0gcmVnZXhwID8gcmVnZXhwIDogQkFTRV9QQVJBTV9QQVRURVJOO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHVzZXIgcHJvdmlkZWQgYSBjdXN0b20gcmVnZXhwIC86aWQoXFxcXGQrKVxyXG4gICAgICAgICAgICAgICAgaWYgKHJlICE9PSBCQVNFX1BBUkFNX1BBVFRFUk4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gMTAgLyogQm9udXNDdXN0b21SZWdFeHAgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSByZWdleHAgaXMgdmFsaWQgYmVmb3JlIHVzaW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChgKCR7cmV9KWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjdXN0b20gUmVnRXhwIGZvciBwYXJhbSBcIiR7dmFsdWV9XCIgKCR7cmV9KTogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3ZSByZXBlYXQgd2UgbXVzdCB0YWtlIGNhcmUgb2YgdGhlIHJlcGVhdGluZyBsZWFkaW5nIHNsYXNoXHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViUGF0dGVybiA9IHJlcGVhdGFibGUgPyBgKCg/OiR7cmV9KSg/Oi8oPzoke3JlfSkpKilgIDogYCgke3JlfSlgO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJlcGVuZCB0aGUgc2xhc2ggaWYgd2UgYXJlIHN0YXJ0aW5nIGEgbmV3IHNlZ21lbnRcclxuICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmRleClcclxuICAgICAgICAgICAgICAgICAgICBzdWJQYXR0ZXJuID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXZvaWQgYW4gb3B0aW9uYWwgLyBpZiB0aGVyZSBhcmUgbW9yZSBzZWdtZW50cyBlLmcuIC86cD8tc3RhdGljXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9yIC86cD8tOnAyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsICYmIHNlZ21lbnQubGVuZ3RoIDwgMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBgKD86LyR7c3ViUGF0dGVybn0pYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnLycgKyBzdWJQYXR0ZXJuO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YlBhdHRlcm4gKz0gJz8nO1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybiArPSBzdWJQYXR0ZXJuO1xyXG4gICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IDIwIC8qIER5bmFtaWMgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViU2VnbWVudFNjb3JlICs9IC04IC8qIEJvbnVzT3B0aW9uYWwgKi87XHJcbiAgICAgICAgICAgICAgICBpZiAocmVwZWF0YWJsZSlcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTIwIC8qIEJvbnVzUmVwZWF0YWJsZSAqLztcclxuICAgICAgICAgICAgICAgIGlmIChyZSA9PT0gJy4qJylcclxuICAgICAgICAgICAgICAgICAgICBzdWJTZWdtZW50U2NvcmUgKz0gLTUwIC8qIEJvbnVzV2lsZGNhcmQgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VnbWVudFNjb3Jlcy5wdXNoKHN1YlNlZ21lbnRTY29yZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFuIGVtcHR5IGFycmF5IGxpa2UgL2hvbWUvIC0+IFtbe2hvbWV9XSwgW11dXHJcbiAgICAgICAgLy8gaWYgKCFzZWdtZW50Lmxlbmd0aCkgcGF0dGVybiArPSAnLydcclxuICAgICAgICBzY29yZS5wdXNoKHNlZ21lbnRTY29yZXMpO1xyXG4gICAgfVxyXG4gICAgLy8gb25seSBhcHBseSB0aGUgc3RyaWN0IGJvbnVzIHRvIHRoZSBsYXN0IHNjb3JlXHJcbiAgICBpZiAob3B0aW9ucy5zdHJpY3QgJiYgb3B0aW9ucy5lbmQpIHtcclxuICAgICAgICBjb25zdCBpID0gc2NvcmUubGVuZ3RoIC0gMTtcclxuICAgICAgICBzY29yZVtpXVtzY29yZVtpXS5sZW5ndGggLSAxXSArPSAwLjcwMDAwMDAwMDAwMDAwMDEgLyogQm9udXNTdHJpY3QgKi87XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiBkZXYgb25seSB3YXJuIGRvdWJsZSB0cmFpbGluZyBzbGFzaFxyXG4gICAgaWYgKCFvcHRpb25zLnN0cmljdClcclxuICAgICAgICBwYXR0ZXJuICs9ICcvPyc7XHJcbiAgICBpZiAob3B0aW9ucy5lbmQpXHJcbiAgICAgICAgcGF0dGVybiArPSAnJCc7XHJcbiAgICAvLyBhbGxvdyBwYXRocyBsaWtlIC9keW5hbWljIHRvIG9ubHkgbWF0Y2ggZHluYW1pYyBvciBkeW5hbWljLy4uLiBidXQgbm90IGR5bmFtaWNfc29tZXRoaW5nX2Vsc2VcclxuICAgIGVsc2UgaWYgKG9wdGlvbnMuc3RyaWN0KVxyXG4gICAgICAgIHBhdHRlcm4gKz0gJyg/Oi98JCknO1xyXG4gICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4sIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaScpO1xyXG4gICAgZnVuY3Rpb24gcGFyc2UocGF0aCkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gcGF0aC5tYXRjaChyZSk7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge307XHJcbiAgICAgICAgaWYgKCFtYXRjaClcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBtYXRjaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG1hdGNoW2ldIHx8ICcnO1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlzW2kgLSAxXTtcclxuICAgICAgICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IHZhbHVlICYmIGtleS5yZXBlYXRhYmxlID8gdmFsdWUuc3BsaXQoJy8nKSA6IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc3RyaW5naWZ5KHBhcmFtcykge1xyXG4gICAgICAgIGxldCBwYXRoID0gJyc7XHJcbiAgICAgICAgLy8gZm9yIG9wdGlvbmFsIHBhcmFtZXRlcnMgdG8gYWxsb3cgdG8gYmUgZW1wdHlcclxuICAgICAgICBsZXQgYXZvaWREdXBsaWNhdGVkU2xhc2ggPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKCFhdm9pZER1cGxpY2F0ZWRTbGFzaCB8fCAhcGF0aC5lbmRzV2l0aCgnLycpKVxyXG4gICAgICAgICAgICAgICAgcGF0aCArPSAnLyc7XHJcbiAgICAgICAgICAgIGF2b2lkRHVwbGljYXRlZFNsYXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2Ygc2VnbWVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDAgLyogU3RhdGljICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aCArPSB0b2tlbi52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IDEgLyogUGFyYW0gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCByZXBlYXRhYmxlLCBvcHRpb25hbCB9ID0gdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW0gPSB2YWx1ZSBpbiBwYXJhbXMgPyBwYXJhbXNbdmFsdWVdIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0pICYmICFyZXBlYXRhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVkIHBhcmFtIFwiJHt2YWx1ZX1cIiBpcyBhbiBhcnJheSBidXQgaXQgaXMgbm90IHJlcGVhdGFibGUgKCogb3IgKyBtb2RpZmllcnMpYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IEFycmF5LmlzQXJyYXkocGFyYW0pID8gcGFyYW0uam9pbignLycpIDogcGFyYW07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBtb3JlIHRoYW4gb25lIG9wdGlvbmFsIHBhcmFtIGxpa2UgLzphPy1zdGF0aWMgd2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IG5lZWQgdG8gY2FyZSBhYm91dCB0aGUgb3B0aW9uYWwgcGFyYW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGxhc3Qgc2xhc2ggYXMgd2UgY291bGQgYmUgYXQgdGhlIGVuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXRoLmVuZHNXaXRoKCcvJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkbyBub3QgYXBwZW5kIGEgc2xhc2ggb24gdGhlIG5leHQgaXRlcmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdm9pZER1cGxpY2F0ZWRTbGFzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIHJlcXVpcmVkIHBhcmFtIFwiJHt2YWx1ZX1cImApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBwYXRoICs9IHRleHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlLFxyXG4gICAgICAgIHNjb3JlLFxyXG4gICAgICAgIGtleXMsXHJcbiAgICAgICAgcGFyc2UsXHJcbiAgICAgICAgc3RyaW5naWZ5LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQ29tcGFyZXMgYW4gYXJyYXkgb2YgbnVtYmVycyBhcyB1c2VkIGluIFBhdGhQYXJzZXIuc2NvcmUgYW5kIHJldHVybnMgYVxyXG4gKiBudW1iZXIuIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYHNvcnRgIGFuIGFycmF5XHJcbiAqIEBwYXJhbSBhIC0gZmlyc3QgYXJyYXkgb2YgbnVtYmVyc1xyXG4gKiBAcGFyYW0gYiAtIHNlY29uZCBhcnJheSBvZiBudW1iZXJzXHJcbiAqIEByZXR1cm5zIDAgaWYgYm90aCBhcmUgZXF1YWwsIDwgMCBpZiBhIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3QsID4gMCBpZiBiXHJcbiAqIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3RcclxuICovXHJcbmZ1bmN0aW9uIGNvbXBhcmVTY29yZUFycmF5KGEsIGIpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgYS5sZW5ndGggJiYgaSA8IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgZGlmZiA9IGJbaV0gLSBhW2ldO1xyXG4gICAgICAgIC8vIG9ubHkga2VlcCBnb2luZyBpZiBkaWZmID09PSAwXHJcbiAgICAgICAgaWYgKGRpZmYpXHJcbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIC8vIGlmIHRoZSBsYXN0IHN1YnNlZ21lbnQgd2FzIFN0YXRpYywgdGhlIHNob3J0ZXIgc2VnbWVudHMgc2hvdWxkIGJlIHNvcnRlZCBmaXJzdFxyXG4gICAgLy8gb3RoZXJ3aXNlIHNvcnQgdGhlIGxvbmdlc3Qgc2VnbWVudCBmaXJzdFxyXG4gICAgaWYgKGEubGVuZ3RoIDwgYi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gYS5sZW5ndGggPT09IDEgJiYgYVswXSA9PT0gNDAgLyogU3RhdGljICovICsgNDAgLyogU2VnbWVudCAqL1xyXG4gICAgICAgICAgICA/IC0xXHJcbiAgICAgICAgICAgIDogMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGEubGVuZ3RoID4gYi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gYi5sZW5ndGggPT09IDEgJiYgYlswXSA9PT0gNDAgLyogU3RhdGljICovICsgNDAgLyogU2VnbWVudCAqL1xyXG4gICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG59XHJcbi8qKlxyXG4gKiBDb21wYXJlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBgc29ydGAgdG8gc29ydCBhbiBhcnJheSBvZiBQYXRoUGFyc2VyXHJcbiAqIEBwYXJhbSBhIC0gZmlyc3QgUGF0aFBhcnNlclxyXG4gKiBAcGFyYW0gYiAtIHNlY29uZCBQYXRoUGFyc2VyXHJcbiAqIEByZXR1cm5zIDAgaWYgYm90aCBhcmUgZXF1YWwsIDwgMCBpZiBhIHNob3VsZCBiZSBzb3J0ZWQgZmlyc3QsID4gMCBpZiBiXHJcbiAqL1xyXG5mdW5jdGlvbiBjb21wYXJlUGF0aFBhcnNlclNjb3JlKGEsIGIpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IGFTY29yZSA9IGEuc2NvcmU7XHJcbiAgICBjb25zdCBiU2NvcmUgPSBiLnNjb3JlO1xyXG4gICAgd2hpbGUgKGkgPCBhU2NvcmUubGVuZ3RoICYmIGkgPCBiU2NvcmUubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IGNvbXBhcmVTY29yZUFycmF5KGFTY29yZVtpXSwgYlNjb3JlW2ldKTtcclxuICAgICAgICAvLyBkbyBub3QgcmV0dXJuIGlmIGJvdGggYXJlIGVxdWFsXHJcbiAgICAgICAgaWYgKGNvbXApXHJcbiAgICAgICAgICAgIHJldHVybiBjb21wO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuICAgIC8vIGlmIGEgYW5kIGIgc2hhcmUgdGhlIHNhbWUgc2NvcmUgZW50cmllcyBidXQgYiBoYXMgbW9yZSwgc29ydCBiIGZpcnN0XHJcbiAgICByZXR1cm4gYlNjb3JlLmxlbmd0aCAtIGFTY29yZS5sZW5ndGg7XHJcbiAgICAvLyB0aGlzIGlzIHRoZSB0ZXJuYXJ5IHZlcnNpb25cclxuICAgIC8vIHJldHVybiBhU2NvcmUubGVuZ3RoIDwgYlNjb3JlLmxlbmd0aFxyXG4gICAgLy8gICA/IDFcclxuICAgIC8vICAgOiBhU2NvcmUubGVuZ3RoID4gYlNjb3JlLmxlbmd0aFxyXG4gICAgLy8gICA/IC0xXHJcbiAgICAvLyAgIDogMFxyXG59XG5cbmNvbnN0IFJPT1RfVE9LRU4gPSB7XHJcbiAgICB0eXBlOiAwIC8qIFN0YXRpYyAqLyxcclxuICAgIHZhbHVlOiAnJyxcclxufTtcclxuY29uc3QgVkFMSURfUEFSQU1fUkUgPSAvW2EtekEtWjAtOV9dLztcclxuLy8gQWZ0ZXIgc29tZSBwcm9maWxpbmcsIHRoZSBjYWNoZSBzZWVtcyB0byBiZSB1bm5lY2Vzc2FyeSBiZWNhdXNlIHRva2VuaXplUGF0aFxyXG4vLyAodGhlIHNsb3dlc3QgcGFydCBvZiBhZGRpbmcgYSByb3V0ZSkgaXMgdmVyeSBmYXN0XHJcbi8vIGNvbnN0IHRva2VuQ2FjaGUgPSBuZXcgTWFwPHN0cmluZywgVG9rZW5bXVtdPigpXHJcbmZ1bmN0aW9uIHRva2VuaXplUGF0aChwYXRoKSB7XHJcbiAgICBpZiAoIXBhdGgpXHJcbiAgICAgICAgcmV0dXJuIFtbXV07XHJcbiAgICBpZiAocGF0aCA9PT0gJy8nKVxyXG4gICAgICAgIHJldHVybiBbW1JPT1RfVE9LRU5dXTtcclxuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKCcvJykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgID8gYFJvdXRlIHBhdGhzIHNob3VsZCBzdGFydCB3aXRoIGEgXCIvXCI6IFwiJHtwYXRofVwiIHNob3VsZCBiZSBcIi8ke3BhdGh9XCIuYFxyXG4gICAgICAgICAgICA6IGBJbnZhbGlkIHBhdGggXCIke3BhdGh9XCJgKTtcclxuICAgIH1cclxuICAgIC8vIGlmICh0b2tlbkNhY2hlLmhhcyhwYXRoKSkgcmV0dXJuIHRva2VuQ2FjaGUuZ2V0KHBhdGgpIVxyXG4gICAgZnVuY3Rpb24gY3Jhc2gobWVzc2FnZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRVJSICgke3N0YXRlfSkvXCIke2J1ZmZlcn1cIjogJHttZXNzYWdlfWApO1xyXG4gICAgfVxyXG4gICAgbGV0IHN0YXRlID0gMCAvKiBTdGF0aWMgKi87XHJcbiAgICBsZXQgcHJldmlvdXNTdGF0ZSA9IHN0YXRlO1xyXG4gICAgY29uc3QgdG9rZW5zID0gW107XHJcbiAgICAvLyB0aGUgc2VnbWVudCB3aWxsIGFsd2F5cyBiZSB2YWxpZCBiZWNhdXNlIHdlIGdldCBpbnRvIHRoZSBpbml0aWFsIHN0YXRlXHJcbiAgICAvLyB3aXRoIHRoZSBsZWFkaW5nIC9cclxuICAgIGxldCBzZWdtZW50O1xyXG4gICAgZnVuY3Rpb24gZmluYWxpemVTZWdtZW50KCkge1xyXG4gICAgICAgIGlmIChzZWdtZW50KVxyXG4gICAgICAgICAgICB0b2tlbnMucHVzaChzZWdtZW50KTtcclxuICAgICAgICBzZWdtZW50ID0gW107XHJcbiAgICB9XHJcbiAgICAvLyBpbmRleCBvbiB0aGUgcGF0aFxyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgLy8gY2hhciBhdCBpbmRleFxyXG4gICAgbGV0IGNoYXI7XHJcbiAgICAvLyBidWZmZXIgb2YgdGhlIHZhbHVlIHJlYWRcclxuICAgIGxldCBidWZmZXIgPSAnJztcclxuICAgIC8vIGN1c3RvbSByZWdleHAgZm9yIGEgcGFyYW1cclxuICAgIGxldCBjdXN0b21SZSA9ICcnO1xyXG4gICAgZnVuY3Rpb24gY29uc3VtZUJ1ZmZlcigpIHtcclxuICAgICAgICBpZiAoIWJ1ZmZlcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gMCAvKiBTdGF0aWMgKi8pIHtcclxuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDAgLyogU3RhdGljICovLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlcixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHN0YXRlID09PSAxIC8qIFBhcmFtICovIHx8XHJcbiAgICAgICAgICAgIHN0YXRlID09PSAyIC8qIFBhcmFtUmVnRXhwICovIHx8XHJcbiAgICAgICAgICAgIHN0YXRlID09PSAzIC8qIFBhcmFtUmVnRXhwRW5kICovKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDEgJiYgKGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnKycpKVxyXG4gICAgICAgICAgICAgICAgY3Jhc2goYEEgcmVwZWF0YWJsZSBwYXJhbSAoJHtidWZmZXJ9KSBtdXN0IGJlIGFsb25lIGluIGl0cyBzZWdtZW50LiBlZzogJy86aWRzKy5gKTtcclxuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogUGFyYW0gKi8sXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgcmVnZXhwOiBjdXN0b21SZSxcclxuICAgICAgICAgICAgICAgIHJlcGVhdGFibGU6IGNoYXIgPT09ICcqJyB8fCBjaGFyID09PSAnKycsXHJcbiAgICAgICAgICAgICAgICBvcHRpb25hbDogY2hhciA9PT0gJyonIHx8IGNoYXIgPT09ICc/JyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjcmFzaCgnSW52YWxpZCBzdGF0ZSB0byBjb25zdW1lIGJ1ZmZlcicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBidWZmZXIgPSAnJztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZENoYXJUb0J1ZmZlcigpIHtcclxuICAgICAgICBidWZmZXIgKz0gY2hhcjtcclxuICAgIH1cclxuICAgIHdoaWxlIChpIDwgcGF0aC5sZW5ndGgpIHtcclxuICAgICAgICBjaGFyID0gcGF0aFtpKytdO1xyXG4gICAgICAgIGlmIChjaGFyID09PSAnXFxcXCcgJiYgc3RhdGUgIT09IDIgLyogUGFyYW1SZWdFeHAgKi8pIHtcclxuICAgICAgICAgICAgcHJldmlvdXNTdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgICAgICBzdGF0ZSA9IDQgLyogRXNjYXBlTmV4dCAqLztcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSAwIC8qIFN0YXRpYyAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnLycpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN1bWVCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZmluYWxpemVTZWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSAnOicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAxIC8qIFBhcmFtICovO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2hhclRvQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA0IC8qIEVzY2FwZU5leHQgKi86XHJcbiAgICAgICAgICAgICAgICBhZGRDaGFyVG9CdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDEgLyogUGFyYW0gKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJygnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAyIC8qIFBhcmFtUmVnRXhwICovO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoVkFMSURfUEFSQU1fUkUudGVzdChjaGFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZENoYXJUb0J1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMCAvKiBTdGF0aWMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyICE9PSAnKicgJiYgY2hhciAhPT0gJz8nICYmIGNoYXIgIT09ICcrJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMiAvKiBQYXJhbVJlZ0V4cCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGlzIGl0IHdvcnRoIGhhbmRsaW5nIG5lc3RlZCByZWdleHA/IGxpa2UgOnAoPzpwcmVmaXhfKFteL10rKV9zdWZmaXgpXHJcbiAgICAgICAgICAgICAgICAvLyBpdCBhbHJlYWR5IHdvcmtzIGJ5IGVzY2FwaW5nIHRoZSBjbG9zaW5nIClcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcGF0aHMuZXNtLmRldi8/cD1BQU1lSmJpQXdRRWNES2JBb0FBa1A2MFBHMlI2UUF2Z05hQTZBRkFDTTJBQnVRQkIjXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIHJlYWxseSBzb21ldGhpbmcgcGVvcGxlIG5lZWQgc2luY2UgeW91IGNhbiBhbHNvIHdyaXRlXHJcbiAgICAgICAgICAgICAgICAvLyAvcHJlZml4XzpwKClfc3VmZml4XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJyknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHRoZSBlc2NhcGVkIClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VzdG9tUmVbY3VzdG9tUmUubGVuZ3RoIC0gMV0gPT0gJ1xcXFwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSA9IGN1c3RvbVJlLnNsaWNlKDAsIC0xKSArIGNoYXI7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDMgLyogUGFyYW1SZWdFeHBFbmQgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21SZSArPSBjaGFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMyAvKiBQYXJhbVJlZ0V4cEVuZCAqLzpcclxuICAgICAgICAgICAgICAgIC8vIHNhbWUgYXMgZmluYWxpemluZyBhIHBhcmFtXHJcbiAgICAgICAgICAgICAgICBjb25zdW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IDAgLyogU3RhdGljICovO1xyXG4gICAgICAgICAgICAgICAgLy8gZ28gYmFjayBvbmUgY2hhcmFjdGVyIGlmIHdlIHdlcmUgbm90IG1vZGlmeWluZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09ICcqJyAmJiBjaGFyICE9PSAnPycgJiYgY2hhciAhPT0gJysnKVxyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgIGN1c3RvbVJlID0gJyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNyYXNoKCdVbmtub3duIHN0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc3RhdGUgPT09IDIgLyogUGFyYW1SZWdFeHAgKi8pXHJcbiAgICAgICAgY3Jhc2goYFVuZmluaXNoZWQgY3VzdG9tIFJlZ0V4cCBmb3IgcGFyYW0gXCIke2J1ZmZlcn1cImApO1xyXG4gICAgY29uc3VtZUJ1ZmZlcigpO1xyXG4gICAgZmluYWxpemVTZWdtZW50KCk7XHJcbiAgICAvLyB0b2tlbkNhY2hlLnNldChwYXRoLCB0b2tlbnMpXHJcbiAgICByZXR1cm4gdG9rZW5zO1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlUmVjb3JkTWF0Y2hlcihyZWNvcmQsIHBhcmVudCwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgcGFyc2VyID0gdG9rZW5zVG9QYXJzZXIodG9rZW5pemVQYXRoKHJlY29yZC5wYXRoKSwgb3B0aW9ucyk7XHJcbiAgICAvLyB3YXJuIGFnYWluc3QgcGFyYW1zIHdpdGggdGhlIHNhbWUgbmFtZVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nS2V5cyA9IG5ldyBTZXQoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBwYXJzZXIua2V5cykge1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdLZXlzLmhhcyhrZXkubmFtZSkpXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBGb3VuZCBkdXBsaWNhdGVkIHBhcmFtcyB3aXRoIG5hbWUgXCIke2tleS5uYW1lfVwiIGZvciBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIi4gT25seSB0aGUgbGFzdCBvbmUgd2lsbCBiZSBhdmFpbGFibGUgb24gXCIkcm91dGUucGFyYW1zXCIuYCk7XHJcbiAgICAgICAgICAgIGV4aXN0aW5nS2V5cy5hZGQoa2V5Lm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IG1hdGNoZXIgPSBhc3NpZ24ocGFyc2VyLCB7XHJcbiAgICAgICAgcmVjb3JkLFxyXG4gICAgICAgIHBhcmVudCxcclxuICAgICAgICAvLyB0aGVzZSBuZWVkcyB0byBiZSBwb3B1bGF0ZWQgYnkgdGhlIHBhcmVudFxyXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgICBhbGlhczogW10sXHJcbiAgICB9KTtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAvLyBib3RoIGFyZSBhbGlhc2VzIG9yIGJvdGggYXJlIG5vdCBhbGlhc2VzXHJcbiAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBtaXggdGhlbSBiZWNhdXNlIHRoZSBvcmRlciBpcyB1c2VkIHdoZW5cclxuICAgICAgICAvLyBwYXNzaW5nIG9yaWdpbmFsUmVjb3JkIGluIE1hdGNoZXIuYWRkUm91dGVcclxuICAgICAgICBpZiAoIW1hdGNoZXIucmVjb3JkLmFsaWFzT2YgPT09ICFwYXJlbnQucmVjb3JkLmFsaWFzT2YpXHJcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG1hdGNoZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hdGNoZXI7XHJcbn1cblxuLyoqXHJcbiAqIENyZWF0ZXMgYSBSb3V0ZXIgTWF0Y2hlci5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqIEBwYXJhbSByb3V0ZXMgLSBhcnJheSBvZiBpbml0aWFsIHJvdXRlc1xyXG4gKiBAcGFyYW0gZ2xvYmFsT3B0aW9ucyAtIGdsb2JhbCByb3V0ZSBvcHRpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJNYXRjaGVyKHJvdXRlcywgZ2xvYmFsT3B0aW9ucykge1xyXG4gICAgLy8gbm9ybWFsaXplZCBvcmRlcmVkIGFycmF5IG9mIG1hdGNoZXJzXHJcbiAgICBjb25zdCBtYXRjaGVycyA9IFtdO1xyXG4gICAgY29uc3QgbWF0Y2hlck1hcCA9IG5ldyBNYXAoKTtcclxuICAgIGdsb2JhbE9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoeyBzdHJpY3Q6IGZhbHNlLCBlbmQ6IHRydWUsIHNlbnNpdGl2ZTogZmFsc2UgfSwgZ2xvYmFsT3B0aW9ucyk7XHJcbiAgICBmdW5jdGlvbiBnZXRSZWNvcmRNYXRjaGVyKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2hlck1hcC5nZXQobmFtZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRSb3V0ZShyZWNvcmQsIHBhcmVudCwgb3JpZ2luYWxSZWNvcmQpIHtcclxuICAgICAgICAvLyB1c2VkIGxhdGVyIG9uIHRvIHJlbW92ZSBieSBuYW1lXHJcbiAgICAgICAgbGV0IGlzUm9vdEFkZCA9ICFvcmlnaW5hbFJlY29yZDtcclxuICAgICAgICBsZXQgbWFpbk5vcm1hbGl6ZWRSZWNvcmQgPSBub3JtYWxpemVSb3V0ZVJlY29yZChyZWNvcmQpO1xyXG4gICAgICAgIC8vIHdlIG1pZ2h0IGJlIHRoZSBjaGlsZCBvZiBhbiBhbGlhc1xyXG4gICAgICAgIG1haW5Ob3JtYWxpemVkUmVjb3JkLmFsaWFzT2YgPSBvcmlnaW5hbFJlY29yZCAmJiBvcmlnaW5hbFJlY29yZC5yZWNvcmQ7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhnbG9iYWxPcHRpb25zLCByZWNvcmQpO1xyXG4gICAgICAgIC8vIGdlbmVyYXRlIGFuIGFycmF5IG9mIHJlY29yZHMgdG8gY29ycmVjdGx5IGhhbmRsZSBhbGlhc2VzXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFJlY29yZHMgPSBbXHJcbiAgICAgICAgICAgIG1haW5Ob3JtYWxpemVkUmVjb3JkLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKCdhbGlhcycgaW4gcmVjb3JkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsaWFzZXMgPSB0eXBlb2YgcmVjb3JkLmFsaWFzID09PSAnc3RyaW5nJyA/IFtyZWNvcmQuYWxpYXNdIDogcmVjb3JkLmFsaWFzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRSZWNvcmRzLnB1c2goYXNzaWduKHt9LCBtYWluTm9ybWFsaXplZFJlY29yZCwge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIHVzIHRvIGhvbGQgYSBjb3B5IG9mIHRoZSBgY29tcG9uZW50c2Agb3B0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gdGhhdCBhc3luYyBjb21wb25lbnRzIGNhY2hlIGlzIGhvbGQgb24gdGhlIG9yaWdpbmFsIHJlY29yZFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IG9yaWdpbmFsUmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3JpZ2luYWxSZWNvcmQucmVjb3JkLmNvbXBvbmVudHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYWluTm9ybWFsaXplZFJlY29yZC5jb21wb25lbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGFsaWFzLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIG1pZ2h0IGJlIHRoZSBjaGlsZCBvZiBhbiBhbGlhc1xyXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzT2Y6IG9yaWdpbmFsUmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3JpZ2luYWxSZWNvcmQucmVjb3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbWFpbk5vcm1hbGl6ZWRSZWNvcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFsaWFzZXMgYXJlIGFsd2F5cyBvZiB0aGUgc2FtZSBraW5kIGFzIHRoZSBvcmlnaW5hbCBzaW5jZSB0aGV5XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgcmVjb3JkXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1hdGNoZXI7XHJcbiAgICAgICAgbGV0IG9yaWdpbmFsTWF0Y2hlcjtcclxuICAgICAgICBmb3IgKGNvbnN0IG5vcm1hbGl6ZWRSZWNvcmQgb2Ygbm9ybWFsaXplZFJlY29yZHMpIHtcclxuICAgICAgICAgICAgbGV0IHsgcGF0aCB9ID0gbm9ybWFsaXplZFJlY29yZDtcclxuICAgICAgICAgICAgLy8gQnVpbGQgdXAgdGhlIHBhdGggZm9yIG5lc3RlZCByb3V0ZXMgaWYgdGhlIGNoaWxkIGlzbid0IGFuIGFic29sdXRlXHJcbiAgICAgICAgICAgIC8vIHJvdXRlLiBPbmx5IGFkZCB0aGUgLyBkZWxpbWl0ZXIgaWYgdGhlIGNoaWxkIHBhdGggaXNuJ3QgZW1wdHkgYW5kIGlmIHRoZVxyXG4gICAgICAgICAgICAvLyBwYXJlbnQgcGF0aCBkb2Vzbid0IGhhdmUgYSB0cmFpbGluZyBzbGFzaFxyXG4gICAgICAgICAgICBpZiAocGFyZW50ICYmIHBhdGhbMF0gIT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnQucmVjb3JkLnBhdGg7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29ubmVjdGluZ1NsYXNoID0gcGFyZW50UGF0aFtwYXJlbnRQYXRoLmxlbmd0aCAtIDFdID09PSAnLycgPyAnJyA6ICcvJztcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRSZWNvcmQucGF0aCA9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LnJlY29yZC5wYXRoICsgKHBhdGggJiYgY29ubmVjdGluZ1NsYXNoICsgcGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBub3JtYWxpemVkUmVjb3JkLnBhdGggPT09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYXRjaCBhbGwgcm91dGVzIChcIipcIikgbXVzdCBub3cgYmUgZGVmaW5lZCB1c2luZyBhIHBhcmFtIHdpdGggYSBjdXN0b20gcmVnZXhwLlxcbicgK1xyXG4gICAgICAgICAgICAgICAgICAgICdTZWUgbW9yZSBhdCBodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vI3JlbW92ZWQtc3Rhci1vci1jYXRjaC1hbGwtcm91dGVzLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgb2JqZWN0IGJlZm9yZSBoYW5kIHNvIGl0IGNhbiBiZSBwYXNzZWQgdG8gY2hpbGRyZW5cclxuICAgICAgICAgICAgbWF0Y2hlciA9IGNyZWF0ZVJvdXRlUmVjb3JkTWF0Y2hlcihub3JtYWxpemVkUmVjb3JkLCBwYXJlbnQsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhcmVudCAmJiBwYXRoWzBdID09PSAnLycpXHJcbiAgICAgICAgICAgICAgICBjaGVja01pc3NpbmdQYXJhbXNJbkFic29sdXRlUGF0aChtYXRjaGVyLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBhcmUgYW4gYWxpYXMgd2UgbXVzdCB0ZWxsIHRoZSBvcmlnaW5hbCByZWNvcmQgdGhhdCB3ZSBleGlzdFxyXG4gICAgICAgICAgICAvLyBzbyB3ZSBjYW4gYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxSZWNvcmQpIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmVjb3JkLmFsaWFzLnB1c2gobWF0Y2hlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tTYW1lUGFyYW1zKG9yaWdpbmFsUmVjb3JkLCBtYXRjaGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgdGhlIGZpcnN0IHJlY29yZCBpcyB0aGUgb3JpZ2luYWwgYW5kIG90aGVycyBhcmUgYWxpYXNlc1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxNYXRjaGVyID0gb3JpZ2luYWxNYXRjaGVyIHx8IG1hdGNoZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxNYXRjaGVyICE9PSBtYXRjaGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWF0Y2hlci5hbGlhcy5wdXNoKG1hdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSByb3V0ZSBpZiBuYW1lZCBhbmQgb25seSBmb3IgdGhlIHRvcCByZWNvcmQgKGF2b2lkIGluIG5lc3RlZCBjYWxscylcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd29ya3MgYmVjYXVzZSB0aGUgb3JpZ2luYWwgcmVjb3JkIGlzIHRoZSBmaXJzdCBvbmVcclxuICAgICAgICAgICAgICAgIGlmIChpc1Jvb3RBZGQgJiYgcmVjb3JkLm5hbWUgJiYgIWlzQWxpYXNSZWNvcmQobWF0Y2hlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUm91dGUocmVjb3JkLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgnY2hpbGRyZW4nIGluIG1haW5Ob3JtYWxpemVkUmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRyZW4gPSBtYWluTm9ybWFsaXplZFJlY29yZC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRSb3V0ZShjaGlsZHJlbltpXSwgbWF0Y2hlciwgb3JpZ2luYWxSZWNvcmQgJiYgb3JpZ2luYWxSZWNvcmQuY2hpbGRyZW5baV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIHdhcyBubyBvcmlnaW5hbCByZWNvcmQsIHRoZW4gdGhlIGZpcnN0IG9uZSB3YXMgbm90IGFuIGFsaWFzIGFuZCBhbGxcclxuICAgICAgICAgICAgLy8gb3RoZXIgYWxpYXMgKGlmIGFueSkgbmVlZCB0byByZWZlcmVuY2UgdGhpcyByZWNvcmQgd2hlbiBhZGRpbmcgY2hpbGRyZW5cclxuICAgICAgICAgICAgb3JpZ2luYWxSZWNvcmQgPSBvcmlnaW5hbFJlY29yZCB8fCBtYXRjaGVyO1xyXG4gICAgICAgICAgICAvLyBUT0RPOiBhZGQgbm9ybWFsaXplZCByZWNvcmRzIGZvciBtb3JlIGZsZXhpYmlsaXR5XHJcbiAgICAgICAgICAgIC8vIGlmIChwYXJlbnQgJiYgaXNBbGlhc1JlY29yZChvcmlnaW5hbFJlY29yZCkpIHtcclxuICAgICAgICAgICAgLy8gICBwYXJlbnQuY2hpbGRyZW4ucHVzaChvcmlnaW5hbFJlY29yZClcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICBpbnNlcnRNYXRjaGVyKG1hdGNoZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3JpZ2luYWxNYXRjaGVyXHJcbiAgICAgICAgICAgID8gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gc2luY2Ugb3RoZXIgbWF0Y2hlcnMgYXJlIGFsaWFzZXMsIHRoZXkgc2hvdWxkIGJlIHJlbW92ZWQgYnkgdGhlIG9yaWdpbmFsIG1hdGNoZXJcclxuICAgICAgICAgICAgICAgIHJlbW92ZVJvdXRlKG9yaWdpbmFsTWF0Y2hlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgOiBub29wO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlUm91dGUobWF0Y2hlclJlZikge1xyXG4gICAgICAgIGlmIChpc1JvdXRlTmFtZShtYXRjaGVyUmVmKSkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVyID0gbWF0Y2hlck1hcC5nZXQobWF0Y2hlclJlZik7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyTWFwLmRlbGV0ZShtYXRjaGVyUmVmKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJzLnNwbGljZShtYXRjaGVycy5pbmRleE9mKG1hdGNoZXIpLCAxKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXIuY2hpbGRyZW4uZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVyLmFsaWFzLmZvckVhY2gocmVtb3ZlUm91dGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBtYXRjaGVycy5pbmRleE9mKG1hdGNoZXJSZWYpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVyUmVmLnJlY29yZC5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXJNYXAuZGVsZXRlKG1hdGNoZXJSZWYucmVjb3JkLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbWF0Y2hlclJlZi5jaGlsZHJlbi5mb3JFYWNoKHJlbW92ZVJvdXRlKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXJSZWYuYWxpYXMuZm9yRWFjaChyZW1vdmVSb3V0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaW5zZXJ0TWF0Y2hlcihtYXRjaGVyKSB7XHJcbiAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdpIGlzJywgeyBpIH0pXHJcbiAgICAgICAgd2hpbGUgKGkgPCBtYXRjaGVycy5sZW5ndGggJiZcclxuICAgICAgICAgICAgY29tcGFyZVBhdGhQYXJzZXJTY29yZShtYXRjaGVyLCBtYXRjaGVyc1tpXSkgPj0gMClcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdFTkQgaSBpcycsIHsgaSB9KVxyXG4gICAgICAgIC8vIHdoaWxlIChpIDwgbWF0Y2hlcnMubGVuZ3RoICYmIG1hdGNoZXIuc2NvcmUgPD0gbWF0Y2hlcnNbaV0uc2NvcmUpIGkrK1xyXG4gICAgICAgIG1hdGNoZXJzLnNwbGljZShpLCAwLCBtYXRjaGVyKTtcclxuICAgICAgICAvLyBvbmx5IGFkZCB0aGUgb3JpZ2luYWwgcmVjb3JkIHRvIHRoZSBuYW1lIG1hcFxyXG4gICAgICAgIGlmIChtYXRjaGVyLnJlY29yZC5uYW1lICYmICFpc0FsaWFzUmVjb3JkKG1hdGNoZXIpKVxyXG4gICAgICAgICAgICBtYXRjaGVyTWFwLnNldChtYXRjaGVyLnJlY29yZC5uYW1lLCBtYXRjaGVyKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29sdmUobG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbikge1xyXG4gICAgICAgIGxldCBtYXRjaGVyO1xyXG4gICAgICAgIGxldCBwYXJhbXMgPSB7fTtcclxuICAgICAgICBsZXQgcGF0aDtcclxuICAgICAgICBsZXQgbmFtZTtcclxuICAgICAgICBpZiAoJ25hbWUnIGluIGxvY2F0aW9uICYmIGxvY2F0aW9uLm5hbWUpIHtcclxuICAgICAgICAgICAgbWF0Y2hlciA9IG1hdGNoZXJNYXAuZ2V0KGxvY2F0aW9uLm5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoIW1hdGNoZXIpXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBjcmVhdGVSb3V0ZXJFcnJvcigxIC8qIE1BVENIRVJfTk9UX0ZPVU5EICovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIHBhcmFtcyA9IGFzc2lnbihcclxuICAgICAgICAgICAgLy8gcGFyYW1zRnJvbUxvY2F0aW9uIGlzIGEgbmV3IG9iamVjdFxyXG4gICAgICAgICAgICBwYXJhbXNGcm9tTG9jYXRpb24oY3VycmVudExvY2F0aW9uLnBhcmFtcywgXHJcbiAgICAgICAgICAgIC8vIG9ubHkga2VlcCBwYXJhbXMgdGhhdCBleGlzdCBpbiB0aGUgcmVzb2x2ZWQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gVE9ETzogb25seSBrZWVwIG9wdGlvbmFsIHBhcmFtcyBjb21pbmcgZnJvbSBhIHBhcmVudCByZWNvcmRcclxuICAgICAgICAgICAgbWF0Y2hlci5rZXlzLmZpbHRlcihrID0+ICFrLm9wdGlvbmFsKS5tYXAoayA9PiBrLm5hbWUpKSwgbG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICAgICAgLy8gdGhyb3dzIGlmIGNhbm5vdCBiZSBzdHJpbmdpZmllZFxyXG4gICAgICAgICAgICBwYXRoID0gbWF0Y2hlci5zdHJpbmdpZnkocGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJ3BhdGgnIGluIGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcmVzb2x2ZSB0aGUgcGF0aCB3aXRoIHRoZSBtYXRjaGVyIGFzIGl0IHdhcyBwcm92aWRlZFxyXG4gICAgICAgICAgICAvLyB0aGlzIGFsc28gYWxsb3dzIHRoZSB1c2VyIHRvIGNvbnRyb2wgdGhlIGVuY29kaW5nXHJcbiAgICAgICAgICAgIHBhdGggPSBsb2NhdGlvbi5wYXRoO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFwYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgVGhlIE1hdGNoZXIgY2Fubm90IHJlc29sdmUgcmVsYXRpdmUgcGF0aHMgYnV0IHJlY2VpdmVkIFwiJHtwYXRofVwiLiBVbmxlc3MgeW91IGRpcmVjdGx5IGNhbGxlZCBcXGBtYXRjaGVyLnJlc29sdmUoXCIke3BhdGh9XCIpXFxgLCB0aGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIHZ1ZS1yb3V0ZXIuIFBsZWFzZSBvcGVuIGFuIGlzc3VlIGF0IGh0dHBzOi8vbmV3LWlzc3VlLnZ1ZWpzLm9yZy8/cmVwbz12dWVqcy92dWUtcm91dGVyLW5leHQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF0Y2hlciA9IG1hdGNoZXJzLmZpbmQobSA9PiBtLnJlLnRlc3QocGF0aCkpO1xyXG4gICAgICAgICAgICAvLyBtYXRjaGVyIHNob3VsZCBoYXZlIGEgdmFsdWUgYWZ0ZXIgdGhlIGxvb3BcclxuICAgICAgICAgICAgaWYgKG1hdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGRldiB3YXJuaW5nIG9mIHVudXNlZCBwYXJhbXMgaWYgcHJvdmlkZWRcclxuICAgICAgICAgICAgICAgIC8vIHdlIGtub3cgdGhlIG1hdGNoZXIgd29ya3MgYmVjYXVzZSB3ZSB0ZXN0ZWQgdGhlIHJlZ2V4cFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zID0gbWF0Y2hlci5wYXJzZShwYXRoKTtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBtYXRjaGVyLnJlY29yZC5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGxvY2F0aW9uIGlzIGEgcmVsYXRpdmUgcGF0aFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbWF0Y2ggYnkgbmFtZSBvciBwYXRoIG9mIGN1cnJlbnQgcm91dGVcclxuICAgICAgICAgICAgbWF0Y2hlciA9IGN1cnJlbnRMb2NhdGlvbi5uYW1lXHJcbiAgICAgICAgICAgICAgICA/IG1hdGNoZXJNYXAuZ2V0KGN1cnJlbnRMb2NhdGlvbi5uYW1lKVxyXG4gICAgICAgICAgICAgICAgOiBtYXRjaGVycy5maW5kKG0gPT4gbS5yZS50ZXN0KGN1cnJlbnRMb2NhdGlvbi5wYXRoKSk7XHJcbiAgICAgICAgICAgIGlmICghbWF0Y2hlcilcclxuICAgICAgICAgICAgICAgIHRocm93IGNyZWF0ZVJvdXRlckVycm9yKDEgLyogTUFUQ0hFUl9OT1RfRk9VTkQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TG9jYXRpb24sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbmFtZSA9IG1hdGNoZXIucmVjb3JkLm5hbWU7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHdlIGFyZSBuYXZpZ2F0aW5nIHRvIHRoZSBzYW1lIGxvY2F0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHBpY2sgdGhlXHJcbiAgICAgICAgICAgIC8vIHBhcmFtcyBsaWtlIHdoZW4gYG5hbWVgIGlzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIHBhcmFtcyA9IGFzc2lnbih7fSwgY3VycmVudExvY2F0aW9uLnBhcmFtcywgbG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICAgICAgcGF0aCA9IG1hdGNoZXIuc3RyaW5naWZ5KHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1hdGNoZWQgPSBbXTtcclxuICAgICAgICBsZXQgcGFyZW50TWF0Y2hlciA9IG1hdGNoZXI7XHJcbiAgICAgICAgd2hpbGUgKHBhcmVudE1hdGNoZXIpIHtcclxuICAgICAgICAgICAgLy8gcmV2ZXJzZWQgb3JkZXIgc28gcGFyZW50cyBhcmUgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICBtYXRjaGVkLnVuc2hpZnQocGFyZW50TWF0Y2hlci5yZWNvcmQpO1xyXG4gICAgICAgICAgICBwYXJlbnRNYXRjaGVyID0gcGFyZW50TWF0Y2hlci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHBhdGgsXHJcbiAgICAgICAgICAgIHBhcmFtcyxcclxuICAgICAgICAgICAgbWF0Y2hlZCxcclxuICAgICAgICAgICAgbWV0YTogbWVyZ2VNZXRhRmllbGRzKG1hdGNoZWQpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvLyBhZGQgaW5pdGlhbCByb3V0ZXNcclxuICAgIHJvdXRlcy5mb3JFYWNoKHJvdXRlID0+IGFkZFJvdXRlKHJvdXRlKSk7XHJcbiAgICByZXR1cm4geyBhZGRSb3V0ZSwgcmVzb2x2ZSwgcmVtb3ZlUm91dGUsIGdldFJvdXRlcywgZ2V0UmVjb3JkTWF0Y2hlciB9O1xyXG59XHJcbmZ1bmN0aW9uIHBhcmFtc0Zyb21Mb2NhdGlvbihwYXJhbXMsIGtleXMpIHtcclxuICAgIGxldCBuZXdQYXJhbXMgPSB7fTtcclxuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgaWYgKGtleSBpbiBwYXJhbXMpXHJcbiAgICAgICAgICAgIG5ld1BhcmFtc1trZXldID0gcGFyYW1zW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3UGFyYW1zO1xyXG59XHJcbi8qKlxyXG4gKiBOb3JtYWxpemVzIGEgUm91dGVSZWNvcmRSYXcuIENyZWF0ZXMgYSBjb3B5XHJcbiAqXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICogQHJldHVybnMgdGhlIG5vcm1hbGl6ZWQgdmVyc2lvblxyXG4gKi9cclxuZnVuY3Rpb24gbm9ybWFsaXplUm91dGVSZWNvcmQocmVjb3JkKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhdGg6IHJlY29yZC5wYXRoLFxyXG4gICAgICAgIHJlZGlyZWN0OiByZWNvcmQucmVkaXJlY3QsXHJcbiAgICAgICAgbmFtZTogcmVjb3JkLm5hbWUsXHJcbiAgICAgICAgbWV0YTogcmVjb3JkLm1ldGEgfHwge30sXHJcbiAgICAgICAgYWxpYXNPZjogdW5kZWZpbmVkLFxyXG4gICAgICAgIGJlZm9yZUVudGVyOiByZWNvcmQuYmVmb3JlRW50ZXIsXHJcbiAgICAgICAgcHJvcHM6IG5vcm1hbGl6ZVJlY29yZFByb3BzKHJlY29yZCksXHJcbiAgICAgICAgY2hpbGRyZW46IHJlY29yZC5jaGlsZHJlbiB8fCBbXSxcclxuICAgICAgICBpbnN0YW5jZXM6IHt9LFxyXG4gICAgICAgIGxlYXZlR3VhcmRzOiBuZXcgU2V0KCksXHJcbiAgICAgICAgdXBkYXRlR3VhcmRzOiBuZXcgU2V0KCksXHJcbiAgICAgICAgZW50ZXJDYWxsYmFja3M6IHt9LFxyXG4gICAgICAgIGNvbXBvbmVudHM6ICdjb21wb25lbnRzJyBpbiByZWNvcmRcclxuICAgICAgICAgICAgPyByZWNvcmQuY29tcG9uZW50cyB8fCB7fVxyXG4gICAgICAgICAgICA6IHsgZGVmYXVsdDogcmVjb3JkLmNvbXBvbmVudCB9LFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIHRoZSBvcHRpb25hbCBgcHJvcHNgIGluIGEgcmVjb3JkIHRvIGFsd2F5cyBiZSBhbiBvYmplY3Qgc2ltaWxhciB0b1xyXG4gKiBjb21wb25lbnRzLiBBbHNvIGFjY2VwdCBhIGJvb2xlYW4gZm9yIGNvbXBvbmVudHMuXHJcbiAqIEBwYXJhbSByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVJlY29yZFByb3BzKHJlY29yZCkge1xyXG4gICAgY29uc3QgcHJvcHNPYmplY3QgPSB7fTtcclxuICAgIC8vIHByb3BzIGRvZXMgbm90IGV4aXN0IG9uIHJlZGlyZWN0IHJlY29yZHMgYnV0IHdlIGNhbiBzZXQgZmFsc2UgZGlyZWN0bHlcclxuICAgIGNvbnN0IHByb3BzID0gcmVjb3JkLnByb3BzIHx8IGZhbHNlO1xyXG4gICAgaWYgKCdjb21wb25lbnQnIGluIHJlY29yZCkge1xyXG4gICAgICAgIHByb3BzT2JqZWN0LmRlZmF1bHQgPSBwcm9wcztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIE5PVEU6IHdlIGNvdWxkIGFsc28gYWxsb3cgYSBmdW5jdGlvbiB0byBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGNvbXBvbmVudC5cclxuICAgICAgICAvLyBXb3VsZCBuZWVkIHVzZXIgZmVlZGJhY2sgZm9yIHVzZSBjYXNlc1xyXG4gICAgICAgIGZvciAobGV0IG5hbWUgaW4gcmVjb3JkLmNvbXBvbmVudHMpXHJcbiAgICAgICAgICAgIHByb3BzT2JqZWN0W25hbWVdID0gdHlwZW9mIHByb3BzID09PSAnYm9vbGVhbicgPyBwcm9wcyA6IHByb3BzW25hbWVdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzT2JqZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSByZWNvcmQgb3IgYW55IG9mIGl0cyBwYXJlbnQgaXMgYW4gYWxpYXNcclxuICogQHBhcmFtIHJlY29yZFxyXG4gKi9cclxuZnVuY3Rpb24gaXNBbGlhc1JlY29yZChyZWNvcmQpIHtcclxuICAgIHdoaWxlIChyZWNvcmQpIHtcclxuICAgICAgICBpZiAocmVjb3JkLnJlY29yZC5hbGlhc09mKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbi8qKlxyXG4gKiBNZXJnZSBtZXRhIGZpZWxkcyBvZiBhbiBhcnJheSBvZiByZWNvcmRzXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXRjaGVkIC0gYXJyYXkgb2YgbWF0Y2hlZCByZWNvcmRzXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZU1ldGFGaWVsZHMobWF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIG1hdGNoZWQucmVkdWNlKChtZXRhLCByZWNvcmQpID0+IGFzc2lnbihtZXRhLCByZWNvcmQubWV0YSksIHt9KTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMoZGVmYXVsdHMsIHBhcnRpYWxPcHRpb25zKSB7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xyXG4gICAgZm9yIChsZXQga2V5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgb3B0aW9uc1trZXldID1cclxuICAgICAgICAgICAga2V5IGluIHBhcnRpYWxPcHRpb25zID8gcGFydGlhbE9wdGlvbnNba2V5XSA6IGRlZmF1bHRzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVQYXJhbShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEubmFtZSA9PT0gYi5uYW1lICYmXHJcbiAgICAgICAgYS5vcHRpb25hbCA9PT0gYi5vcHRpb25hbCAmJlxyXG4gICAgICAgIGEucmVwZWF0YWJsZSA9PT0gYi5yZXBlYXRhYmxlKTtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgYSBwYXRoIGFuZCBpdHMgYWxpYXMgaGF2ZSB0aGUgc2FtZSByZXF1aXJlZCBwYXJhbXNcclxuICpcclxuICogQHBhcmFtIGEgLSBvcmlnaW5hbCByZWNvcmRcclxuICogQHBhcmFtIGIgLSBhbGlhcyByZWNvcmRcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrU2FtZVBhcmFtcyhhLCBiKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgb2YgYS5rZXlzKSB7XHJcbiAgICAgICAgaWYgKCFrZXkub3B0aW9uYWwgJiYgIWIua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgc2hvdWxkIGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBrZXkgb2YgYi5rZXlzKSB7XHJcbiAgICAgICAgaWYgKCFrZXkub3B0aW9uYWwgJiYgIWEua2V5cy5maW5kKGlzU2FtZVBhcmFtLmJpbmQobnVsbCwga2V5KSkpXHJcbiAgICAgICAgICAgIHJldHVybiB3YXJuKGBBbGlhcyBcIiR7Yi5yZWNvcmQucGF0aH1cIiBhbmQgdGhlIG9yaWdpbmFsIHJlY29yZDogXCIke2EucmVjb3JkLnBhdGh9XCIgc2hvdWxkIGhhdmUgdGhlIGV4YWN0IHNhbWUgcGFyYW0gbmFtZWQgXCIke2tleS5uYW1lfVwiYCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2hlY2tNaXNzaW5nUGFyYW1zSW5BYnNvbHV0ZVBhdGgocmVjb3JkLCBwYXJlbnQpIHtcclxuICAgIGZvciAobGV0IGtleSBvZiBwYXJlbnQua2V5cykge1xyXG4gICAgICAgIGlmICghcmVjb3JkLmtleXMuZmluZChpc1NhbWVQYXJhbS5iaW5kKG51bGwsIGtleSkpKVxyXG4gICAgICAgICAgICByZXR1cm4gd2FybihgQWJzb2x1dGUgcGF0aCBcIiR7cmVjb3JkLnJlY29yZC5wYXRofVwiIHNob3VsZCBoYXZlIHRoZSBleGFjdCBzYW1lIHBhcmFtIG5hbWVkIFwiJHtrZXkubmFtZX1cIiBhcyBpdHMgcGFyZW50IFwiJHtwYXJlbnQucmVjb3JkLnBhdGh9XCIuYCk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEVuY29kaW5nIFJ1bGVzIOKQoyA9IFNwYWNlIFBhdGg6IOKQoyBcIiA8ID4gIyA/IHsgfSBRdWVyeTog4pCjIFwiIDwgPiAjICYgPSBIYXNoOiDikKMgXCJcclxuICogPCA+IGBcclxuICpcclxuICogT24gdG9wIG9mIHRoYXQsIHRoZSBSRkMzOTg2IChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTIuMilcclxuICogZGVmaW5lcyBzb21lIGV4dHJhIGNoYXJhY3RlcnMgdG8gYmUgZW5jb2RlZC4gTW9zdCBicm93c2VycyBkbyBub3QgZW5jb2RlIHRoZW1cclxuICogaW4gZW5jb2RlVVJJIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvdXJsL2lzc3Vlcy8zNjksIHNvIGl0IG1heSBiZSBzYWZlciB0b1xyXG4gKiBhbHNvIGVuY29kZSBgIScoKSpgLiBMZWF2aW5nIHVuZW5jb2RlZCBvbmx5IEFTQ0lJIGFscGhhbnVtZXJpYyhgYS16QS1aMC05YClcclxuICogcGx1cyBgLS5ffmAuIFRoaXMgZXh0cmEgc2FmZXR5IHNob3VsZCBiZSBhcHBsaWVkIHRvIHF1ZXJ5IGJ5IHBhdGNoaW5nIHRoZVxyXG4gKiBzdHJpbmcgcmV0dXJuZWQgYnkgZW5jb2RlVVJJQ29tcG9uZW50IGVuY29kZVVSSSBhbHNvIGVuY29kZXMgYFtcXF1eYC4gYFxcYFxyXG4gKiBzaG91bGQgYmUgZW5jb2RlZCB0byBhdm9pZCBhbWJpZ3VpdHkuIEJyb3dzZXJzIChJRSwgRkYsIEMpIHRyYW5zZm9ybSBhIGBcXGBcclxuICogaW50byBhIGAvYCBpZiBkaXJlY3RseSB0eXBlZCBpbi4gVGhlIF9iYWNrdGlja18gKGBgYGBgKSBzaG91bGQgYWxzbyBiZVxyXG4gKiBlbmNvZGVkIGV2ZXJ5d2hlcmUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGxpa2UgRkYgZW5jb2RlIGl0IHdoZW4gZGlyZWN0bHlcclxuICogd3JpdHRlbiB3aGlsZSBvdGhlcnMgZG9uJ3QuIFNhZmFyaSBhbmQgSUUgZG9uJ3QgZW5jb2RlIGBgXCI8Pnt9YGBgIGluIGhhc2guXHJcbiAqL1xyXG4vLyBjb25zdCBFWFRSQV9SRVNFUlZFRF9SRSA9IC9bIScoKSpdL2dcclxuLy8gY29uc3QgZW5jb2RlUmVzZXJ2ZWRSZXBsYWNlciA9IChjOiBzdHJpbmcpID0+ICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNilcclxuY29uc3QgSEFTSF9SRSA9IC8jL2c7IC8vICUyM1xyXG5jb25zdCBBTVBFUlNBTkRfUkUgPSAvJi9nOyAvLyAlMjZcclxuY29uc3QgU0xBU0hfUkUgPSAvXFwvL2c7IC8vICUyRlxyXG5jb25zdCBFUVVBTF9SRSA9IC89L2c7IC8vICUzRFxyXG5jb25zdCBJTV9SRSA9IC9cXD8vZzsgLy8gJTNGXHJcbmNvbnN0IFBMVVNfUkUgPSAvXFwrL2c7IC8vICUyQlxyXG4vKipcclxuICogTk9URTogSXQncyBub3QgY2xlYXIgdG8gbWUgaWYgd2Ugc2hvdWxkIGVuY29kZSB0aGUgKyBzeW1ib2wgaW4gcXVlcmllcywgaXRcclxuICogc2VlbXMgdG8gYmUgbGVzcyBmbGV4aWJsZSB0aGFuIG5vdCBkb2luZyBzbyBhbmQgSSBjYW4ndCBmaW5kIG91dCB0aGUgbGVnYWN5XHJcbiAqIHN5c3RlbXMgcmVxdWlyaW5nIHRoaXMgZm9yIHJlZ3VsYXIgcmVxdWVzdHMgbGlrZSB0ZXh0L2h0bWwuIEluIHRoZSBzdGFuZGFyZCxcclxuICogdGhlIGVuY29kaW5nIG9mIHRoZSBwbHVzIGNoYXJhY3RlciBpcyBvbmx5IG1lbnRpb25lZCBmb3JcclxuICogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXHJcbiAqIChodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybGVuY29kZWQtcGFyc2luZykgYW5kIG1vc3QgYnJvd3NlcnMgc2VlbXMgbG9cclxuICogbGVhdmUgdGhlIHBsdXMgY2hhcmFjdGVyIGFzIGlzIGluIHF1ZXJpZXMuIFRvIGJlIG1vcmUgZmxleGlibGUsIHdlIGFsbG93IHRoZVxyXG4gKiBwbHVzIGNoYXJhY3RlciBvbiB0aGUgcXVlcnkgYnV0IGl0IGNhbiBhbHNvIGJlIG1hbnVhbGx5IGVuY29kZWQgYnkgdGhlIHVzZXIuXHJcbiAqXHJcbiAqIFJlc291cmNlczpcclxuICogLSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybGVuY29kZWQtcGFyc2luZ1xyXG4gKiAtIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE2MzQyNzEvdXJsLWVuY29kaW5nLXRoZS1zcGFjZS1jaGFyYWN0ZXItb3ItMjBcclxuICovXHJcbmNvbnN0IEVOQ19CUkFDS0VUX09QRU5fUkUgPSAvJTVCL2c7IC8vIFtcclxuY29uc3QgRU5DX0JSQUNLRVRfQ0xPU0VfUkUgPSAvJTVEL2c7IC8vIF1cclxuY29uc3QgRU5DX0NBUkVUX1JFID0gLyU1RS9nOyAvLyBeXHJcbmNvbnN0IEVOQ19CQUNLVElDS19SRSA9IC8lNjAvZzsgLy8gYFxyXG5jb25zdCBFTkNfQ1VSTFlfT1BFTl9SRSA9IC8lN0IvZzsgLy8ge1xyXG5jb25zdCBFTkNfUElQRV9SRSA9IC8lN0MvZzsgLy8gfFxyXG5jb25zdCBFTkNfQ1VSTFlfQ0xPU0VfUkUgPSAvJTdEL2c7IC8vIH1cclxuY29uc3QgRU5DX1NQQUNFX1JFID0gLyUyMC9nOyAvLyB9XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBvbiB0aGUgcGF0aCwgc2VhcmNoIGFuZCBoYXNoXHJcbiAqIHNlY3Rpb25zIG9mIHRoZSBVUkwuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGNvbW1vbkVuY29kZSh0ZXh0KSB7XHJcbiAgICByZXR1cm4gZW5jb2RlVVJJKCcnICsgdGV4dClcclxuICAgICAgICAucmVwbGFjZShFTkNfUElQRV9SRSwgJ3wnKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19CUkFDS0VUX09QRU5fUkUsICdbJylcclxuICAgICAgICAucmVwbGFjZShFTkNfQlJBQ0tFVF9DTE9TRV9SRSwgJ10nKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIGhhc2ggc2VjdGlvbiBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZUhhc2godGV4dCkge1xyXG4gICAgcmV0dXJuIGNvbW1vbkVuY29kZSh0ZXh0KVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19DVVJMWV9PUEVOX1JFLCAneycpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX0NMT1NFX1JFLCAnfScpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NBUkVUX1JFLCAnXicpO1xyXG59XHJcbi8qKlxyXG4gKiBFbmNvZGUgY2hhcmFjdGVycyB0aGF0IG5lZWQgdG8gYmUgZW5jb2RlZCBxdWVyeSB2YWx1ZXMgb24gdGhlIHF1ZXJ5XHJcbiAqIHNlY3Rpb24gb2YgdGhlIFVSTC5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZW5jb2RlXHJcbiAqIEByZXR1cm5zIGVuY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBlbmNvZGVRdWVyeVZhbHVlKHRleHQpIHtcclxuICAgIHJldHVybiAoY29tbW9uRW5jb2RlKHRleHQpXHJcbiAgICAgICAgLy8gRW5jb2RlIHRoZSBzcGFjZSBhcyArLCBlbmNvZGUgdGhlICsgdG8gZGlmZmVyZW50aWF0ZSBpdCBmcm9tIHRoZSBzcGFjZVxyXG4gICAgICAgIC5yZXBsYWNlKFBMVVNfUkUsICclMkInKVxyXG4gICAgICAgIC5yZXBsYWNlKEVOQ19TUEFDRV9SRSwgJysnKVxyXG4gICAgICAgIC5yZXBsYWNlKEhBU0hfUkUsICclMjMnKVxyXG4gICAgICAgIC5yZXBsYWNlKEFNUEVSU0FORF9SRSwgJyUyNicpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0JBQ0tUSUNLX1JFLCAnYCcpXHJcbiAgICAgICAgLnJlcGxhY2UoRU5DX0NVUkxZX09QRU5fUkUsICd7JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ1VSTFlfQ0xPU0VfUkUsICd9JylcclxuICAgICAgICAucmVwbGFjZShFTkNfQ0FSRVRfUkUsICdeJykpO1xyXG59XHJcbi8qKlxyXG4gKiBMaWtlIGBlbmNvZGVRdWVyeVZhbHVlYCBidXQgYWxzbyBlbmNvZGVzIHRoZSBgPWAgY2hhcmFjdGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVF1ZXJ5S2V5KHRleHQpIHtcclxuICAgIHJldHVybiBlbmNvZGVRdWVyeVZhbHVlKHRleHQpLnJlcGxhY2UoRVFVQUxfUkUsICclM0QnKTtcclxufVxyXG4vKipcclxuICogRW5jb2RlIGNoYXJhY3RlcnMgdGhhdCBuZWVkIHRvIGJlIGVuY29kZWQgb24gdGhlIHBhdGggc2VjdGlvbiBvZiB0aGUgVVJMLlxyXG4gKlxyXG4gKiBAcGFyYW0gdGV4dCAtIHN0cmluZyB0byBlbmNvZGVcclxuICogQHJldHVybnMgZW5jb2RlZCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGVuY29kZVBhdGgodGV4dCkge1xyXG4gICAgcmV0dXJuIGNvbW1vbkVuY29kZSh0ZXh0KS5yZXBsYWNlKEhBU0hfUkUsICclMjMnKS5yZXBsYWNlKElNX1JFLCAnJTNGJyk7XHJcbn1cclxuLyoqXHJcbiAqIEVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgbmVlZCB0byBiZSBlbmNvZGVkIG9uIHRoZSBwYXRoIHNlY3Rpb24gb2YgdGhlIFVSTCBhcyBhXHJcbiAqIHBhcmFtLiBUaGlzIGZ1bmN0aW9uIGVuY29kZXMgZXZlcnl0aGluZyB7QGxpbmsgZW5jb2RlUGF0aH0gZG9lcyBwbHVzIHRoZVxyXG4gKiBzbGFzaCAoYC9gKSBjaGFyYWN0ZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB0ZXh0IC0gc3RyaW5nIHRvIGVuY29kZVxyXG4gKiBAcmV0dXJucyBlbmNvZGVkIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZW5jb2RlUGFyYW0odGV4dCkge1xyXG4gICAgcmV0dXJuIGVuY29kZVBhdGgodGV4dCkucmVwbGFjZShTTEFTSF9SRSwgJyUyRicpO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGUgdGV4dCB1c2luZyBgZGVjb2RlVVJJQ29tcG9uZW50YC4gUmV0dXJucyB0aGUgb3JpZ2luYWwgdGV4dCBpZiBpdFxyXG4gKiBmYWlscy5cclxuICpcclxuICogQHBhcmFtIHRleHQgLSBzdHJpbmcgdG8gZGVjb2RlXHJcbiAqIEByZXR1cm5zIGRlY29kZWQgc3RyaW5nXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWNvZGUodGV4dCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KCcnICsgdGV4dCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYEVycm9yIGRlY29kaW5nIFwiJHt0ZXh0fVwiLiBVc2luZyBvcmlnaW5hbCB2YWx1ZWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnICsgdGV4dDtcclxufVxuXG4vKipcclxuICogVHJhbnNmb3JtcyBhIHF1ZXJ5U3RyaW5nIGludG8gYSB7QGxpbmsgTG9jYXRpb25RdWVyeX0gb2JqZWN0LiBBY2NlcHQgYm90aCwgYVxyXG4gKiB2ZXJzaW9uIHdpdGggdGhlIGxlYWRpbmcgYD9gIGFuZCB3aXRob3V0IFNob3VsZCB3b3JrIGFzIFVSTFNlYXJjaFBhcmFtc1xyXG5cbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gc2VhcmNoIC0gc2VhcmNoIHN0cmluZyB0byBwYXJzZVxyXG4gKiBAcmV0dXJucyBhIHF1ZXJ5IG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VRdWVyeShzZWFyY2gpIHtcclxuICAgIGNvbnN0IHF1ZXJ5ID0ge307XHJcbiAgICAvLyBhdm9pZCBjcmVhdGluZyBhbiBvYmplY3Qgd2l0aCBhbiBlbXB0eSBrZXkgYW5kIGVtcHR5IHZhbHVlXHJcbiAgICAvLyBiZWNhdXNlIG9mIHNwbGl0KCcmJylcclxuICAgIGlmIChzZWFyY2ggPT09ICcnIHx8IHNlYXJjaCA9PT0gJz8nKVxyXG4gICAgICAgIHJldHVybiBxdWVyeTtcclxuICAgIGNvbnN0IGhhc0xlYWRpbmdJTSA9IHNlYXJjaFswXSA9PT0gJz8nO1xyXG4gICAgY29uc3Qgc2VhcmNoUGFyYW1zID0gKGhhc0xlYWRpbmdJTSA/IHNlYXJjaC5zbGljZSgxKSA6IHNlYXJjaCkuc3BsaXQoJyYnKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgLy8gcHJlIGRlY29kZSB0aGUgKyBpbnRvIHNwYWNlXHJcbiAgICAgICAgY29uc3Qgc2VhcmNoUGFyYW0gPSBzZWFyY2hQYXJhbXNbaV0ucmVwbGFjZShQTFVTX1JFLCAnICcpO1xyXG4gICAgICAgIC8vIGFsbG93IHRoZSA9IGNoYXJhY3RlclxyXG4gICAgICAgIGxldCBlcVBvcyA9IHNlYXJjaFBhcmFtLmluZGV4T2YoJz0nKTtcclxuICAgICAgICBsZXQga2V5ID0gZGVjb2RlKGVxUG9zIDwgMCA/IHNlYXJjaFBhcmFtIDogc2VhcmNoUGFyYW0uc2xpY2UoMCwgZXFQb3MpKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBlcVBvcyA8IDAgPyBudWxsIDogZGVjb2RlKHNlYXJjaFBhcmFtLnNsaWNlKGVxUG9zICsgMSkpO1xyXG4gICAgICAgIGlmIChrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gYW4gZXh0cmEgdmFyaWFibGUgZm9yIHRzIHR5cGVzXHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gcXVlcnlba2V5XSA9IFtjdXJyZW50VmFsdWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXJ5W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVlcnk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmluZ2lmaWVzIGEge0BsaW5rIExvY2F0aW9uUXVlcnlSYXd9IG9iamVjdC4gTGlrZSBgVVJMU2VhcmNoUGFyYW1zYCwgaXRcclxuICogZG9lc24ndCBwcmVwZW5kIGEgYD9gXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKlxyXG4gKiBAcGFyYW0gcXVlcnkgLSBxdWVyeSBvYmplY3QgdG8gc3RyaW5naWZ5XHJcbiAqIEByZXR1cm5zIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBxdWVyeSB3aXRob3V0IHRoZSBsZWFkaW5nIGA/YFxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkocXVlcnkpIHtcclxuICAgIGxldCBzZWFyY2ggPSAnJztcclxuICAgIGZvciAobGV0IGtleSBpbiBxdWVyeSkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gcXVlcnlba2V5XTtcclxuICAgICAgICBrZXkgPSBlbmNvZGVRdWVyeUtleShrZXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgbnVsbCBhZGRzIHRoZSB2YWx1ZVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoICs9IChzZWFyY2gubGVuZ3RoID8gJyYnIDogJycpICsga2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBrZWVwIG51bGwgdmFsdWVzXHJcbiAgICAgICAgbGV0IHZhbHVlcyA9IEFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gdiAmJiBlbmNvZGVRdWVyeVZhbHVlKHYpKVxyXG4gICAgICAgICAgICA6IFt2YWx1ZSAmJiBlbmNvZGVRdWVyeVZhbHVlKHZhbHVlKV07XHJcbiAgICAgICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAvLyBza2lwIHVuZGVmaW5lZCB2YWx1ZXMgaW4gYXJyYXlzIGFzIGlmIHRoZXkgd2VyZSBub3QgcHJlc2VudFxyXG4gICAgICAgICAgICAvLyBzbWFsbGVyIGNvZGUgdGhhbiB1c2luZyBmaWx0ZXJcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgYXBwZW5kICYgd2l0aCBub24tZW1wdHkgc2VhcmNoXHJcbiAgICAgICAgICAgICAgICBzZWFyY2ggKz0gKHNlYXJjaC5sZW5ndGggPyAnJicgOiAnJykgKyBrZXk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBzZWFyY2ggKz0gJz0nICsgdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzZWFyY2g7XHJcbn1cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgYSB7QGxpbmsgTG9jYXRpb25RdWVyeVJhd30gaW50byBhIHtAbGluayBMb2NhdGlvblF1ZXJ5fSBieSBjYXN0aW5nXHJcbiAqIG51bWJlcnMgaW50byBzdHJpbmdzLCByZW1vdmluZyBrZXlzIHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlIGFuZCByZXBsYWNpbmdcclxuICogdW5kZWZpbmVkIHdpdGggbnVsbCBpbiBhcnJheXNcclxuICpcclxuICogQHBhcmFtIHF1ZXJ5IC0gcXVlcnkgb2JqZWN0IHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyBhIG5vcm1hbGl6ZWQgcXVlcnkgb2JqZWN0XHJcbiAqL1xyXG5mdW5jdGlvbiBub3JtYWxpemVRdWVyeShxdWVyeSkge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZFF1ZXJ5ID0ge307XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gcXVlcnkpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBxdWVyeVtrZXldO1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRRdWVyeVtrZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgID8gdmFsdWUubWFwKHYgPT4gKHYgPT0gbnVsbCA/IG51bGwgOiAnJyArIHYpKVxyXG4gICAgICAgICAgICAgICAgOiB2YWx1ZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIDogJycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZFF1ZXJ5O1xyXG59XG5cbi8qKlxyXG4gKiBDcmVhdGUgYSBsaXN0IG9mIGNhbGxiYWNrcyB0aGF0IGNhbiBiZSByZXNldC4gVXNlZCB0byBjcmVhdGUgYmVmb3JlIGFuZCBhZnRlciBuYXZpZ2F0aW9uIGd1YXJkcyBsaXN0XHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDYWxsYmFja3MoKSB7XHJcbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcclxuICAgIGZ1bmN0aW9uIGFkZChoYW5kbGVyKSB7XHJcbiAgICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gaGFuZGxlcnMuaW5kZXhPZihoYW5kbGVyKTtcclxuICAgICAgICAgICAgaWYgKGkgPiAtMSlcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVzZXQoKSB7XHJcbiAgICAgICAgaGFuZGxlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYWRkLFxyXG4gICAgICAgIGxpc3Q6ICgpID0+IGhhbmRsZXJzLFxyXG4gICAgICAgIHJlc2V0LFxyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiByZWdpc3Rlckd1YXJkKHJlY29yZCwgbmFtZSwgZ3VhcmQpIHtcclxuICAgIGNvbnN0IHJlbW92ZUZyb21MaXN0ID0gKCkgPT4ge1xyXG4gICAgICAgIHJlY29yZFtuYW1lXS5kZWxldGUoZ3VhcmQpO1xyXG4gICAgfTtcclxuICAgIG9uVW5tb3VudGVkKHJlbW92ZUZyb21MaXN0KTtcclxuICAgIG9uRGVhY3RpdmF0ZWQocmVtb3ZlRnJvbUxpc3QpO1xyXG4gICAgb25BY3RpdmF0ZWQoKCkgPT4ge1xyXG4gICAgICAgIHJlY29yZFtuYW1lXS5hZGQoZ3VhcmQpO1xyXG4gICAgfSk7XHJcbiAgICByZWNvcmRbbmFtZV0uYWRkKGd1YXJkKTtcclxufVxyXG4vKipcclxuICogQWRkIGEgbmF2aWdhdGlvbiBndWFyZCB0aGF0IHRyaWdnZXJzIHdoZW5ldmVyIHRoZSBjb21wb25lbnQgZm9yIHRoZSBjdXJyZW50XHJcbiAqIGxvY2F0aW9uIGlzIGFib3V0IHRvIGJlIGxlZnQuIFNpbWlsYXIgdG8ge0BsaW5rIGJlZm9yZVJvdXRlTGVhdmV9IGJ1dCBjYW4gYmVcclxuICogdXNlZCBpbiBhbnkgY29tcG9uZW50LiBUaGUgZ3VhcmQgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gbGVhdmVHdWFyZCAtIHtAbGluayBOYXZpZ2F0aW9uR3VhcmR9XHJcbiAqL1xyXG5mdW5jdGlvbiBvbkJlZm9yZVJvdXRlTGVhdmUobGVhdmVHdWFyZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZ2V0Q3VycmVudEluc3RhbmNlKCkpIHtcclxuICAgICAgICB3YXJuKCdnZXRDdXJyZW50SW5zdGFuY2UoKSByZXR1cm5lZCBudWxsLiBvbkJlZm9yZVJvdXRlTGVhdmUoKSBtdXN0IGJlIGNhbGxlZCBhdCB0aGUgdG9wIG9mIGEgc2V0dXAgZnVuY3Rpb24nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBhY3RpdmVSZWNvcmQgPSBpbmplY3QobWF0Y2hlZFJvdXRlS2V5LCB7fSkudmFsdWU7XHJcbiAgICBpZiAoIWFjdGl2ZVJlY29yZCkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKCdObyBhY3RpdmUgcm91dGUgcmVjb3JkIHdhcyBmb3VuZC4gQXJlIHlvdSBtaXNzaW5nIGEgPHJvdXRlci12aWV3PiBjb21wb25lbnQ/Jyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJHdWFyZChhY3RpdmVSZWNvcmQsICdsZWF2ZUd1YXJkcycsIGxlYXZlR3VhcmQpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGQgYSBuYXZpZ2F0aW9uIGd1YXJkIHRoYXQgdHJpZ2dlcnMgd2hlbmV2ZXIgdGhlIGN1cnJlbnQgbG9jYXRpb24gaXMgYWJvdXRcclxuICogdG8gYmUgdXBkYXRlZC4gU2ltaWxhciB0byB7QGxpbmsgYmVmb3JlUm91dGVVcGRhdGV9IGJ1dCBjYW4gYmUgdXNlZCBpbiBhbnlcclxuICogY29tcG9uZW50LiBUaGUgZ3VhcmQgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gdXBkYXRlR3VhcmQgLSB7QGxpbmsgTmF2aWdhdGlvbkd1YXJkfVxyXG4gKi9cclxuZnVuY3Rpb24gb25CZWZvcmVSb3V0ZVVwZGF0ZSh1cGRhdGVHdWFyZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZ2V0Q3VycmVudEluc3RhbmNlKCkpIHtcclxuICAgICAgICB3YXJuKCdnZXRDdXJyZW50SW5zdGFuY2UoKSByZXR1cm5lZCBudWxsLiBvbkJlZm9yZVJvdXRlVXBkYXRlKCkgbXVzdCBiZSBjYWxsZWQgYXQgdGhlIHRvcCBvZiBhIHNldHVwIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aXZlUmVjb3JkID0gaW5qZWN0KG1hdGNoZWRSb3V0ZUtleSwge30pLnZhbHVlO1xyXG4gICAgaWYgKCFhY3RpdmVSZWNvcmQpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybignTm8gYWN0aXZlIHJvdXRlIHJlY29yZCB3YXMgZm91bmQuIEFyZSB5b3UgbWlzc2luZyBhIDxyb3V0ZXItdmlldz4gY29tcG9uZW50PycpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHJlZ2lzdGVyR3VhcmQoYWN0aXZlUmVjb3JkLCAndXBkYXRlR3VhcmRzJywgdXBkYXRlR3VhcmQpO1xyXG59XHJcbmZ1bmN0aW9uIGd1YXJkVG9Qcm9taXNlRm4oZ3VhcmQsIHRvLCBmcm9tLCByZWNvcmQsIG5hbWUpIHtcclxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGVudGVyQ2FsbGJhY2tBcnJheSB0byBwcmV2ZW50IHB1c2hpbmcgY2FsbGJhY2tzIGlmIGEgbmV3IG5hdmlnYXRpb24gdG9vayBwbGFjZVxyXG4gICAgY29uc3QgZW50ZXJDYWxsYmFja0FycmF5ID0gcmVjb3JkICYmXHJcbiAgICAgICAgLy8gbmFtZSBpcyBkZWZpbmVkIGlmIHJlY29yZCBpcyBiZWNhdXNlIG9mIHRoZSBmdW5jdGlvbiBvdmVybG9hZFxyXG4gICAgICAgIChyZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPSByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pO1xyXG4gICAgcmV0dXJuICgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gKHZhbGlkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh2YWxpZCA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICByZWplY3QoY3JlYXRlUm91dGVyRXJyb3IoNCAvKiBOQVZJR0FUSU9OX0FCT1JURUQgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvLFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWxpZCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QodmFsaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUm91dGVMb2NhdGlvbih2YWxpZCkpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChjcmVhdGVSb3V0ZXJFcnJvcigyIC8qIE5BVklHQVRJT05fR1VBUkRfUkVESVJFQ1QgKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0byxcclxuICAgICAgICAgICAgICAgICAgICB0bzogdmFsaWQsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50ZXJDYWxsYmFja0FycmF5ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2luY2UgZW50ZXJDYWxsYmFja0FycmF5IGlzIHRydXRoeSwgYm90aCByZWNvcmQgYW5kIG5hbWUgYWxzbyBhcmVcclxuICAgICAgICAgICAgICAgICAgICByZWNvcmQuZW50ZXJDYWxsYmFja3NbbmFtZV0gPT09IGVudGVyQ2FsbGJhY2tBcnJheSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB2YWxpZCA9PT0gJ2Z1bmN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICBlbnRlckNhbGxiYWNrQXJyYXkucHVzaCh2YWxpZCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHdyYXBwaW5nIHdpdGggUHJvbWlzZS5yZXNvbHZlIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYm90aCBhc3luYyBhbmQgc3luYyBndWFyZHNcclxuICAgICAgICBjb25zdCBndWFyZFJldHVybiA9IGd1YXJkLmNhbGwocmVjb3JkICYmIHJlY29yZC5pbnN0YW5jZXNbbmFtZV0sIHRvLCBmcm9tLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjYW5Pbmx5QmVDYWxsZWRPbmNlKG5leHQsIHRvLCBmcm9tKSA6IG5leHQpO1xyXG4gICAgICAgIGxldCBndWFyZENhbGwgPSBQcm9taXNlLnJlc29sdmUoZ3VhcmRSZXR1cm4pO1xyXG4gICAgICAgIGlmIChndWFyZC5sZW5ndGggPCAzKVxyXG4gICAgICAgICAgICBndWFyZENhbGwgPSBndWFyZENhbGwudGhlbihuZXh0KTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGd1YXJkLmxlbmd0aCA+IDIpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUaGUgXCJuZXh0XCIgY2FsbGJhY2sgd2FzIG5ldmVyIGNhbGxlZCBpbnNpZGUgb2YgJHtndWFyZC5uYW1lID8gJ1wiJyArIGd1YXJkLm5hbWUgKyAnXCInIDogJyd9OlxcbiR7Z3VhcmQudG9TdHJpbmcoKX1cXG4uIElmIHlvdSBhcmUgcmV0dXJuaW5nIGEgdmFsdWUgaW5zdGVhZCBvZiBjYWxsaW5nIFwibmV4dFwiLCBtYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBcIm5leHRcIiBwYXJhbWV0ZXIgZnJvbSB5b3VyIGZ1bmN0aW9uLmA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ3VhcmRSZXR1cm4gPT09ICdvYmplY3QnICYmICd0aGVuJyBpbiBndWFyZFJldHVybikge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRDYWxsID0gZ3VhcmRDYWxsLnRoZW4ocmVzb2x2ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogX2NhbGxlZCBpcyBhZGRlZCBhdCBjYW5Pbmx5QmVDYWxsZWRPbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXh0Ll9jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW52YWxpZCBuYXZpZ2F0aW9uIGd1YXJkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZWRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdGVzdCBtZSFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChndWFyZFJldHVybiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBfY2FsbGVkIGlzIGFkZGVkIGF0IGNhbk9ubHlCZUNhbGxlZE9uY2VcclxuICAgICAgICAgICAgICAgIGlmICghbmV4dC5fY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdJbnZhbGlkIG5hdmlnYXRpb24gZ3VhcmQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd1YXJkQ2FsbC5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2FuT25seUJlQ2FsbGVkT25jZShuZXh0LCB0bywgZnJvbSkge1xyXG4gICAgbGV0IGNhbGxlZCA9IDA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYWxsZWQrKyA9PT0gMSlcclxuICAgICAgICAgICAgd2FybihgVGhlIFwibmV4dFwiIGNhbGxiYWNrIHdhcyBjYWxsZWQgbW9yZSB0aGFuIG9uY2UgaW4gb25lIG5hdmlnYXRpb24gZ3VhcmQgd2hlbiBnb2luZyBmcm9tIFwiJHtmcm9tLmZ1bGxQYXRofVwiIHRvIFwiJHt0by5mdWxsUGF0aH1cIi4gSXQgc2hvdWxkIGJlIGNhbGxlZCBleGFjdGx5IG9uZSB0aW1lIGluIGVhY2ggbmF2aWdhdGlvbiBndWFyZC4gVGhpcyB3aWxsIGZhaWwgaW4gcHJvZHVjdGlvbi5gKTtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB3ZSBwdXQgaXQgaW4gdGhlIG9yaWdpbmFsIG9uZSBiZWNhdXNlIGl0J3MgZWFzaWVyIHRvIGNoZWNrXHJcbiAgICAgICAgbmV4dC5fY2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY2FsbGVkID09PSAxKVxyXG4gICAgICAgICAgICBuZXh0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RDb21wb25lbnRzR3VhcmRzKG1hdGNoZWQsIGd1YXJkVHlwZSwgdG8sIGZyb20pIHtcclxuICAgIGNvbnN0IGd1YXJkcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCByZWNvcmQgb2YgbWF0Y2hlZCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiByZWNvcmQuY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICBsZXQgcmF3Q29tcG9uZW50ID0gcmVjb3JkLmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3Q29tcG9uZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdvYmplY3QnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiByYXdDb21wb25lbnQgIT09ICdmdW5jdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIG5vdGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgIGEgdmFsaWQgY29tcG9uZW50LiBSZWNlaXZlZCBcIiR7U3RyaW5nKHJhd0NvbXBvbmVudCl9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhyb3cgdG8gZW5zdXJlIHdlIHN0b3AgaGVyZSBidXQgd2FybiB0byBlbnN1cmUgdGhlIG1lc3NhZ2UgaXNuJ3RcclxuICAgICAgICAgICAgICAgICAgICAvLyBtaXNzZWQgYnkgdGhlIHVzZXJcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcm91dGUgY29tcG9uZW50Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgndGhlbicgaW4gcmF3Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FybiBpZiB1c2VyIHdyb3RlIGltcG9ydCgnL2NvbXBvbmVudC52dWUnKSBpbnN0ZWFkIG9mICgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0KCcuL2NvbXBvbmVudC52dWUnKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBpbiByZWNvcmQgd2l0aCBwYXRoIFwiJHtyZWNvcmQucGF0aH1cIiBpcyBhIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgUHJvbWlzZSBpbnN0ZWFkIG9mIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgUHJvbWlzZS4gRGlkIHlvdSBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHdyaXRlIFwiaW1wb3J0KCcuL015UGFnZS52dWUnKVwiIGluc3RlYWQgb2YgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcIigpID0+IGltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiA/IFRoaXMgd2lsbCBicmVhayBpbiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9taXNlID0gcmF3Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJhd0NvbXBvbmVudCA9ICgpID0+IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyYXdDb21wb25lbnQuX19hc3luY0xvYWRlciAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm4gb25seSBvbmNlIHBlciBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAhcmF3Q29tcG9uZW50Ll9fd2FybmVkRGVmaW5lQXN5bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICByYXdDb21wb25lbnQuX193YXJuZWREZWZpbmVBc3luYyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIGRlZmluZWQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB1c2luZyBcImRlZmluZUFzeW5jQ29tcG9uZW50KClcIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBXcml0ZSBcIigpID0+IGltcG9ydCgnLi9NeVBhZ2UudnVlJylcIiBpbnN0ZWFkIG9mIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCJkZWZpbmVBc3luY0NvbXBvbmVudCgoKSA9PiBpbXBvcnQoJy4vTXlQYWdlLnZ1ZScpKVwiLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNraXAgdXBkYXRlIGFuZCBsZWF2ZSBndWFyZHMgaWYgdGhlIHJvdXRlIGNvbXBvbmVudCBpcyBub3QgbW91bnRlZFxyXG4gICAgICAgICAgICBpZiAoZ3VhcmRUeXBlICE9PSAnYmVmb3JlUm91dGVFbnRlcicgJiYgIXJlY29yZC5pbnN0YW5jZXNbbmFtZV0pXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGlzUm91dGVDb21wb25lbnQocmF3Q29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gX192Y2NPcHRzIGlzIGFkZGVkIGJ5IHZ1ZS1jbGFzcy1jb21wb25lbnQgYW5kIGNvbnRhaW4gdGhlIHJlZ3VsYXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgbGV0IG9wdGlvbnMgPSByYXdDb21wb25lbnQuX192Y2NPcHRzIHx8IHJhd0NvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gb3B0aW9uc1tndWFyZFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgZ3VhcmQgJiYgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20sIHJlY29yZCwgbmFtZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgcmVxdWVzdGluZyB0aGUgY2h1bmsgYWxyZWFkeVxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBvbmVudFByb21pc2UgPSByYXdDb21wb25lbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgISgnY2F0Y2gnIGluIGNvbXBvbmVudFByb21pc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IFwiJHtuYW1lfVwiIGluIHJlY29yZCB3aXRoIHBhdGggXCIke3JlY29yZC5wYXRofVwiIGlzIGEgZnVuY3Rpb24gdGhhdCBkb2VzIG5vdCByZXR1cm4gYSBQcm9taXNlLiBJZiB5b3Ugd2VyZSBwYXNzaW5nIGEgZnVuY3Rpb25hbCBjb21wb25lbnQsIG1ha2Ugc3VyZSB0byBhZGQgYSBcImRpc3BsYXlOYW1lXCIgdG8gdGhlIGNvbXBvbmVudC4gVGhpcyB3aWxsIGJyZWFrIGluIHByb2R1Y3Rpb24gaWYgbm90IGZpeGVkLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29tcG9uZW50UHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaCgoKSA9PiBjb21wb25lbnRQcm9taXNlLnRoZW4ocmVzb2x2ZWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgY29tcG9uZW50IFwiJHtuYW1lfVwiIGF0IFwiJHtyZWNvcmQucGF0aH1cImApKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZENvbXBvbmVudCA9IGlzRVNNb2R1bGUocmVzb2x2ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzb2x2ZWQuZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlc29sdmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIHJlc29sdmVkIGNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZC5jb21wb25lbnRzW25hbWVdID0gcmVzb2x2ZWRDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gX192Y2NPcHRzIGlzIGFkZGVkIGJ5IHZ1ZS1jbGFzcy1jb21wb25lbnQgYW5kIGNvbnRhaW4gdGhlIHJlZ3VsYXIgb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZWRDb21wb25lbnQuX192Y2NPcHRzIHx8IHJlc29sdmVkQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGd1YXJkID0gb3B0aW9uc1tndWFyZFR5cGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBndWFyZCAmJiBndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSwgcmVjb3JkLCBuYW1lKSgpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGd1YXJkcztcclxufVxyXG4vKipcclxuICogQWxsb3dzIGRpZmZlcmVudGlhdGluZyBsYXp5IGNvbXBvbmVudHMgZnJvbSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYW5kIHZ1ZS1jbGFzcy1jb21wb25lbnRcclxuICogQHBhcmFtIGNvbXBvbmVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNSb3V0ZUNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIHJldHVybiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgfHxcclxuICAgICAgICAnZGlzcGxheU5hbWUnIGluIGNvbXBvbmVudCB8fFxyXG4gICAgICAgICdwcm9wcycgaW4gY29tcG9uZW50IHx8XHJcbiAgICAgICAgJ19fdmNjT3B0cycgaW4gY29tcG9uZW50KTtcclxufVxuXG4vLyBUT0RPOiB3ZSBjb3VsZCBhbGxvdyBjdXJyZW50Um91dGUgYXMgYSBwcm9wIHRvIGV4cG9zZSBgaXNBY3RpdmVgIGFuZFxyXG4vLyBgaXNFeGFjdEFjdGl2ZWAgYmVoYXZpb3Igc2hvdWxkIGdvIHRocm91Z2ggYW4gUkZDXHJcbmZ1bmN0aW9uIHVzZUxpbmsocHJvcHMpIHtcclxuICAgIGNvbnN0IHJvdXRlciA9IGluamVjdChyb3V0ZXJLZXkpO1xyXG4gICAgY29uc3QgY3VycmVudFJvdXRlID0gaW5qZWN0KHJvdXRlTG9jYXRpb25LZXkpO1xyXG4gICAgY29uc3Qgcm91dGUgPSBjb21wdXRlZCgoKSA9PiByb3V0ZXIucmVzb2x2ZSh1bnJlZihwcm9wcy50bykpKTtcclxuICAgIGNvbnN0IGFjdGl2ZVJlY29yZEluZGV4ID0gY29tcHV0ZWQoKCkgPT4ge1xyXG4gICAgICAgIGxldCB7IG1hdGNoZWQgfSA9IHJvdXRlLnZhbHVlO1xyXG4gICAgICAgIGxldCB7IGxlbmd0aCB9ID0gbWF0Y2hlZDtcclxuICAgICAgICBjb25zdCByb3V0ZU1hdGNoZWQgPSBtYXRjaGVkW2xlbmd0aCAtIDFdO1xyXG4gICAgICAgIGxldCBjdXJyZW50TWF0Y2hlZCA9IGN1cnJlbnRSb3V0ZS5tYXRjaGVkO1xyXG4gICAgICAgIGlmICghcm91dGVNYXRjaGVkIHx8ICFjdXJyZW50TWF0Y2hlZC5sZW5ndGgpXHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICBsZXQgaW5kZXggPSBjdXJyZW50TWF0Y2hlZC5maW5kSW5kZXgoaXNTYW1lUm91dGVSZWNvcmQuYmluZChudWxsLCByb3V0ZU1hdGNoZWQpKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIC8vIHBvc3NpYmxlIHBhcmVudCByZWNvcmRcclxuICAgICAgICBsZXQgcGFyZW50UmVjb3JkUGF0aCA9IGdldE9yaWdpbmFsUGF0aChtYXRjaGVkW2xlbmd0aCAtIDJdKTtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgIC8vIHdlIGFyZSBkZWFsaW5nIHdpdGggbmVzdGVkIHJvdXRlc1xyXG4gICAgICAgIGxlbmd0aCA+IDEgJiZcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBhbmQgbWF0Y2hlZCByb3V0ZSBoYXZlIHRoZSBzYW1lIHBhdGgsIHRoaXMgbGluayBpc1xyXG4gICAgICAgICAgICAvLyByZWZlcnJpbmcgdG8gdGhlIGVtcHR5IGNoaWxkLiBPciB3ZSBjdXJyZW50bHkgYXJlIG9uIGEgZGlmZmVyZW50XHJcbiAgICAgICAgICAgIC8vIGNoaWxkIG9mIHRoZSBzYW1lIHBhcmVudFxyXG4gICAgICAgICAgICBnZXRPcmlnaW5hbFBhdGgocm91dGVNYXRjaGVkKSA9PT0gcGFyZW50UmVjb3JkUGF0aCAmJlxyXG4gICAgICAgICAgICAvLyBhdm9pZCBjb21wYXJpbmcgdGhlIGNoaWxkIHdpdGggaXRzIHBhcmVudFxyXG4gICAgICAgICAgICBjdXJyZW50TWF0Y2hlZFtjdXJyZW50TWF0Y2hlZC5sZW5ndGggLSAxXS5wYXRoICE9PSBwYXJlbnRSZWNvcmRQYXRoXHJcbiAgICAgICAgICAgID8gY3VycmVudE1hdGNoZWQuZmluZEluZGV4KGlzU2FtZVJvdXRlUmVjb3JkLmJpbmQobnVsbCwgbWF0Y2hlZFtsZW5ndGggLSAyXSkpXHJcbiAgICAgICAgICAgIDogaW5kZXgpO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGNvbXB1dGVkKCgpID0+IGFjdGl2ZVJlY29yZEluZGV4LnZhbHVlID4gLTEgJiZcclxuICAgICAgICBpbmNsdWRlc1BhcmFtcyhjdXJyZW50Um91dGUucGFyYW1zLCByb3V0ZS52YWx1ZS5wYXJhbXMpKTtcclxuICAgIGNvbnN0IGlzRXhhY3RBY3RpdmUgPSBjb21wdXRlZCgoKSA9PiBhY3RpdmVSZWNvcmRJbmRleC52YWx1ZSA+IC0xICYmXHJcbiAgICAgICAgYWN0aXZlUmVjb3JkSW5kZXgudmFsdWUgPT09IGN1cnJlbnRSb3V0ZS5tYXRjaGVkLmxlbmd0aCAtIDEgJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uUGFyYW1zKGN1cnJlbnRSb3V0ZS5wYXJhbXMsIHJvdXRlLnZhbHVlLnBhcmFtcykpO1xyXG4gICAgZnVuY3Rpb24gbmF2aWdhdGUoZSA9IHt9KSB7XHJcbiAgICAgICAgaWYgKGd1YXJkRXZlbnQoZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvdXRlclt1bnJlZihwcm9wcy5yZXBsYWNlKSA/ICdyZXBsYWNlJyA6ICdwdXNoJ10odW5yZWYocHJvcHMudG8pXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHVuY2F1Z2h0IGVycm9ycyBhcmUgdGhleSBhcmUgbG9nZ2VkIGFueXdheVxyXG4gICAgICAgICAgICApLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJvdXRlLFxyXG4gICAgICAgIGhyZWY6IGNvbXB1dGVkKCgpID0+IHJvdXRlLnZhbHVlLmhyZWYpLFxyXG4gICAgICAgIGlzQWN0aXZlLFxyXG4gICAgICAgIGlzRXhhY3RBY3RpdmUsXHJcbiAgICAgICAgbmF2aWdhdGUsXHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJvdXRlckxpbmtJbXBsID0gLyojX19QVVJFX18qLyBkZWZpbmVDb21wb25lbnQoe1xyXG4gICAgbmFtZTogJ1JvdXRlckxpbmsnLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICB0bzoge1xyXG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcGxhY2U6IEJvb2xlYW4sXHJcbiAgICAgICAgYWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgICAgICAvLyBpbmFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICAgICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgICAgIGN1c3RvbTogQm9vbGVhbixcclxuICAgICAgICBhcmlhQ3VycmVudFZhbHVlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ3BhZ2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGxpbmsgPSByZWFjdGl2ZSh1c2VMaW5rKHByb3BzKSk7XHJcbiAgICAgICAgY29uc3QgeyBvcHRpb25zIH0gPSBpbmplY3Qocm91dGVyS2V5KTtcclxuICAgICAgICBjb25zdCBlbENsYXNzID0gY29tcHV0ZWQoKCkgPT4gKHtcclxuICAgICAgICAgICAgW2dldExpbmtDbGFzcyhwcm9wcy5hY3RpdmVDbGFzcywgb3B0aW9ucy5saW5rQWN0aXZlQ2xhc3MsICdyb3V0ZXItbGluay1hY3RpdmUnKV06IGxpbmsuaXNBY3RpdmUsXHJcbiAgICAgICAgICAgIC8vIFtnZXRMaW5rQ2xhc3MoXHJcbiAgICAgICAgICAgIC8vICAgcHJvcHMuaW5hY3RpdmVDbGFzcyxcclxuICAgICAgICAgICAgLy8gICBvcHRpb25zLmxpbmtJbmFjdGl2ZUNsYXNzLFxyXG4gICAgICAgICAgICAvLyAgICdyb3V0ZXItbGluay1pbmFjdGl2ZSdcclxuICAgICAgICAgICAgLy8gKV06ICFsaW5rLmlzRXhhY3RBY3RpdmUsXHJcbiAgICAgICAgICAgIFtnZXRMaW5rQ2xhc3MocHJvcHMuZXhhY3RBY3RpdmVDbGFzcywgb3B0aW9ucy5saW5rRXhhY3RBY3RpdmVDbGFzcywgJ3JvdXRlci1saW5rLWV4YWN0LWFjdGl2ZScpXTogbGluay5pc0V4YWN0QWN0aXZlLFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICAvLyBkZXZ0b29scyBvbmx5XHJcbiAgICAgICAgaWYgKCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSAmJiBpc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICAgICAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5fX3ZybF9yb3V0ZSA9IGxpbmsucm91dGU7XHJcbiAgICAgICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICAgICAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5fX3ZybF9hY3RpdmUgPSBsaW5rLmlzQWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuX192cmxfZXhhY3RBY3RpdmUgPSBsaW5rLmlzRXhhY3RBY3RpdmU7XHJcbiAgICAgICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQobGluayk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5jdXN0b21cclxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIDogaCgnYScsIHtcclxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jdXJyZW50JzogbGluay5pc0V4YWN0QWN0aXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHJvcHMuYXJpYUN1cnJlbnRWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogbGluay5ocmVmLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd291bGQgb3ZlcnJpZGUgdXNlciBhZGRlZCBhdHRycyBidXQgVnVlIHdpbGwgc3RpbGwgYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIHNvIHdlIGVuZCB1cCB0cmlnZ2VyaW5nIGJvdGhcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBsaW5rLm5hdmlnYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBlbENsYXNzLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG59KTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdG8gcmVuZGVyIGEgbGluayB0aGF0IHRyaWdnZXJzIGEgbmF2aWdhdGlvbiBvbiBjbGljay5cclxuICovXHJcbmNvbnN0IFJvdXRlckxpbmsgPSBSb3V0ZXJMaW5rSW1wbDtcclxuZnVuY3Rpb24gZ3VhcmRFdmVudChlKSB7XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5c1xyXG4gICAgaWYgKGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCB3aGVuIHByZXZlbnREZWZhdWx0IGNhbGxlZFxyXG4gICAgaWYgKGUuZGVmYXVsdFByZXZlbnRlZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICAvLyBkb24ndCByZWRpcmVjdCBvbiByaWdodCBjbGlja1xyXG4gICAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD1cIl9ibGFua1wiYFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBnZXRBdHRyaWJ1dGUgZG9lcyBleGlzdFxyXG4gICAgaWYgKGUuY3VycmVudFRhcmdldCAmJiBlLmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKSB7XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBnZXRBdHRyaWJ1dGUgZXhpc3RzXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XHJcbiAgICAgICAgaWYgKC9cXGJfYmxhbmtcXGIvaS50ZXN0KHRhcmdldCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHRoaXMgbWF5IGJlIGEgV2VleCBldmVudCB3aGljaCBkb2Vzbid0IGhhdmUgdGhpcyBtZXRob2RcclxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KVxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGluY2x1ZGVzUGFyYW1zKG91dGVyLCBpbm5lcikge1xyXG4gICAgZm9yIChsZXQga2V5IGluIGlubmVyKSB7XHJcbiAgICAgICAgbGV0IGlubmVyVmFsdWUgPSBpbm5lcltrZXldO1xyXG4gICAgICAgIGxldCBvdXRlclZhbHVlID0gb3V0ZXJba2V5XTtcclxuICAgICAgICBpZiAodHlwZW9mIGlubmVyVmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGlmIChpbm5lclZhbHVlICE9PSBvdXRlclZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG91dGVyVmFsdWUpIHx8XHJcbiAgICAgICAgICAgICAgICBvdXRlclZhbHVlLmxlbmd0aCAhPT0gaW5uZXJWYWx1ZS5sZW5ndGggfHxcclxuICAgICAgICAgICAgICAgIGlubmVyVmFsdWUuc29tZSgodmFsdWUsIGkpID0+IHZhbHVlICE9PSBvdXRlclZhbHVlW2ldKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogR2V0IHRoZSBvcmlnaW5hbCBwYXRoIHZhbHVlIG9mIGEgcmVjb3JkIGJ5IGZvbGxvd2luZyBpdHMgYWxpYXNPZlxyXG4gKiBAcGFyYW0gcmVjb3JkXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRPcmlnaW5hbFBhdGgocmVjb3JkKSB7XHJcbiAgICByZXR1cm4gcmVjb3JkID8gKHJlY29yZC5hbGlhc09mID8gcmVjb3JkLmFsaWFzT2YucGF0aCA6IHJlY29yZC5wYXRoKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiBVdGlsaXR5IGNsYXNzIHRvIGdldCB0aGUgYWN0aXZlIGNsYXNzIGJhc2VkIG9uIGRlZmF1bHRzLlxyXG4gKiBAcGFyYW0gcHJvcENsYXNzXHJcbiAqIEBwYXJhbSBnbG9iYWxDbGFzc1xyXG4gKiBAcGFyYW0gZGVmYXVsdENsYXNzXHJcbiAqL1xyXG5jb25zdCBnZXRMaW5rQ2xhc3MgPSAocHJvcENsYXNzLCBnbG9iYWxDbGFzcywgZGVmYXVsdENsYXNzKSA9PiBwcm9wQ2xhc3MgIT0gbnVsbFxyXG4gICAgPyBwcm9wQ2xhc3NcclxuICAgIDogZ2xvYmFsQ2xhc3MgIT0gbnVsbFxyXG4gICAgICAgID8gZ2xvYmFsQ2xhc3NcclxuICAgICAgICA6IGRlZmF1bHRDbGFzcztcblxuY29uc3QgUm91dGVyVmlld0ltcGwgPSAvKiNfX1BVUkVfXyovIGRlZmluZUNvbXBvbmVudCh7XHJcbiAgICBuYW1lOiAnUm91dGVyVmlldycsXHJcbiAgICAvLyAjNjc0IHdlIG1hbnVhbGx5IGluaGVyaXQgdGhlbVxyXG4gICAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgbmFtZToge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdkZWZhdWx0JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJvdXRlOiBPYmplY3QsXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgYXR0cnMsIHNsb3RzIH0pIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkRlcHJlY2F0ZWRVc2FnZSgpO1xyXG4gICAgICAgIGNvbnN0IGluamVjdGVkUm91dGUgPSBpbmplY3Qocm91dGVyVmlld0xvY2F0aW9uS2V5KTtcclxuICAgICAgICBjb25zdCByb3V0ZVRvRGlzcGxheSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLnJvdXRlIHx8IGluamVjdGVkUm91dGUudmFsdWUpO1xyXG4gICAgICAgIGNvbnN0IGRlcHRoID0gaW5qZWN0KHZpZXdEZXB0aEtleSwgMCk7XHJcbiAgICAgICAgY29uc3QgbWF0Y2hlZFJvdXRlUmVmID0gY29tcHV0ZWQoKCkgPT4gcm91dGVUb0Rpc3BsYXkudmFsdWUubWF0Y2hlZFtkZXB0aF0pO1xyXG4gICAgICAgIHByb3ZpZGUodmlld0RlcHRoS2V5LCBkZXB0aCArIDEpO1xyXG4gICAgICAgIHByb3ZpZGUobWF0Y2hlZFJvdXRlS2V5LCBtYXRjaGVkUm91dGVSZWYpO1xyXG4gICAgICAgIHByb3ZpZGUocm91dGVyVmlld0xvY2F0aW9uS2V5LCByb3V0ZVRvRGlzcGxheSk7XHJcbiAgICAgICAgY29uc3Qgdmlld1JlZiA9IHJlZigpO1xyXG4gICAgICAgIC8vIHdhdGNoIGF0IHRoZSBzYW1lIHRpbWUgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSwgdGhlIHJvdXRlIHJlY29yZCB3ZSBhcmVcclxuICAgICAgICAvLyByZW5kZXJpbmcsIGFuZCB0aGUgbmFtZVxyXG4gICAgICAgIHdhdGNoKCgpID0+IFt2aWV3UmVmLnZhbHVlLCBtYXRjaGVkUm91dGVSZWYudmFsdWUsIHByb3BzLm5hbWVdLCAoW2luc3RhbmNlLCB0bywgbmFtZV0sIFtvbGRJbnN0YW5jZSwgZnJvbSwgb2xkTmFtZV0pID0+IHtcclxuICAgICAgICAgICAgLy8gY29weSByZXVzZWQgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgIGlmICh0bykge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHVwZGF0ZSB0aGUgaW5zdGFuY2UgZm9yIG5ldyBpbnN0YW5jZXMgYXMgd2VsbCBhcyByZXVzZWRcclxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlcyB3aGVuIG5hdmlnYXRpbmcgdG8gYSBuZXcgcm91dGVcclxuICAgICAgICAgICAgICAgIHRvLmluc3RhbmNlc1tuYW1lXSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBpcyByZXVzZWQgZm9yIGEgZGlmZmVyZW50IHJvdXRlIG9yIG5hbWUgc29cclxuICAgICAgICAgICAgICAgIC8vIHdlIGNvcHkgYW55IHNhdmVkIHVwZGF0ZSBvciBsZWF2ZSBndWFyZHMuIFdpdGggYXN5bmMgc2V0dXAsIHRoZVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnRpbmcgY29tcG9uZW50IHdpbGwgbW91bnQgYmVmb3JlIHRoZSBtYXRjaGVkUm91dGUgY2hhbmdlcyxcclxuICAgICAgICAgICAgICAgIC8vIG1ha2luZyBpbnN0YW5jZSA9PT0gb2xkSW5zdGFuY2UsIHNvIHdlIGNoZWNrIGlmIGd1YXJkcyBoYXZlIGJlZW5cclxuICAgICAgICAgICAgICAgIC8vIGFkZGVkIGJlZm9yZS4gVGhpcyB3b3JrcyBiZWNhdXNlIHdlIHJlbW92ZSBndWFyZHMgd2hlblxyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudGluZy9kZWFjdGl2YXRpbmcgY29tcG9uZW50c1xyXG4gICAgICAgICAgICAgICAgaWYgKGZyb20gJiYgZnJvbSAhPT0gdG8gJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UgPT09IG9sZEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0by5sZWF2ZUd1YXJkcy5zaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLmxlYXZlR3VhcmRzID0gZnJvbS5sZWF2ZUd1YXJkcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0by51cGRhdGVHdWFyZHMuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by51cGRhdGVHdWFyZHMgPSBmcm9tLnVwZGF0ZUd1YXJkcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHJpZ2dlciBiZWZvcmVSb3V0ZUVudGVyIG5leHQgY2FsbGJhY2tzXHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAgICAgdG8gJiZcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGluc3RhbmNlIGJ1dCB0byBhbmQgZnJvbSBhcmUgdGhlIHNhbWUgdGhpcyBtaWdodCBiZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHZpc2l0XHJcbiAgICAgICAgICAgICAgICAoIWZyb20gfHwgIWlzU2FtZVJvdXRlUmVjb3JkKHRvLCBmcm9tKSB8fCAhb2xkSW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAodG8uZW50ZXJDYWxsYmFja3NbbmFtZV0gfHwgW10pLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHsgZmx1c2g6ICdwb3N0JyB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvdXRlVG9EaXNwbGF5LnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBtYXRjaGVkUm91dGUgPSBtYXRjaGVkUm91dGVSZWYudmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnN0IFZpZXdDb21wb25lbnQgPSBtYXRjaGVkUm91dGUgJiYgbWF0Y2hlZFJvdXRlLmNvbXBvbmVudHNbcHJvcHMubmFtZV07XHJcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdGhlIHZhbHVlIGF0IHRoZSB0aW1lIHdlIHJlbmRlciBiZWNhdXNlIHdoZW4gd2UgdW5tb3VudCwgd2VcclxuICAgICAgICAgICAgLy8gbmF2aWdhdGVkIHRvIGEgZGlmZmVyZW50IGxvY2F0aW9uIHNvIHRoZSB2YWx1ZSBpcyBkaWZmZXJlbnRcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudE5hbWUgPSBwcm9wcy5uYW1lO1xyXG4gICAgICAgICAgICBpZiAoIVZpZXdDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxpemVTbG90KHNsb3RzLmRlZmF1bHQsIHsgQ29tcG9uZW50OiBWaWV3Q29tcG9uZW50LCByb3V0ZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wcyBmcm9tIHJvdXRlIGNvbmZpZ3VyYXRpb25cclxuICAgICAgICAgICAgY29uc3Qgcm91dGVQcm9wc09wdGlvbiA9IG1hdGNoZWRSb3V0ZS5wcm9wc1twcm9wcy5uYW1lXTtcclxuICAgICAgICAgICAgY29uc3Qgcm91dGVQcm9wcyA9IHJvdXRlUHJvcHNPcHRpb25cclxuICAgICAgICAgICAgICAgID8gcm91dGVQcm9wc09wdGlvbiA9PT0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgID8gcm91dGUucGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2Ygcm91dGVQcm9wc09wdGlvbiA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJvdXRlUHJvcHNPcHRpb24ocm91dGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogcm91dGVQcm9wc09wdGlvblxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBvblZub2RlVW5tb3VudGVkID0gdm5vZGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBpbnN0YW5jZSByZWZlcmVuY2UgdG8gcHJldmVudCBsZWFrXHJcbiAgICAgICAgICAgICAgICBpZiAodm5vZGUuY29tcG9uZW50LmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZFJvdXRlLmluc3RhbmNlc1tjdXJyZW50TmFtZV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBoKFZpZXdDb21wb25lbnQsIGFzc2lnbih7fSwgcm91dGVQcm9wcywgYXR0cnMsIHtcclxuICAgICAgICAgICAgICAgIG9uVm5vZGVVbm1vdW50ZWQsXHJcbiAgICAgICAgICAgICAgICByZWY6IHZpZXdSZWYsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgLy8gcGFzcyB0aGUgdm5vZGUgdG8gdGhlIHNsb3QgYXMgYSBwcm9wLlxyXG4gICAgICAgICAgICAvLyBoIGFuZCA8Y29tcG9uZW50IDppcz1cIi4uLlwiPiBib3RoIGFjY2VwdCB2bm9kZXNcclxuICAgICAgICAgICAgbm9ybWFsaXplU2xvdChzbG90cy5kZWZhdWx0LCB7IENvbXBvbmVudDogY29tcG9uZW50LCByb3V0ZSB9KSB8fFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50KTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVNsb3Qoc2xvdCwgZGF0YSkge1xyXG4gICAgaWYgKCFzbG90KVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgY29uc3Qgc2xvdENvbnRlbnQgPSBzbG90KGRhdGEpO1xyXG4gICAgcmV0dXJuIHNsb3RDb250ZW50Lmxlbmd0aCA9PT0gMSA/IHNsb3RDb250ZW50WzBdIDogc2xvdENvbnRlbnQ7XHJcbn1cclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdG8gZGlzcGxheSB0aGUgY3VycmVudCByb3V0ZSB0aGUgdXNlciBpcyBhdC5cclxuICovXHJcbmNvbnN0IFJvdXRlclZpZXcgPSBSb3V0ZXJWaWV3SW1wbDtcclxuLy8gd2FybiBhZ2FpbnN0IGRlcHJlY2F0ZWQgdXNhZ2Ugd2l0aCA8dHJhbnNpdGlvbj4gJiA8a2VlcC1hbGl2ZT5cclxuLy8gZHVlIHRvIGZ1bmN0aW9uYWwgY29tcG9uZW50IGJlaW5nIG5vIGxvbmdlciBlYWdlciBpbiBWdWUgM1xyXG5mdW5jdGlvbiB3YXJuRGVwcmVjYXRlZFVzYWdlKCkge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIGNvbnN0IHBhcmVudE5hbWUgPSBpbnN0YW5jZS5wYXJlbnQgJiYgaW5zdGFuY2UucGFyZW50LnR5cGUubmFtZTtcclxuICAgIGlmIChwYXJlbnROYW1lICYmXHJcbiAgICAgICAgKHBhcmVudE5hbWUgPT09ICdLZWVwQWxpdmUnIHx8IHBhcmVudE5hbWUuaW5jbHVkZXMoJ1RyYW5zaXRpb24nKSkpIHtcclxuICAgICAgICBjb25zdCBjb21wID0gcGFyZW50TmFtZSA9PT0gJ0tlZXBBbGl2ZScgPyAna2VlcC1hbGl2ZScgOiAndHJhbnNpdGlvbic7XHJcbiAgICAgICAgd2FybihgPHJvdXRlci12aWV3PiBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgZGlyZWN0bHkgaW5zaWRlIDx0cmFuc2l0aW9uPiBvciA8a2VlcC1hbGl2ZT4uXFxuYCArXHJcbiAgICAgICAgICAgIGBVc2Ugc2xvdCBwcm9wcyBpbnN0ZWFkOlxcblxcbmAgK1xyXG4gICAgICAgICAgICBgPHJvdXRlci12aWV3IHYtc2xvdD1cInsgQ29tcG9uZW50IH1cIj5cXG5gICtcclxuICAgICAgICAgICAgYCAgPCR7Y29tcH0+XFxuYCArXHJcbiAgICAgICAgICAgIGAgICAgPGNvbXBvbmVudCA6aXM9XCJDb21wb25lbnRcIiAvPlxcbmAgK1xyXG4gICAgICAgICAgICBgICA8LyR7Y29tcH0+XFxuYCArXHJcbiAgICAgICAgICAgIGA8L3JvdXRlci12aWV3PmApO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJvdXRlTG9jYXRpb24ocm91dGVMb2NhdGlvbiwgdG9vbHRpcCkge1xyXG4gICAgY29uc3QgY29weSA9IGFzc2lnbih7fSwgcm91dGVMb2NhdGlvbiwge1xyXG4gICAgICAgIC8vIHJlbW92ZSB2YXJpYWJsZXMgdGhhdCBjYW4gY29udGFpbiB2dWUgaW5zdGFuY2VzXHJcbiAgICAgICAgbWF0Y2hlZDogcm91dGVMb2NhdGlvbi5tYXRjaGVkLm1hcChtYXRjaGVkID0+IG9taXQobWF0Y2hlZCwgWydpbnN0YW5jZXMnLCAnY2hpbGRyZW4nLCAnYWxpYXNPZiddKSksXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgX2N1c3RvbToge1xyXG4gICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgZGlzcGxheTogcm91dGVMb2NhdGlvbi5mdWxsUGF0aCxcclxuICAgICAgICAgICAgdG9vbHRpcCxcclxuICAgICAgICAgICAgdmFsdWU6IGNvcHksXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0RGlzcGxheShkaXNwbGF5KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgZGlzcGxheSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxufVxyXG4vLyB0byBzdXBwb3J0IG11bHRpcGxlIHJvdXRlciBpbnN0YW5jZXNcclxubGV0IHJvdXRlcklkID0gMDtcclxuZnVuY3Rpb24gYWRkRGV2dG9vbHMoYXBwLCByb3V0ZXIsIG1hdGNoZXIpIHtcclxuICAgIC8vIFRha2Ugb3ZlciByb3V0ZXIuYmVmb3JlRWFjaCBhbmQgYWZ0ZXJFYWNoXHJcbiAgICAvLyBtYWtlIHN1cmUgd2UgYXJlIG5vdCByZWdpc3RlcmluZyB0aGUgZGV2dG9vbCB0d2ljZVxyXG4gICAgaWYgKHJvdXRlci5fX2hhc0RldnRvb2xzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHJvdXRlci5fX2hhc0RldnRvb2xzID0gdHJ1ZTtcclxuICAgIC8vIGluY3JlbWVudCB0byBzdXBwb3J0IG11bHRpcGxlIHJvdXRlciBpbnN0YW5jZXNcclxuICAgIGNvbnN0IGlkID0gcm91dGVySWQrKztcclxuICAgIHNldHVwRGV2dG9vbHNQbHVnaW4oe1xyXG4gICAgICAgIGlkOiAnb3JnLnZ1ZWpzLnJvdXRlcicgKyAoaWQgPyAnLicgKyBpZCA6ICcnKSxcclxuICAgICAgICBsYWJlbDogJ1Z1ZSBSb3V0ZXInLFxyXG4gICAgICAgIHBhY2thZ2VOYW1lOiAndnVlLXJvdXRlcicsXHJcbiAgICAgICAgaG9tZXBhZ2U6ICdodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy8nLFxyXG4gICAgICAgIGxvZ286ICdodHRwczovL3Z1ZWpzLm9yZy9pbWFnZXMvaWNvbnMvZmF2aWNvbi05Nng5Ni5wbmcnLFxyXG4gICAgICAgIGNvbXBvbmVudFN0YXRlVHlwZXM6IFsnUm91dGluZyddLFxyXG4gICAgICAgIGFwcCxcclxuICAgIH0sIGFwaSA9PiB7XHJcbiAgICAgICAgLy8gZGlzcGxheSBzdGF0ZSBhZGRlZCBieSB0aGUgcm91dGVyXHJcbiAgICAgICAgYXBpLm9uLmluc3BlY3RDb21wb25lbnQoKHBheWxvYWQsIGN0eCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pbnN0YW5jZURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHBheWxvYWQuaW5zdGFuY2VEYXRhLnN0YXRlLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdSb3V0aW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBrZXk6ICckcm91dGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZm9ybWF0Um91dGVMb2NhdGlvbihyb3V0ZXIuY3VycmVudFJvdXRlLnZhbHVlLCAnQ3VycmVudCBSb3V0ZScpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBtYXJrIHJvdXRlci1saW5rIGFzIGFjdGl2ZVxyXG4gICAgICAgIGFwaS5vbi52aXNpdENvbXBvbmVudFRyZWUoKHsgdHJlZU5vZGU6IG5vZGUsIGNvbXBvbmVudEluc3RhbmNlIH0pID0+IHtcclxuICAgICAgICAgICAgaWYgKG5vZGUubmFtZSA9PT0gJ1JvdXRlckxpbmsnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50SW5zdGFuY2UuX192cmxfcm91dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBjb21wb25lbnRJbnN0YW5jZS5fX3ZybF9yb3V0ZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogT1JBTkdFXzQwMCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRJbnN0YW5jZS5fX3ZybF9leGFjdEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUudGFncy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdleGFjdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBMSU1FXzUwMCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRJbnN0YW5jZS5fX3ZybF9hY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLnRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnYWN0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IEJMVUVfNjAwLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgd2F0Y2gocm91dGVyLmN1cnJlbnRSb3V0ZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyByZWZyZXNoIGFjdGl2ZSBzdGF0ZVxyXG4gICAgICAgICAgICByZWZyZXNoUm91dGVzVmlldygpO1xyXG4gICAgICAgICAgICBhcGkubm90aWZ5Q29tcG9uZW50VXBkYXRlKCk7XHJcbiAgICAgICAgICAgIGFwaS5zZW5kSW5zcGVjdG9yVHJlZShyb3V0ZXJJbnNwZWN0b3JJZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgbmF2aWdhdGlvbnNMYXllcklkID0gJ3JvdXRlcjpuYXZpZ2F0aW9uczonICsgaWQ7XHJcbiAgICAgICAgYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgICAgICBpZDogbmF2aWdhdGlvbnNMYXllcklkLFxyXG4gICAgICAgICAgICBsYWJlbDogYFJvdXRlciR7aWQgPyAnICcgKyBpZCA6ICcnfSBOYXZpZ2F0aW9uc2AsXHJcbiAgICAgICAgICAgIGNvbG9yOiAweDQwYThjNCxcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjb25zdCBlcnJvcnNMYXllcklkID0gJ3JvdXRlcjplcnJvcnMnXHJcbiAgICAgICAgLy8gYXBpLmFkZFRpbWVsaW5lTGF5ZXIoe1xyXG4gICAgICAgIC8vICAgaWQ6IGVycm9yc0xheWVySWQsXHJcbiAgICAgICAgLy8gICBsYWJlbDogJ1JvdXRlciBFcnJvcnMnLFxyXG4gICAgICAgIC8vICAgY29sb3I6IDB4ZWE1NDU1LFxyXG4gICAgICAgIC8vIH0pXHJcbiAgICAgICAgcm91dGVyLm9uRXJyb3IoKGVycm9yLCB0bykgPT4ge1xyXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBsYXllcklkOiBuYXZpZ2F0aW9uc0xheWVySWQsXHJcbiAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRXJyb3IgZHVyaW5nIE5hdmlnYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiB0by5mdWxsUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBsb2dUeXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyBlcnJvciB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHRvLm1ldGEuX19uYXZpZ2F0aW9uSWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBhdHRhY2hlZCB0byBgbWV0YWAgYW5kIHVzZWQgdG8gZ3JvdXAgZXZlbnRzXHJcbiAgICAgICAgbGV0IG5hdmlnYXRpb25JZCA9IDA7XHJcbiAgICAgICAgcm91dGVyLmJlZm9yZUVhY2goKHRvLCBmcm9tKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZDogZm9ybWF0RGlzcGxheSgnYmVmb3JlRWFjaCcpLFxyXG4gICAgICAgICAgICAgICAgZnJvbTogZm9ybWF0Um91dGVMb2NhdGlvbihmcm9tLCAnQ3VycmVudCBMb2NhdGlvbiBkdXJpbmcgdGhpcyBuYXZpZ2F0aW9uJyksXHJcbiAgICAgICAgICAgICAgICB0bzogZm9ybWF0Um91dGVMb2NhdGlvbih0bywgJ1RhcmdldCBsb2NhdGlvbicpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBVc2VkIHRvIGdyb3VwIG5hdmlnYXRpb25zIHRvZ2V0aGVyLCBoaWRlIGZyb20gZGV2dG9vbHNcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRvLm1ldGEsICdfX25hdmlnYXRpb25JZCcsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBuYXZpZ2F0aW9uSWQrKyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGFwaS5hZGRUaW1lbGluZUV2ZW50KHtcclxuICAgICAgICAgICAgICAgIGxheWVySWQ6IG5hdmlnYXRpb25zTGF5ZXJJZCxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1N0YXJ0IG9mIG5hdmlnYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiB0by5mdWxsUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHRvLm1ldGEuX19uYXZpZ2F0aW9uSWQsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByb3V0ZXIuYWZ0ZXJFYWNoKCh0bywgZnJvbSwgZmFpbHVyZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmQ6IGZvcm1hdERpc3BsYXkoJ2FmdGVyRWFjaCcpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5mYWlsdXJlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWlsdXJlID8gZmFpbHVyZS5tZXNzYWdlIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdOYXZpZ2F0aW9uIEZhaWx1cmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFpbHVyZSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGRhdGEuc3RhdHVzID0gZm9ybWF0RGlzcGxheSgn4p2MJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnN0YXR1cyA9IGZvcm1hdERpc3BsYXkoJ+KchScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHdlIHNldCBoZXJlIHRvIGhhdmUgdGhlIHJpZ2h0IG9yZGVyXHJcbiAgICAgICAgICAgIGRhdGEuZnJvbSA9IGZvcm1hdFJvdXRlTG9jYXRpb24oZnJvbSwgJ0N1cnJlbnQgTG9jYXRpb24gZHVyaW5nIHRoaXMgbmF2aWdhdGlvbicpO1xyXG4gICAgICAgICAgICBkYXRhLnRvID0gZm9ybWF0Um91dGVMb2NhdGlvbih0bywgJ1RhcmdldCBsb2NhdGlvbicpO1xyXG4gICAgICAgICAgICBhcGkuYWRkVGltZWxpbmVFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBsYXllcklkOiBuYXZpZ2F0aW9uc0xheWVySWQsXHJcbiAgICAgICAgICAgICAgICBldmVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnRW5kIG9mIG5hdmlnYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnRpdGxlOiB0by5mdWxsUGF0aCxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nVHlwZTogZmFpbHVyZSA/ICd3YXJuaW5nJyA6ICdkZWZhdWx0JyxcclxuICAgICAgICAgICAgICAgICAgICBncm91cElkOiB0by5tZXRhLl9fbmF2aWdhdGlvbklkLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5zcGVjdG9yIG9mIEV4aXN0aW5nIHJvdXRlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHJvdXRlckluc3BlY3RvcklkID0gJ3JvdXRlci1pbnNwZWN0b3I6JyArIGlkO1xyXG4gICAgICAgIGFwaS5hZGRJbnNwZWN0b3Ioe1xyXG4gICAgICAgICAgICBpZDogcm91dGVySW5zcGVjdG9ySWQsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnUm91dGVzJyArIChpZCA/ICcgJyArIGlkIDogJycpLFxyXG4gICAgICAgICAgICBpY29uOiAnYm9vaycsXHJcbiAgICAgICAgICAgIHRyZWVGaWx0ZXJQbGFjZWhvbGRlcjogJ1NlYXJjaCByb3V0ZXMnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hSb3V0ZXNWaWV3KCkge1xyXG4gICAgICAgICAgICAvLyB0aGUgcm91dGVzIHZpZXcgaXNuJ3QgYWN0aXZlXHJcbiAgICAgICAgICAgIGlmICghYWN0aXZlUm91dGVzUGF5bG9hZClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IGFjdGl2ZVJvdXRlc1BheWxvYWQ7XHJcbiAgICAgICAgICAgIC8vIGNoaWxkcmVuIHJvdXRlcyB3aWxsIGFwcGVhciBhcyBuZXN0ZWRcclxuICAgICAgICAgICAgbGV0IHJvdXRlcyA9IG1hdGNoZXIuZ2V0Um91dGVzKCkuZmlsdGVyKHJvdXRlID0+ICFyb3V0ZS5wYXJlbnQpO1xyXG4gICAgICAgICAgICAvLyByZXNldCBtYXRjaCBzdGF0ZSB0byBmYWxzZVxyXG4gICAgICAgICAgICByb3V0ZXMuZm9yRWFjaChyZXNldE1hdGNoU3RhdGVPblJvdXRlUmVjb3JkKTtcclxuICAgICAgICAgICAgLy8gYXBwbHkgYSBtYXRjaCBzdGF0ZSBpZiB0aGVyZSBpcyBhIHBheWxvYWRcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuZmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICByb3V0ZXMgPSByb3V0ZXMuZmlsdGVyKHJvdXRlID0+IFxyXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSBtYXRjaGVzIHN0YXRlIGJhc2VkIG9uIHRoZSBwYXlsb2FkXHJcbiAgICAgICAgICAgICAgICBpc1JvdXRlTWF0Y2hpbmcocm91dGUsIHBheWxvYWQuZmlsdGVyLnRvTG93ZXJDYXNlKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBtYXJrIGFjdGl2ZSByb3V0ZXNcclxuICAgICAgICAgICAgcm91dGVzLmZvckVhY2gocm91dGUgPT4gbWFya1JvdXRlUmVjb3JkQWN0aXZlKHJvdXRlLCByb3V0ZXIuY3VycmVudFJvdXRlLnZhbHVlKSk7XHJcbiAgICAgICAgICAgIHBheWxvYWQucm9vdE5vZGVzID0gcm91dGVzLm1hcChmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBhY3RpdmVSb3V0ZXNQYXlsb2FkO1xyXG4gICAgICAgIGFwaS5vbi5nZXRJbnNwZWN0b3JUcmVlKHBheWxvYWQgPT4ge1xyXG4gICAgICAgICAgICBhY3RpdmVSb3V0ZXNQYXlsb2FkID0gcGF5bG9hZDtcclxuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXBwID09PSBhcHAgJiYgcGF5bG9hZC5pbnNwZWN0b3JJZCA9PT0gcm91dGVySW5zcGVjdG9ySWQpIHtcclxuICAgICAgICAgICAgICAgIHJlZnJlc2hSb3V0ZXNWaWV3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEaXNwbGF5IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcm91dGUgcmVjb3JkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBpLm9uLmdldEluc3BlY3RvclN0YXRlKHBheWxvYWQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocGF5bG9hZC5hcHAgPT09IGFwcCAmJiBwYXlsb2FkLmluc3BlY3RvcklkID09PSByb3V0ZXJJbnNwZWN0b3JJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gbWF0Y2hlci5nZXRSb3V0ZXMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gcm91dGVzLmZpbmQocm91dGUgPT4gcm91dGUucmVjb3JkLl9fdmRfaWQgPT09IHBheWxvYWQubm9kZUlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZvcm1hdFJvdXRlUmVjb3JkTWF0Y2hlckZvclN0YXRlSW5zcGVjdG9yKHJvdXRlKSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYXBpLnNlbmRJbnNwZWN0b3JUcmVlKHJvdXRlckluc3BlY3RvcklkKTtcclxuICAgICAgICBhcGkuc2VuZEluc3BlY3RvclN0YXRlKHJvdXRlckluc3BlY3RvcklkKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIG1vZGlmaWVyRm9yS2V5KGtleSkge1xyXG4gICAgaWYgKGtleS5vcHRpb25hbCkge1xyXG4gICAgICAgIHJldHVybiBrZXkucmVwZWF0YWJsZSA/ICcqJyA6ICc/JztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBrZXkucmVwZWF0YWJsZSA/ICcrJyA6ICcnO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdFJvdXRlUmVjb3JkTWF0Y2hlckZvclN0YXRlSW5zcGVjdG9yKHJvdXRlKSB7XHJcbiAgICBjb25zdCB7IHJlY29yZCB9ID0gcm91dGU7XHJcbiAgICBjb25zdCBmaWVsZHMgPSBbXHJcbiAgICAgICAgeyBlZGl0YWJsZTogZmFsc2UsIGtleTogJ3BhdGgnLCB2YWx1ZTogcmVjb3JkLnBhdGggfSxcclxuICAgIF07XHJcbiAgICBpZiAocmVjb3JkLm5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcclxuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5uYW1lLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZmllbGRzLnB1c2goeyBlZGl0YWJsZTogZmFsc2UsIGtleTogJ3JlZ2V4cCcsIHZhbHVlOiByb3V0ZS5yZSB9KTtcclxuICAgIGlmIChyb3V0ZS5rZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdrZXlzJyxcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHJvdXRlLmtleXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gYCR7a2V5Lm5hbWV9JHttb2RpZmllckZvcktleShrZXkpfWApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyksXHJcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogJ1BhcmFtIGtleXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiByb3V0ZS5rZXlzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQucmVkaXJlY3QgIT0gbnVsbCkge1xyXG4gICAgICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBrZXk6ICdyZWRpcmVjdCcsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQucmVkaXJlY3QsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuYWxpYXMubGVuZ3RoKSB7XHJcbiAgICAgICAgZmllbGRzLnB1c2goe1xyXG4gICAgICAgICAgICBlZGl0YWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGtleTogJ2FsaWFzZXMnLFxyXG4gICAgICAgICAgICB2YWx1ZTogcm91dGUuYWxpYXMubWFwKGFsaWFzID0+IGFsaWFzLnJlY29yZC5wYXRoKSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGZpZWxkcy5wdXNoKHtcclxuICAgICAgICBrZXk6ICdzY29yZScsXHJcbiAgICAgICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgIF9jdXN0b206IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IHJvdXRlLnNjb3JlLm1hcChzY29yZSA9PiBzY29yZS5qb2luKCcsICcpKS5qb2luKCcgfCAnKSxcclxuICAgICAgICAgICAgICAgIHRvb2x0aXA6ICdTY29yZSB1c2VkIHRvIHNvcnQgcm91dGVzJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiByb3V0ZS5zY29yZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZmllbGRzO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0ZWQgZnJvbSB0YWlsd2luZCBwYWxldHRlXHJcbiAqL1xyXG5jb25zdCBQSU5LXzUwMCA9IDB4ZWM0ODk5O1xyXG5jb25zdCBCTFVFXzYwMCA9IDB4MjU2M2ViO1xyXG5jb25zdCBMSU1FXzUwMCA9IDB4ODRjYzE2O1xyXG5jb25zdCBDWUFOXzQwMCA9IDB4MjJkM2VlO1xyXG5jb25zdCBPUkFOR0VfNDAwID0gMHhmYjkyM2M7XHJcbi8vIGNvbnN0IEdSQVlfMTAwID0gMHhmNGY0ZjVcclxuY29uc3QgREFSSyA9IDB4NjY2NjY2O1xyXG5mdW5jdGlvbiBmb3JtYXRSb3V0ZVJlY29yZEZvckluc3BlY3Rvcihyb3V0ZSkge1xyXG4gICAgY29uc3QgdGFncyA9IFtdO1xyXG4gICAgY29uc3QgeyByZWNvcmQgfSA9IHJvdXRlO1xyXG4gICAgaWYgKHJlY29yZC5uYW1lICE9IG51bGwpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogU3RyaW5nKHJlY29yZC5uYW1lKSxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAwLFxyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENZQU5fNDAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJlY29yZC5hbGlhc09mKSB7XHJcbiAgICAgICAgdGFncy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6ICdhbGlhcycsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBPUkFOR0VfNDAwLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJvdXRlLl9fdmRfbWF0Y2gpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ21hdGNoZXMnLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogUElOS181MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuX192ZF9leGFjdEFjdGl2ZSkge1xyXG4gICAgICAgIHRhZ3MucHVzaCh7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnZXhhY3QnLFxyXG4gICAgICAgICAgICB0ZXh0Q29sb3I6IDAsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogTElNRV81MDAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUuX192ZF9hY3RpdmUpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ2FjdGl2ZScsXHJcbiAgICAgICAgICAgIHRleHRDb2xvcjogMCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBCTFVFXzYwMCxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChyZWNvcmQucmVkaXJlY3QpIHtcclxuICAgICAgICB0YWdzLnB1c2goe1xyXG4gICAgICAgICAgICBsYWJlbDogJ3JlZGlyZWN0OiAnICtcclxuICAgICAgICAgICAgICAgICh0eXBlb2YgcmVjb3JkLnJlZGlyZWN0ID09PSAnc3RyaW5nJyA/IHJlY29yZC5yZWRpcmVjdCA6ICdPYmplY3QnKSxcclxuICAgICAgICAgICAgdGV4dENvbG9yOiAweGZmZmZmZixcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBEQVJLLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gYWRkIGFuIGlkIHRvIGJlIGFibGUgdG8gc2VsZWN0IGl0LiBVc2luZyB0aGUgYHBhdGhgIGlzIG5vdCBwb3NzaWJsZSBiZWNhdXNlXHJcbiAgICAvLyBlbXB0eSBwYXRoIGNoaWxkcmVuIHdvdWxkIGNvbGxpZGUgd2l0aCB0aGVpciBwYXJlbnRzXHJcbiAgICBsZXQgaWQgPSByZWNvcmQuX192ZF9pZDtcclxuICAgIGlmIChpZCA9PSBudWxsKSB7XHJcbiAgICAgICAgaWQgPSBTdHJpbmcocm91dGVSZWNvcmRJZCsrKTtcclxuICAgICAgICByZWNvcmQuX192ZF9pZCA9IGlkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBsYWJlbDogcmVjb3JkLnBhdGgsXHJcbiAgICAgICAgdGFncyxcclxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW4ubWFwKGZvcm1hdFJvdXRlUmVjb3JkRm9ySW5zcGVjdG9yKSxcclxuICAgIH07XHJcbn1cclxuLy8gIGluY3JlbWVudGFsIGlkIGZvciByb3V0ZSByZWNvcmRzIGFuZCBpbnNwZWN0b3Igc3RhdGVcclxubGV0IHJvdXRlUmVjb3JkSWQgPSAwO1xyXG5jb25zdCBFWFRSQUNUX1JFR0VYUF9SRSA9IC9eXFwvKC4qKVxcLyhbYS16XSopJC87XHJcbmZ1bmN0aW9uIG1hcmtSb3V0ZVJlY29yZEFjdGl2ZShyb3V0ZSwgY3VycmVudFJvdXRlKSB7XHJcbiAgICAvLyBubyByb3V0ZSB3aWxsIGJlIGFjdGl2ZSBpZiBtYXRjaGVkIGlzIGVtcHR5XHJcbiAgICAvLyByZXNldCB0aGUgbWF0Y2hpbmcgc3RhdGVcclxuICAgIGNvbnN0IGlzRXhhY3RBY3RpdmUgPSBjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggJiZcclxuICAgICAgICBpc1NhbWVSb3V0ZVJlY29yZChjdXJyZW50Um91dGUubWF0Y2hlZFtjdXJyZW50Um91dGUubWF0Y2hlZC5sZW5ndGggLSAxXSwgcm91dGUucmVjb3JkKTtcclxuICAgIHJvdXRlLl9fdmRfZXhhY3RBY3RpdmUgPSByb3V0ZS5fX3ZkX2FjdGl2ZSA9IGlzRXhhY3RBY3RpdmU7XHJcbiAgICBpZiAoIWlzRXhhY3RBY3RpdmUpIHtcclxuICAgICAgICByb3V0ZS5fX3ZkX2FjdGl2ZSA9IGN1cnJlbnRSb3V0ZS5tYXRjaGVkLnNvbWUobWF0Y2ggPT4gaXNTYW1lUm91dGVSZWNvcmQobWF0Y2gsIHJvdXRlLnJlY29yZCkpO1xyXG4gICAgfVxyXG4gICAgcm91dGUuY2hpbGRyZW4uZm9yRWFjaChjaGlsZFJvdXRlID0+IG1hcmtSb3V0ZVJlY29yZEFjdGl2ZShjaGlsZFJvdXRlLCBjdXJyZW50Um91dGUpKTtcclxufVxyXG5mdW5jdGlvbiByZXNldE1hdGNoU3RhdGVPblJvdXRlUmVjb3JkKHJvdXRlKSB7XHJcbiAgICByb3V0ZS5fX3ZkX21hdGNoID0gZmFsc2U7XHJcbiAgICByb3V0ZS5jaGlsZHJlbi5mb3JFYWNoKHJlc2V0TWF0Y2hTdGF0ZU9uUm91dGVSZWNvcmQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzUm91dGVNYXRjaGluZyhyb3V0ZSwgZmlsdGVyKSB7XHJcbiAgICBjb25zdCBmb3VuZCA9IFN0cmluZyhyb3V0ZS5yZSkubWF0Y2goRVhUUkFDVF9SRUdFWFBfUkUpO1xyXG4gICAgcm91dGUuX192ZF9tYXRjaCA9IGZhbHNlO1xyXG4gICAgaWYgKCFmb3VuZCB8fCBmb3VuZC5sZW5ndGggPCAzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gdXNlIGEgcmVnZXhwIHdpdGhvdXQgJCBhdCB0aGUgZW5kIHRvIG1hdGNoIG5lc3RlZCByb3V0ZXMgYmV0dGVyXHJcbiAgICBjb25zdCBub25FbmRpbmdSRSA9IG5ldyBSZWdFeHAoZm91bmRbMV0ucmVwbGFjZSgvXFwkJC8sICcnKSwgZm91bmRbMl0pO1xyXG4gICAgaWYgKG5vbkVuZGluZ1JFLnRlc3QoZmlsdGVyKSkge1xyXG4gICAgICAgIC8vIG1hcmsgY2hpbGRyZW4gYXMgbWF0Y2hlc1xyXG4gICAgICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gaXNSb3V0ZU1hdGNoaW5nKGNoaWxkLCBmaWx0ZXIpKTtcclxuICAgICAgICAvLyBleGNlcHRpb24gY2FzZTogYC9gXHJcbiAgICAgICAgaWYgKHJvdXRlLnJlY29yZC5wYXRoICE9PSAnLycgfHwgZmlsdGVyID09PSAnLycpIHtcclxuICAgICAgICAgICAgcm91dGUuX192ZF9tYXRjaCA9IHJvdXRlLnJlLnRlc3QoZmlsdGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGhpZGUgdGhlIC8gcm91dGVcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXRoID0gcm91dGUucmVjb3JkLnBhdGgudG9Mb3dlckNhc2UoKTtcclxuICAgIGNvbnN0IGRlY29kZWRQYXRoID0gZGVjb2RlKHBhdGgpO1xyXG4gICAgLy8gYWxzbyBhbGxvdyBwYXJ0aWFsIG1hdGNoaW5nIG9uIHRoZSBwYXRoXHJcbiAgICBpZiAoIWZpbHRlci5zdGFydHNXaXRoKCcvJykgJiZcclxuICAgICAgICAoZGVjb2RlZFBhdGguaW5jbHVkZXMoZmlsdGVyKSB8fCBwYXRoLmluY2x1ZGVzKGZpbHRlcikpKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKGRlY29kZWRQYXRoLnN0YXJ0c1dpdGgoZmlsdGVyKSB8fCBwYXRoLnN0YXJ0c1dpdGgoZmlsdGVyKSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmIChyb3V0ZS5yZWNvcmQubmFtZSAmJiBTdHJpbmcocm91dGUucmVjb3JkLm5hbWUpLmluY2x1ZGVzKGZpbHRlcikpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gcm91dGUuY2hpbGRyZW4uc29tZShjaGlsZCA9PiBpc1JvdXRlTWF0Y2hpbmcoY2hpbGQsIGZpbHRlcikpO1xyXG59XHJcbmZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoIWtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgIHJldFtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxuXG4vKipcclxuICogQ3JlYXRlcyBhIFJvdXRlciBpbnN0YW5jZSB0aGF0IGNhbiBiZSB1c2VkIGJ5IGEgVnVlIGFwcC5cclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgLSB7QGxpbmsgUm91dGVyT3B0aW9uc31cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihvcHRpb25zKSB7XHJcbiAgICBjb25zdCBtYXRjaGVyID0gY3JlYXRlUm91dGVyTWF0Y2hlcihvcHRpb25zLnJvdXRlcywgb3B0aW9ucyk7XHJcbiAgICBsZXQgcGFyc2VRdWVyeSQxID0gb3B0aW9ucy5wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XHJcbiAgICBsZXQgc3RyaW5naWZ5UXVlcnkkMSA9IG9wdGlvbnMuc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XHJcbiAgICBsZXQgcm91dGVySGlzdG9yeSA9IG9wdGlvbnMuaGlzdG9yeTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJvdXRlckhpc3RvcnkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm92aWRlIHRoZSBcImhpc3RvcnlcIiBvcHRpb24gd2hlbiBjYWxsaW5nIFwiY3JlYXRlUm91dGVyKClcIjonICtcclxuICAgICAgICAgICAgJyBodHRwczovL25leHQucm91dGVyLnZ1ZWpzLm9yZy9hcGkvI2hpc3RvcnkuJyk7XHJcbiAgICBjb25zdCBiZWZvcmVHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGJlZm9yZVJlc29sdmVHdWFyZHMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGNvbnN0IGFmdGVyR3VhcmRzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBjb25zdCBjdXJyZW50Um91dGUgPSBzaGFsbG93UmVmKFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQpO1xyXG4gICAgbGV0IHBlbmRpbmdMb2NhdGlvbiA9IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAvLyBsZWF2ZSB0aGUgc2Nyb2xsUmVzdG9yYXRpb24gaWYgbm8gc2Nyb2xsQmVoYXZpb3IgaXMgcHJvdmlkZWRcclxuICAgIGlmIChpc0Jyb3dzZXIgJiYgb3B0aW9ucy5zY3JvbGxCZWhhdmlvciAmJiAnc2Nyb2xsUmVzdG9yYXRpb24nIGluIGhpc3RvcnkpIHtcclxuICAgICAgICBoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBub3JtYWxpemVQYXJhbXMgPSBhcHBseVRvUGFyYW1zLmJpbmQobnVsbCwgcGFyYW1WYWx1ZSA9PiAnJyArIHBhcmFtVmFsdWUpO1xyXG4gICAgY29uc3QgZW5jb2RlUGFyYW1zID0gYXBwbHlUb1BhcmFtcy5iaW5kKG51bGwsIGVuY29kZVBhcmFtKTtcclxuICAgIGNvbnN0IGRlY29kZVBhcmFtcyA9IGFwcGx5VG9QYXJhbXMuYmluZChudWxsLCBkZWNvZGUpO1xyXG4gICAgZnVuY3Rpb24gYWRkUm91dGUocGFyZW50T3JSb3V0ZSwgcm91dGUpIHtcclxuICAgICAgICBsZXQgcGFyZW50O1xyXG4gICAgICAgIGxldCByZWNvcmQ7XHJcbiAgICAgICAgaWYgKGlzUm91dGVOYW1lKHBhcmVudE9yUm91dGUpKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IG1hdGNoZXIuZ2V0UmVjb3JkTWF0Y2hlcihwYXJlbnRPclJvdXRlKTtcclxuICAgICAgICAgICAgcmVjb3JkID0gcm91dGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZWNvcmQgPSBwYXJlbnRPclJvdXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWF0Y2hlci5hZGRSb3V0ZShyZWNvcmQsIHBhcmVudCk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZW1vdmVSb3V0ZShuYW1lKSB7XHJcbiAgICAgICAgbGV0IHJlY29yZE1hdGNoZXIgPSBtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICAgICAgaWYgKHJlY29yZE1hdGNoZXIpIHtcclxuICAgICAgICAgICAgbWF0Y2hlci5yZW1vdmVSb3V0ZShyZWNvcmRNYXRjaGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYENhbm5vdCByZW1vdmUgbm9uLWV4aXN0ZW50IHJvdXRlIFwiJHtTdHJpbmcobmFtZSl9XCJgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRSb3V0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIuZ2V0Um91dGVzKCkubWFwKHJvdXRlTWF0Y2hlciA9PiByb3V0ZU1hdGNoZXIucmVjb3JkKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGhhc1JvdXRlKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gISFtYXRjaGVyLmdldFJlY29yZE1hdGNoZXIobmFtZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvbHZlKHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24pIHtcclxuICAgICAgICAvLyBjb25zdCBvYmplY3RMb2NhdGlvbiA9IHJvdXRlckxvY2F0aW9uQXNPYmplY3QocmF3TG9jYXRpb24pXHJcbiAgICAgICAgLy8gd2UgY3JlYXRlIGEgY29weSB0byBtb2RpZnkgaXQgbGF0ZXJcclxuICAgICAgICBjdXJyZW50TG9jYXRpb24gPSBhc3NpZ24oe30sIGN1cnJlbnRMb2NhdGlvbiB8fCBjdXJyZW50Um91dGUudmFsdWUpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmF3TG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGxldCBsb2NhdGlvbk5vcm1hbGl6ZWQgPSBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHJhd0xvY2F0aW9uLCBjdXJyZW50TG9jYXRpb24ucGF0aCk7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaGVkUm91dGUgPSBtYXRjaGVyLnJlc29sdmUoeyBwYXRoOiBsb2NhdGlvbk5vcm1hbGl6ZWQucGF0aCB9LCBjdXJyZW50TG9jYXRpb24pO1xyXG4gICAgICAgICAgICBsZXQgaHJlZiA9IHJvdXRlckhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbk5vcm1hbGl6ZWQuZnVsbFBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHJlZi5zdGFydHNXaXRoKCcvLycpKVxyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIW1hdGNoZWRSb3V0ZS5tYXRjaGVkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIke3Jhd0xvY2F0aW9ufVwiYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbG9jYXRpb25Ob3JtYWxpemVkIGlzIGFsd2F5cyBhIG5ldyBvYmplY3RcclxuICAgICAgICAgICAgcmV0dXJuIGFzc2lnbihsb2NhdGlvbk5vcm1hbGl6ZWQsIG1hdGNoZWRSb3V0ZSwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBkZWNvZGVQYXJhbXMobWF0Y2hlZFJvdXRlLnBhcmFtcyksXHJcbiAgICAgICAgICAgICAgICBoYXNoOiBkZWNvZGUobG9jYXRpb25Ob3JtYWxpemVkLmhhc2gpLFxyXG4gICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb206IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWF0Y2hlckxvY2F0aW9uO1xyXG4gICAgICAgIC8vIHBhdGggY291bGQgYmUgcmVsYXRpdmUgaW4gb2JqZWN0IGFzIHdlbGxcclxuICAgICAgICBpZiAoJ3BhdGgnIGluIHJhd0xvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICdwYXJhbXMnIGluIHJhd0xvY2F0aW9uICYmXHJcbiAgICAgICAgICAgICAgICAhKCduYW1lJyBpbiByYXdMb2NhdGlvbikgJiZcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHJhd0xvY2F0aW9uLnBhcmFtcykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBQYXRoIFwiJHtyYXdMb2NhdGlvbi5wYXRofVwiIHdhcyBwYXNzZWQgd2l0aCBwYXJhbXMgYnV0IHRoZXkgd2lsbCBiZSBpZ25vcmVkLiBVc2UgYSBuYW1lZCByb3V0ZSBhbG9uZ3NpZGUgcGFyYW1zIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWF0Y2hlckxvY2F0aW9uID0gYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgcGF0aDogcGFyc2VVUkwocGFyc2VRdWVyeSQxLCByYXdMb2NhdGlvbi5wYXRoLCBjdXJyZW50TG9jYXRpb24ucGF0aCkucGF0aCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwYXNzIGVuY29kZWQgdmFsdWVzIHRvIHRoZSBtYXRjaGVyIHNvIGl0IGNhbiBwcm9kdWNlIGVuY29kZWQgcGF0aCBhbmQgZnVsbFBhdGhcclxuICAgICAgICAgICAgbWF0Y2hlckxvY2F0aW9uID0gYXNzaWduKHt9LCByYXdMb2NhdGlvbiwge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBlbmNvZGVQYXJhbXMocmF3TG9jYXRpb24ucGFyYW1zKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgbG9jYXRpb24gcGFyYW1zIGFyZSBkZWNvZGVkLCB3ZSBuZWVkIHRvIGVuY29kZSB0aGVtIGluIGNhc2UgdGhlXHJcbiAgICAgICAgICAgIC8vIG1hdGNoZXIgbWVyZ2VzIHRoZSBwYXJhbXNcclxuICAgICAgICAgICAgY3VycmVudExvY2F0aW9uLnBhcmFtcyA9IGVuY29kZVBhcmFtcyhjdXJyZW50TG9jYXRpb24ucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1hdGNoZWRSb3V0ZSA9IG1hdGNoZXIucmVzb2x2ZShtYXRjaGVyTG9jYXRpb24sIGN1cnJlbnRMb2NhdGlvbik7XHJcbiAgICAgICAgY29uc3QgaGFzaCA9IHJhd0xvY2F0aW9uLmhhc2ggfHwgJyc7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBoYXNoICYmICFoYXNoLnN0YXJ0c1dpdGgoJyMnKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBBIFxcYGhhc2hcXGAgc2hvdWxkIGFsd2F5cyBzdGFydCB3aXRoIHRoZSBjaGFyYWN0ZXIgXCIjXCIuIFJlcGxhY2UgXCIke2hhc2h9XCIgd2l0aCBcIiMke2hhc2h9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGRlY29kaW5nIHRoZW0pIHRoZSBtYXRjaGVyIG1pZ2h0IGhhdmUgbWVyZ2VkIGN1cnJlbnQgbG9jYXRpb24gcGFyYW1zIHNvXHJcbiAgICAgICAgLy8gd2UgbmVlZCB0byBydW4gdGhlIGRlY29kaW5nIGFnYWluXHJcbiAgICAgICAgbWF0Y2hlZFJvdXRlLnBhcmFtcyA9IG5vcm1hbGl6ZVBhcmFtcyhkZWNvZGVQYXJhbXMobWF0Y2hlZFJvdXRlLnBhcmFtcykpO1xyXG4gICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gc3RyaW5naWZ5VVJMKHN0cmluZ2lmeVF1ZXJ5JDEsIGFzc2lnbih7fSwgcmF3TG9jYXRpb24sIHtcclxuICAgICAgICAgICAgaGFzaDogZW5jb2RlSGFzaChoYXNoKSxcclxuICAgICAgICAgICAgcGF0aDogbWF0Y2hlZFJvdXRlLnBhdGgsXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGxldCBocmVmID0gcm91dGVySGlzdG9yeS5jcmVhdGVIcmVmKGZ1bGxQYXRoKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGlmIChocmVmLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYExvY2F0aW9uIFwiJHtyYXdMb2NhdGlvbn1cIiByZXNvbHZlZCB0byBcIiR7aHJlZn1cIi4gQSByZXNvbHZlZCBsb2NhdGlvbiBjYW5ub3Qgc3RhcnQgd2l0aCBtdWx0aXBsZSBzbGFzaGVzLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFtYXRjaGVkUm91dGUubWF0Y2hlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE5vIG1hdGNoIGZvdW5kIGZvciBsb2NhdGlvbiB3aXRoIHBhdGggXCIkeydwYXRoJyBpbiByYXdMb2NhdGlvbiA/IHJhd0xvY2F0aW9uLnBhdGggOiByYXdMb2NhdGlvbn1cImApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhc3NpZ24oe1xyXG4gICAgICAgICAgICBmdWxsUGF0aCxcclxuICAgICAgICAgICAgLy8ga2VlcCB0aGUgaGFzaCBlbmNvZGVkIHNvIGZ1bGxQYXRoIGlzIGVmZmVjdGl2ZWx5IHBhdGggKyBlbmNvZGVkUXVlcnkgK1xyXG4gICAgICAgICAgICAvLyBoYXNoXHJcbiAgICAgICAgICAgIGhhc2gsXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBcclxuICAgICAgICAgICAgLy8gaWYgdGhlIHVzZXIgaXMgdXNpbmcgYSBjdXN0b20gcXVlcnkgbGliIGxpa2UgcXMsIHdlIG1pZ2h0IGhhdmVcclxuICAgICAgICAgICAgLy8gbmVzdGVkIG9iamVjdHMsIHNvIHdlIGtlZXAgdGhlIHF1ZXJ5IGFzIGlzLCBtZWFuaW5nIGl0IGNhbiBjb250YWluXHJcbiAgICAgICAgICAgIC8vIG51bWJlcnMgYXQgYCRyb3V0ZS5xdWVyeWAsIGJ1dCBhdCB0aGUgcG9pbnQsIHRoZSB1c2VyIHdpbGwgaGF2ZSB0b1xyXG4gICAgICAgICAgICAvLyB1c2UgdGhlaXIgb3duIHR5cGUgYW55d2F5LlxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci1uZXh0L2lzc3Vlcy8zMjgjaXNzdWVjb21tZW50LTY0OTQ4MTU2N1xyXG4gICAgICAgICAgICBzdHJpbmdpZnlRdWVyeSQxID09PSBzdHJpbmdpZnlRdWVyeVxyXG4gICAgICAgICAgICAgICAgPyBub3JtYWxpemVRdWVyeShyYXdMb2NhdGlvbi5xdWVyeSlcclxuICAgICAgICAgICAgICAgIDogcmF3TG9jYXRpb24ucXVlcnksXHJcbiAgICAgICAgfSwgbWF0Y2hlZFJvdXRlLCB7XHJcbiAgICAgICAgICAgIHJlZGlyZWN0ZWRGcm9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBsb2NhdGlvbkFzT2JqZWN0KHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZydcclxuICAgICAgICAgICAgPyBwYXJzZVVSTChwYXJzZVF1ZXJ5JDEsIHRvLCBjdXJyZW50Um91dGUudmFsdWUucGF0aClcclxuICAgICAgICAgICAgOiBhc3NpZ24oe30sIHRvKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uKHRvLCBmcm9tKSB7XHJcbiAgICAgICAgaWYgKHBlbmRpbmdMb2NhdGlvbiAhPT0gdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8sIHtcclxuICAgICAgICAgICAgICAgIGZyb20sXHJcbiAgICAgICAgICAgICAgICB0byxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcHVzaCh0bykge1xyXG4gICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KHRvKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlcGxhY2UodG8pIHtcclxuICAgICAgICByZXR1cm4gcHVzaChhc3NpZ24obG9jYXRpb25Bc09iamVjdCh0byksIHsgcmVwbGFjZTogdHJ1ZSB9KSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBoYW5kbGVSZWRpcmVjdFJlY29yZCh0bykge1xyXG4gICAgICAgIGNvbnN0IGxhc3RNYXRjaGVkID0gdG8ubWF0Y2hlZFt0by5tYXRjaGVkLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIGlmIChsYXN0TWF0Y2hlZCAmJiBsYXN0TWF0Y2hlZC5yZWRpcmVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHJlZGlyZWN0IH0gPSBsYXN0TWF0Y2hlZDtcclxuICAgICAgICAgICAgbGV0IG5ld1RhcmdldExvY2F0aW9uID0gdHlwZW9mIHJlZGlyZWN0ID09PSAnZnVuY3Rpb24nID8gcmVkaXJlY3QodG8pIDogcmVkaXJlY3Q7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3VGFyZ2V0TG9jYXRpb24gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdUYXJnZXRMb2NhdGlvbiA9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VGFyZ2V0TG9jYXRpb24uaW5jbHVkZXMoJz8nKSB8fCBuZXdUYXJnZXRMb2NhdGlvbi5pbmNsdWRlcygnIycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKG5ld1RhcmdldExvY2F0aW9uID0gbG9jYXRpb25Bc09iamVjdChuZXdUYXJnZXRMb2NhdGlvbikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogLy8gZm9yY2UgZW1wdHkgcGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBhdGg6IG5ld1RhcmdldExvY2F0aW9uIH07XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBmb3JjZSBlbXB0eSBwYXJhbXMgd2hlbiBhIHN0cmluZyBpcyBwYXNzZWQgdG8gbGV0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcm91dGVyIHBhcnNlIHRoZW0gYWdhaW5cclxuICAgICAgICAgICAgICAgIG5ld1RhcmdldExvY2F0aW9uLnBhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICEoJ3BhdGgnIGluIG5ld1RhcmdldExvY2F0aW9uKSAmJlxyXG4gICAgICAgICAgICAgICAgISgnbmFtZScgaW4gbmV3VGFyZ2V0TG9jYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHJlZGlyZWN0IGZvdW5kOlxcbiR7SlNPTi5zdHJpbmdpZnkobmV3VGFyZ2V0TG9jYXRpb24sIG51bGwsIDIpfVxcbiB3aGVuIG5hdmlnYXRpbmcgdG8gXCIke3RvLmZ1bGxQYXRofVwiLiBBIHJlZGlyZWN0IG11c3QgY29udGFpbiBhIG5hbWUgb3IgcGF0aC4gVGhpcyB3aWxsIGJyZWFrIGluIHByb2R1Y3Rpb24uYCk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVkaXJlY3QnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXNzaWduKHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB0by5xdWVyeSxcclxuICAgICAgICAgICAgICAgIGhhc2g6IHRvLmhhc2gsXHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHRvLnBhcmFtcyxcclxuICAgICAgICAgICAgfSwgbmV3VGFyZ2V0TG9jYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2hXaXRoUmVkaXJlY3QodG8sIHJlZGlyZWN0ZWRGcm9tKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0TG9jYXRpb24gPSAocGVuZGluZ0xvY2F0aW9uID0gcmVzb2x2ZSh0bykpO1xyXG4gICAgICAgIGNvbnN0IGZyb20gPSBjdXJyZW50Um91dGUudmFsdWU7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRvLnN0YXRlO1xyXG4gICAgICAgIGNvbnN0IGZvcmNlID0gdG8uZm9yY2U7XHJcbiAgICAgICAgLy8gdG8gY291bGQgYmUgYSBzdHJpbmcgd2hlcmUgYHJlcGxhY2VgIGlzIGEgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCByZXBsYWNlID0gdG8ucmVwbGFjZSA9PT0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBzaG91bGRSZWRpcmVjdCA9IGhhbmRsZVJlZGlyZWN0UmVjb3JkKHRhcmdldExvY2F0aW9uKTtcclxuICAgICAgICBpZiAoc2hvdWxkUmVkaXJlY3QpXHJcbiAgICAgICAgICAgIHJldHVybiBwdXNoV2l0aFJlZGlyZWN0KGFzc2lnbihsb2NhdGlvbkFzT2JqZWN0KHNob3VsZFJlZGlyZWN0KSwge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBmb3JjZSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2UsXHJcbiAgICAgICAgICAgIH0pLCBcclxuICAgICAgICAgICAgLy8ga2VlcCBvcmlnaW5hbCByZWRpcmVjdGVkRnJvbSBpZiBpdCBleGlzdHNcclxuICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20gfHwgdGFyZ2V0TG9jYXRpb24pO1xyXG4gICAgICAgIC8vIGlmIGl0IHdhcyBhIHJlZGlyZWN0IHdlIGFscmVhZHkgY2FsbGVkIGBwdXNoV2l0aFJlZGlyZWN0YCBhYm92ZVxyXG4gICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSB0YXJnZXRMb2NhdGlvbjtcclxuICAgICAgICB0b0xvY2F0aW9uLnJlZGlyZWN0ZWRGcm9tID0gcmVkaXJlY3RlZEZyb207XHJcbiAgICAgICAgbGV0IGZhaWx1cmU7XHJcbiAgICAgICAgaWYgKCFmb3JjZSAmJiBpc1NhbWVSb3V0ZUxvY2F0aW9uKHN0cmluZ2lmeVF1ZXJ5JDEsIGZyb20sIHRhcmdldExvY2F0aW9uKSkge1xyXG4gICAgICAgICAgICBmYWlsdXJlID0gY3JlYXRlUm91dGVyRXJyb3IoMTYgLyogTkFWSUdBVElPTl9EVVBMSUNBVEVEICovLCB7IHRvOiB0b0xvY2F0aW9uLCBmcm9tIH0pO1xyXG4gICAgICAgICAgICAvLyB0cmlnZ2VyIHNjcm9sbCB0byBhbGxvdyBzY3JvbGxpbmcgdG8gdGhlIHNhbWUgYW5jaG9yXHJcbiAgICAgICAgICAgIGhhbmRsZVNjcm9sbChmcm9tLCBmcm9tLCBcclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIHB1c2gsIHRoZSBvbmx5IHdheSBmb3IgaXQgdG8gYmUgdHJpZ2dlcmVkIGZyb20gYVxyXG4gICAgICAgICAgICAvLyBoaXN0b3J5Lmxpc3RlbiBpcyB3aXRoIGEgcmVkaXJlY3QsIHdoaWNoIG1ha2VzIGl0IGJlY29tZSBhIHB1c2hcclxuICAgICAgICAgICAgdHJ1ZSwgXHJcbiAgICAgICAgICAgIC8vIFRoaXMgY2Fubm90IGJlIHRoZSBmaXJzdCBuYXZpZ2F0aW9uIGJlY2F1c2UgdGhlIGluaXRpYWwgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gY2Fubm90IGJlIG1hbnVhbGx5IG5hdmlnYXRlZCB0b1xyXG4gICAgICAgICAgICBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoZmFpbHVyZSA/IFByb21pc2UucmVzb2x2ZShmYWlsdXJlKSA6IG5hdmlnYXRlKHRvTG9jYXRpb24sIGZyb20pKVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yKVxyXG4gICAgICAgICAgICA/IGVycm9yXHJcbiAgICAgICAgICAgIDogLy8gcmVqZWN0IGFueSB1bmtub3duIGVycm9yXHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvTG9jYXRpb24sIGZyb20pKVxyXG4gICAgICAgICAgICAudGhlbigoZmFpbHVyZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmF2aWdhdGlvbkZhaWx1cmUoZmFpbHVyZSwgMiAvKiBOQVZJR0FUSU9OX0dVQVJEX1JFRElSRUNUICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIHJlZGlyZWN0aW5nIHRvIHRoZSBzYW1lIGxvY2F0aW9uIHdlIHdlcmUgYWxyZWFkeSBhdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NhbWVSb3V0ZUxvY2F0aW9uKHN0cmluZ2lmeVF1ZXJ5JDEsIHJlc29sdmUoZmFpbHVyZS50byksIHRvTG9jYXRpb24pICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFuZCB3ZSBoYXZlIGRvbmUgaXQgYSBjb3VwbGUgb2YgdGltZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYWRkZWQgb25seSBpbiBkZXZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlZGlyZWN0ZWRGcm9tLl9jb3VudCA9IHJlZGlyZWN0ZWRGcm9tLl9jb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20uX2NvdW50ICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAxKSA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYERldGVjdGVkIGFuIGluZmluaXRlIHJlZGlyZWN0aW9uIGluIGEgbmF2aWdhdGlvbiBndWFyZCB3aGVuIGdvaW5nIGZyb20gXCIke2Zyb20uZnVsbFBhdGh9XCIgdG8gXCIke3RvTG9jYXRpb24uZnVsbFBhdGh9XCIuIEFib3J0aW5nIHRvIGF2b2lkIGEgU3RhY2sgT3ZlcmZsb3cuIFRoaXMgd2lsbCBicmVhayBpbiBwcm9kdWN0aW9uIGlmIG5vdCBmaXhlZC5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignSW5maW5pdGUgcmVkaXJlY3QgaW4gbmF2aWdhdGlvbiBndWFyZCcpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1c2hXaXRoUmVkaXJlY3QoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8ga2VlcCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgYXNzaWduKGxvY2F0aW9uQXNPYmplY3QoZmFpbHVyZS50byksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgcmVkaXJlY3RlZEZyb20gaWYgYW55XHJcbiAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RlZEZyb20gfHwgdG9Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBmYWlsIHdlIGRvbid0IGZpbmFsaXplIHRoZSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICAgICBmYWlsdXJlID0gZmluYWxpemVOYXZpZ2F0aW9uKHRvTG9jYXRpb24sIGZyb20sIHRydWUsIHJlcGxhY2UsIGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyaWdnZXJBZnRlckVhY2godG9Mb2NhdGlvbiwgZnJvbSwgZmFpbHVyZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIZWxwZXIgdG8gcmVqZWN0IGFuZCBza2lwIGFsbCBuYXZpZ2F0aW9uIGd1YXJkcyBpZiBhIG5ldyBuYXZpZ2F0aW9uIGhhcHBlbmVkXHJcbiAgICAgKiBAcGFyYW0gdG9cclxuICAgICAqIEBwYXJhbSBmcm9tXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNoZWNrQ2FuY2VsZWROYXZpZ2F0aW9uQW5kUmVqZWN0KHRvLCBmcm9tKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbih0bywgZnJvbSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yID8gUHJvbWlzZS5yZWplY3QoZXJyb3IpIDogUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICAvLyBUT0RPOiByZWZhY3RvciB0aGUgd2hvbGUgYmVmb3JlIGd1YXJkcyBieSBpbnRlcm5hbGx5IHVzaW5nIHJvdXRlci5iZWZvcmVFYWNoXHJcbiAgICBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgZnJvbSkge1xyXG4gICAgICAgIGxldCBndWFyZHM7XHJcbiAgICAgICAgY29uc3QgW2xlYXZpbmdSZWNvcmRzLCB1cGRhdGluZ1JlY29yZHMsIGVudGVyaW5nUmVjb3Jkc10gPSBleHRyYWN0Q2hhbmdpbmdSZWNvcmRzKHRvLCBmcm9tKTtcclxuICAgICAgICAvLyBhbGwgY29tcG9uZW50cyBoZXJlIGhhdmUgYmVlbiByZXNvbHZlZCBvbmNlIGJlY2F1c2Ugd2UgYXJlIGxlYXZpbmdcclxuICAgICAgICBndWFyZHMgPSBleHRyYWN0Q29tcG9uZW50c0d1YXJkcyhsZWF2aW5nUmVjb3Jkcy5yZXZlcnNlKCksICdiZWZvcmVSb3V0ZUxlYXZlJywgdG8sIGZyb20pO1xyXG4gICAgICAgIC8vIGxlYXZpbmdSZWNvcmRzIGlzIGFscmVhZHkgcmV2ZXJzZWRcclxuICAgICAgICBmb3IgKGNvbnN0IHJlY29yZCBvZiBsZWF2aW5nUmVjb3Jkcykge1xyXG4gICAgICAgICAgICByZWNvcmQubGVhdmVHdWFyZHMuZm9yRWFjaChndWFyZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2sgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbkFuZFJlamVjdC5iaW5kKG51bGwsIHRvLCBmcm9tKTtcclxuICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlUm91dGVMZWF2ZSBndWFyZHNcclxuICAgICAgICByZXR1cm4gKHJ1bkd1YXJkUXVldWUoZ3VhcmRzKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGdsb2JhbCBndWFyZHMgYmVmb3JlRWFjaFxyXG4gICAgICAgICAgICBndWFyZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBiZWZvcmVHdWFyZHMubGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGluIGNvbXBvbmVudHMgYmVmb3JlUm91dGVVcGRhdGVcclxuICAgICAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHModXBkYXRpbmdSZWNvcmRzLCAnYmVmb3JlUm91dGVVcGRhdGUnLCB0bywgZnJvbSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHVwZGF0aW5nUmVjb3Jkcykge1xyXG4gICAgICAgICAgICAgICAgcmVjb3JkLnVwZGF0ZUd1YXJkcy5mb3JFYWNoKGd1YXJkID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGd1YXJkLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICAvLyBydW4gdGhlIHF1ZXVlIG9mIHBlciByb3V0ZSBiZWZvcmVFbnRlciBndWFyZHNcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIHRoZSByb3V0ZSBiZWZvcmVFbnRlclxyXG4gICAgICAgICAgICBndWFyZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgdG8ubWF0Y2hlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHRyaWdnZXIgYmVmb3JlRW50ZXIgb24gcmV1c2VkIHZpZXdzXHJcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkLmJlZm9yZUVudGVyICYmICFmcm9tLm1hdGNoZWQuaW5jbHVkZXMocmVjb3JkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlY29yZC5iZWZvcmVFbnRlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBiZWZvcmVFbnRlciBvZiByZWNvcmQuYmVmb3JlRW50ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWFyZHMucHVzaChndWFyZFRvUHJvbWlzZUZuKGJlZm9yZUVudGVyLCB0bywgZnJvbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihyZWNvcmQuYmVmb3JlRW50ZXIsIHRvLCBmcm9tKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGd1YXJkcy5wdXNoKGNhbmNlbGVkTmF2aWdhdGlvbkNoZWNrKTtcclxuICAgICAgICAgICAgLy8gcnVuIHRoZSBxdWV1ZSBvZiBwZXIgcm91dGUgYmVmb3JlRW50ZXIgZ3VhcmRzXHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBOT1RFOiBhdCB0aGlzIHBvaW50IHRvLm1hdGNoZWQgaXMgbm9ybWFsaXplZCBhbmQgZG9lcyBub3QgY29udGFpbiBhbnkgKCkgPT4gUHJvbWlzZTxDb21wb25lbnQ+XHJcbiAgICAgICAgICAgIC8vIGNsZWFyIGV4aXN0aW5nIGVudGVyQ2FsbGJhY2tzLCB0aGVzZSBhcmUgYWRkZWQgYnkgZXh0cmFjdENvbXBvbmVudHNHdWFyZHNcclxuICAgICAgICAgICAgdG8ubWF0Y2hlZC5mb3JFYWNoKHJlY29yZCA9PiAocmVjb3JkLmVudGVyQ2FsbGJhY2tzID0ge30pKTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgaW4tY29tcG9uZW50IGJlZm9yZVJvdXRlRW50ZXJcclxuICAgICAgICAgICAgZ3VhcmRzID0gZXh0cmFjdENvbXBvbmVudHNHdWFyZHMoZW50ZXJpbmdSZWNvcmRzLCAnYmVmb3JlUm91dGVFbnRlcicsIHRvLCBmcm9tKTtcclxuICAgICAgICAgICAgZ3VhcmRzLnB1c2goY2FuY2VsZWROYXZpZ2F0aW9uQ2hlY2spO1xyXG4gICAgICAgICAgICAvLyBydW4gdGhlIHF1ZXVlIG9mIHBlciByb3V0ZSBiZWZvcmVFbnRlciBndWFyZHNcclxuICAgICAgICAgICAgcmV0dXJuIHJ1bkd1YXJkUXVldWUoZ3VhcmRzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGdsb2JhbCBndWFyZHMgYmVmb3JlUmVzb2x2ZVxyXG4gICAgICAgICAgICBndWFyZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBndWFyZCBvZiBiZWZvcmVSZXNvbHZlR3VhcmRzLmxpc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgZ3VhcmRzLnB1c2goZ3VhcmRUb1Byb21pc2VGbihndWFyZCwgdG8sIGZyb20pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBndWFyZHMucHVzaChjYW5jZWxlZE5hdmlnYXRpb25DaGVjayk7XHJcbiAgICAgICAgICAgIHJldHVybiBydW5HdWFyZFF1ZXVlKGd1YXJkcyk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gY2F0Y2ggYW55IG5hdmlnYXRpb24gY2FuY2VsZWRcclxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiBpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgOCAvKiBOQVZJR0FUSU9OX0NBTkNFTExFRCAqLylcclxuICAgICAgICAgICAgPyBlcnJcclxuICAgICAgICAgICAgOiBQcm9taXNlLnJlamVjdChlcnIpKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyQWZ0ZXJFYWNoKHRvLCBmcm9tLCBmYWlsdXJlKSB7XHJcbiAgICAgICAgLy8gbmF2aWdhdGlvbiBpcyBjb25maXJtZWQsIGNhbGwgYWZ0ZXJHdWFyZHNcclxuICAgICAgICAvLyBUT0RPOiB3cmFwIHdpdGggZXJyb3IgaGFuZGxlcnNcclxuICAgICAgICBmb3IgKGNvbnN0IGd1YXJkIG9mIGFmdGVyR3VhcmRzLmxpc3QoKSlcclxuICAgICAgICAgICAgZ3VhcmQodG8sIGZyb20sIGZhaWx1cmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiAtIENsZWFucyB1cCBhbnkgbmF2aWdhdGlvbiBndWFyZHNcclxuICAgICAqIC0gQ2hhbmdlcyB0aGUgdXJsIGlmIG5lY2Vzc2FyeVxyXG4gICAgICogLSBDYWxscyB0aGUgc2Nyb2xsQmVoYXZpb3JcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZmluYWxpemVOYXZpZ2F0aW9uKHRvTG9jYXRpb24sIGZyb20sIGlzUHVzaCwgcmVwbGFjZSwgZGF0YSkge1xyXG4gICAgICAgIC8vIGEgbW9yZSByZWNlbnQgbmF2aWdhdGlvbiB0b29rIHBsYWNlXHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBjaGVja0NhbmNlbGVkTmF2aWdhdGlvbih0b0xvY2F0aW9uLCBmcm9tKTtcclxuICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIGFzIHB1c2ggaWYgaXQncyBub3QgdGhlIGZpcnN0IG5hdmlnYXRpb25cclxuICAgICAgICBjb25zdCBpc0ZpcnN0TmF2aWdhdGlvbiA9IGZyb20gPT09IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSAhaXNCcm93c2VyID8ge30gOiBoaXN0b3J5LnN0YXRlO1xyXG4gICAgICAgIC8vIGNoYW5nZSBVUkwgb25seSBpZiB0aGUgdXNlciBkaWQgYSBwdXNoL3JlcGxhY2UgYW5kIGlmIGl0J3Mgbm90IHRoZSBpbml0aWFsIG5hdmlnYXRpb24gYmVjYXVzZVxyXG4gICAgICAgIC8vIGl0J3MganVzdCByZWZsZWN0aW5nIHRoZSB1cmxcclxuICAgICAgICBpZiAoaXNQdXNoKSB7XHJcbiAgICAgICAgICAgIC8vIG9uIHRoZSBpbml0aWFsIG5hdmlnYXRpb24sIHdlIHdhbnQgdG8gcmV1c2UgdGhlIHNjcm9sbCBwb3NpdGlvbiBmcm9tXHJcbiAgICAgICAgICAgIC8vIGhpc3Rvcnkgc3RhdGUgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgIGlmIChyZXBsYWNlIHx8IGlzRmlyc3ROYXZpZ2F0aW9uKVxyXG4gICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5yZXBsYWNlKHRvTG9jYXRpb24uZnVsbFBhdGgsIGFzc2lnbih7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsOiBpc0ZpcnN0TmF2aWdhdGlvbiAmJiBzdGF0ZSAmJiBzdGF0ZS5zY3JvbGwsXHJcbiAgICAgICAgICAgICAgICB9LCBkYXRhKSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkucHVzaCh0b0xvY2F0aW9uLmZ1bGxQYXRoLCBkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWNjZXB0IGN1cnJlbnQgbmF2aWdhdGlvblxyXG4gICAgICAgIGN1cnJlbnRSb3V0ZS52YWx1ZSA9IHRvTG9jYXRpb247XHJcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRvTG9jYXRpb24sIGZyb20sIGlzUHVzaCwgaXNGaXJzdE5hdmlnYXRpb24pO1xyXG4gICAgICAgIG1hcmtBc1JlYWR5KCk7XHJcbiAgICB9XHJcbiAgICBsZXQgcmVtb3ZlSGlzdG9yeUxpc3RlbmVyO1xyXG4gICAgLy8gYXR0YWNoIGxpc3RlbmVyIHRvIGhpc3RvcnkgdG8gdHJpZ2dlciBuYXZpZ2F0aW9uc1xyXG4gICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgcmVtb3ZlSGlzdG9yeUxpc3RlbmVyID0gcm91dGVySGlzdG9yeS5saXN0ZW4oKHRvLCBfZnJvbSwgaW5mbykgPT4ge1xyXG4gICAgICAgICAgICAvLyBjYW5ub3QgYmUgYSByZWRpcmVjdCByb3V0ZSBiZWNhdXNlIGl0IHdhcyBpbiBoaXN0b3J5XHJcbiAgICAgICAgICAgIGxldCB0b0xvY2F0aW9uID0gcmVzb2x2ZSh0byk7XHJcbiAgICAgICAgICAgIC8vIGR1ZSB0byBkeW5hbWljIHJvdXRpbmcsIGFuZCB0byBoYXNoIGhpc3Rvcnkgd2l0aCBtYW51YWwgbmF2aWdhdGlvblxyXG4gICAgICAgICAgICAvLyAobWFudWFsbHkgY2hhbmdpbmcgdGhlIHVybCBvciBjYWxsaW5nIGhpc3RvcnkuaGFzaCA9ICcjL3NvbWV3aGVyZScpLFxyXG4gICAgICAgICAgICAvLyB0aGVyZSBjb3VsZCBiZSBhIHJlZGlyZWN0IHJlY29yZCBpbiBoaXN0b3J5XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFJlZGlyZWN0ID0gaGFuZGxlUmVkaXJlY3RSZWNvcmQodG9Mb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRSZWRpcmVjdCkge1xyXG4gICAgICAgICAgICAgICAgcHVzaFdpdGhSZWRpcmVjdChhc3NpZ24oc2hvdWxkUmVkaXJlY3QsIHsgcmVwbGFjZTogdHJ1ZSB9KSwgdG9Mb2NhdGlvbikuY2F0Y2gobm9vcCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdG9Mb2NhdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgZnJvbSA9IGN1cnJlbnRSb3V0ZS52YWx1ZTtcclxuICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG1vdmVkIHRvIHdlYiBoaXN0b3J5P1xyXG4gICAgICAgICAgICBpZiAoaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBzYXZlU2Nyb2xsUG9zaXRpb24oZ2V0U2Nyb2xsS2V5KGZyb20uZnVsbFBhdGgsIGluZm8uZGVsdGEpLCBjb21wdXRlU2Nyb2xsUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmF2aWdhdGUodG9Mb2NhdGlvbiwgZnJvbSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVycm9yLCA0IC8qIE5BVklHQVRJT05fQUJPUlRFRCAqLyB8IDggLyogTkFWSUdBVElPTl9DQU5DRUxMRUQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmF2aWdhdGlvbkZhaWx1cmUoZXJyb3IsIDIgLyogTkFWSUdBVElPTl9HVUFSRF9SRURJUkVDVCAqLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIGNvdWxkIGNhbGwgaWYgKGluZm8uZGVsdGEpIHJvdXRlckhpc3RvcnkuZ28oLWluZm8uZGVsdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2UpIGJ1dCB0aGlzIGlzIGJ1ZyBwcm9uZSBhcyB3ZSBoYXZlIG5vIHdheSB0byB3YWl0IHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24gdG8gYmUgZmluaXNoZWQgYmVmb3JlIGNhbGxpbmcgcHVzaFdpdGhSZWRpcmVjdC4gVXNpbmdcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIHNldFRpbWVvdXQgb2YgMTZtcyBzZWVtcyB0byB3b3JrIGJ1dCB0aGVyZSBpcyBub3QgZ3VhcmFudGVlIGZvclxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHRvIHdvcmsgb24gZXZlcnkgYnJvd3Nlci4gU28gSW5zdGVhZCB3ZSBkbyBub3QgcmVzdG9yZSB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBoaXN0b3J5IGVudHJ5IGFuZCB0cmlnZ2VyIGEgbmV3IG5hdmlnYXRpb24gYXMgcmVxdWVzdGVkIGJ5IHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hdmlnYXRpb24gZ3VhcmQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGVycm9yIGlzIGFscmVhZHkgaGFuZGxlZCBieSByb3V0ZXIucHVzaCB3ZSBqdXN0IHdhbnQgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2dnaW5nIHRoZSBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXaXRoUmVkaXJlY3QoZXJyb3IudG8sIHRvTG9jYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAvLyBhdm9pZCBhbiB1bmNhdWdodCByZWplY3Rpb24sIGxldCBwdXNoIGNhbGwgdHJpZ2dlckVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmYWlsdXJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWFudWFsIGNoYW5nZSBpbiBoYXNoIGhpc3RvcnkgIzkxNiBlbmRpbmcgdXAgaW4gdGhlIFVSTCBub3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hhbmdpbmcgYnV0IGl0IHdhcyBjaGFuZ2VkIGJ5IHRoZSBtYW51YWwgdXJsIGNoYW5nZSwgc28gd2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byBtYW51YWxseSBjaGFuZ2UgaXQgb3Vyc2VsdmVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGZhaWx1cmUsIDQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE2IC8qIE5BVklHQVRJT05fRFVQTElDQVRFRCAqLykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmZvLmRlbHRhICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLnR5cGUgPT09IE5hdmlnYXRpb25UeXBlLnBvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF2b2lkIHRoZSB0aGVuIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZG8gbm90IHJlc3RvcmUgaGlzdG9yeSBvbiB1bmtub3duIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGluZm8uZGVsdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5yZWNvZ25pemVkIGVycm9yLCB0cmFuc2ZlciB0byB0aGUgZ2xvYmFsIGhhbmRsZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvTG9jYXRpb24sIGZyb20pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZhaWx1cmUpID0+IHtcclxuICAgICAgICAgICAgICAgIGZhaWx1cmUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmUgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxpemVOYXZpZ2F0aW9uKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciBuYXZpZ2F0aW9uLCBhbGwgbWF0Y2hlZCBjb21wb25lbnRzIGFyZSByZXNvbHZlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b0xvY2F0aW9uLCBmcm9tLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXZlcnQgdGhlIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVySGlzdG9yeS5nbygtaW5mby5kZWx0YSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbmZvLnR5cGUgPT09IE5hdmlnYXRpb25UeXBlLnBvcCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc05hdmlnYXRpb25GYWlsdXJlKGZhaWx1cmUsIDQgLyogTkFWSUdBVElPTl9BQk9SVEVEICovIHwgMTYgLyogTkFWSUdBVElPTl9EVVBMSUNBVEVEICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYW51YWwgY2hhbmdlIGluIGhhc2ggaGlzdG9yeSAjOTE2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgbGlrZSBhIHB1c2ggYnV0IGxhY2tzIHRoZSBpbmZvcm1hdGlvbiBvZiB0aGUgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlckhpc3RvcnkuZ28oLTEsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQWZ0ZXJFYWNoKHRvTG9jYXRpb24sIGZyb20sIGZhaWx1cmUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKG5vb3ApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gSW5pdGlhbGl6YXRpb24gYW5kIEVycm9yc1xyXG4gICAgbGV0IHJlYWR5SGFuZGxlcnMgPSB1c2VDYWxsYmFja3MoKTtcclxuICAgIGxldCBlcnJvckhhbmRsZXJzID0gdXNlQ2FsbGJhY2tzKCk7XHJcbiAgICBsZXQgcmVhZHk7XHJcbiAgICAvKipcclxuICAgICAqIFRyaWdnZXIgZXJyb3JIYW5kbGVycyBhZGRlZCB2aWEgb25FcnJvciBhbmQgdGhyb3dzIHRoZSBlcnJvciBhcyB3ZWxsXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGVycm9yIC0gZXJyb3IgdG8gdGhyb3dcclxuICAgICAqIEBwYXJhbSB0byAtIGxvY2F0aW9uIHdlIHdlcmUgbmF2aWdhdGluZyB0byB3aGVuIHRoZSBlcnJvciBoYXBwZW5lZFxyXG4gICAgICogQHBhcmFtIGZyb20gLSBsb2NhdGlvbiB3ZSB3ZXJlIG5hdmlnYXRpbmcgZnJvbSB3aGVuIHRoZSBlcnJvciBoYXBwZW5lZFxyXG4gICAgICogQHJldHVybnMgdGhlIGVycm9yIGFzIGEgcmVqZWN0ZWQgcHJvbWlzZVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB0cmlnZ2VyRXJyb3IoZXJyb3IsIHRvLCBmcm9tKSB7XHJcbiAgICAgICAgbWFya0FzUmVhZHkoZXJyb3IpO1xyXG4gICAgICAgIGNvbnN0IGxpc3QgPSBlcnJvckhhbmRsZXJzLmxpc3QoKTtcclxuICAgICAgICBpZiAobGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGlzdC5mb3JFYWNoKGhhbmRsZXIgPT4gaGFuZGxlcihlcnJvciwgdG8sIGZyb20pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNSZWFkeSgpIHtcclxuICAgICAgICBpZiAocmVhZHkgJiYgY3VycmVudFJvdXRlLnZhbHVlICE9PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKVxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgcmVhZHlIYW5kbGVycy5hZGQoW3Jlc29sdmUsIHJlamVjdF0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXJrIHRoZSByb3V0ZXIgYXMgcmVhZHksIHJlc29sdmluZyB0aGUgcHJvbWlzZWQgcmV0dXJuZWQgYnkgaXNSZWFkeSgpLiBDYW5cclxuICAgICAqIG9ubHkgYmUgY2FsbGVkIG9uY2UsIG90aGVyd2lzZSBkb2VzIG5vdGhpbmcuXHJcbiAgICAgKiBAcGFyYW0gZXJyIC0gb3B0aW9uYWwgZXJyb3JcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbWFya0FzUmVhZHkoZXJyKSB7XHJcbiAgICAgICAgaWYgKHJlYWR5KVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgcmVhZHkgPSB0cnVlO1xyXG4gICAgICAgIHNldHVwTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgcmVhZHlIYW5kbGVyc1xyXG4gICAgICAgICAgICAubGlzdCgpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKChbcmVzb2x2ZSwgcmVqZWN0XSkgPT4gKGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZSgpKSk7XHJcbiAgICAgICAgcmVhZHlIYW5kbGVycy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgLy8gU2Nyb2xsIGJlaGF2aW9yXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVTY3JvbGwodG8sIGZyb20sIGlzUHVzaCwgaXNGaXJzdE5hdmlnYXRpb24pIHtcclxuICAgICAgICBjb25zdCB7IHNjcm9sbEJlaGF2aW9yIH0gPSBvcHRpb25zO1xyXG4gICAgICAgIGlmICghaXNCcm93c2VyIHx8ICFzY3JvbGxCZWhhdmlvcilcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIGxldCBzY3JvbGxQb3NpdGlvbiA9ICghaXNQdXNoICYmIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oZ2V0U2Nyb2xsS2V5KHRvLmZ1bGxQYXRoLCAwKSkpIHx8XHJcbiAgICAgICAgICAgICgoaXNGaXJzdE5hdmlnYXRpb24gfHwgIWlzUHVzaCkgJiZcclxuICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3RhdGUgJiZcclxuICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3RhdGUuc2Nyb2xsKSB8fFxyXG4gICAgICAgICAgICBudWxsO1xyXG4gICAgICAgIHJldHVybiBuZXh0VGljaygpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHNjcm9sbEJlaGF2aW9yKHRvLCBmcm9tLCBzY3JvbGxQb3NpdGlvbikpXHJcbiAgICAgICAgICAgIC50aGVuKHBvc2l0aW9uID0+IHBvc2l0aW9uICYmIHNjcm9sbFRvUG9zaXRpb24ocG9zaXRpb24pKVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHRyaWdnZXJFcnJvcihlcnIsIHRvLCBmcm9tKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBnbyA9IChkZWx0YSkgPT4gcm91dGVySGlzdG9yeS5nbyhkZWx0YSk7XHJcbiAgICBsZXQgc3RhcnRlZDtcclxuICAgIGNvbnN0IGluc3RhbGxlZEFwcHMgPSBuZXcgU2V0KCk7XHJcbiAgICBjb25zdCByb3V0ZXIgPSB7XHJcbiAgICAgICAgY3VycmVudFJvdXRlLFxyXG4gICAgICAgIGFkZFJvdXRlLFxyXG4gICAgICAgIHJlbW92ZVJvdXRlLFxyXG4gICAgICAgIGhhc1JvdXRlLFxyXG4gICAgICAgIGdldFJvdXRlcyxcclxuICAgICAgICByZXNvbHZlLFxyXG4gICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgcHVzaCxcclxuICAgICAgICByZXBsYWNlLFxyXG4gICAgICAgIGdvLFxyXG4gICAgICAgIGJhY2s6ICgpID0+IGdvKC0xKSxcclxuICAgICAgICBmb3J3YXJkOiAoKSA9PiBnbygxKSxcclxuICAgICAgICBiZWZvcmVFYWNoOiBiZWZvcmVHdWFyZHMuYWRkLFxyXG4gICAgICAgIGJlZm9yZVJlc29sdmU6IGJlZm9yZVJlc29sdmVHdWFyZHMuYWRkLFxyXG4gICAgICAgIGFmdGVyRWFjaDogYWZ0ZXJHdWFyZHMuYWRkLFxyXG4gICAgICAgIG9uRXJyb3I6IGVycm9ySGFuZGxlcnMuYWRkLFxyXG4gICAgICAgIGlzUmVhZHksXHJcbiAgICAgICAgaW5zdGFsbChhcHApIHtcclxuICAgICAgICAgICAgY29uc3Qgcm91dGVyID0gdGhpcztcclxuICAgICAgICAgICAgYXBwLmNvbXBvbmVudCgnUm91dGVyTGluaycsIFJvdXRlckxpbmspO1xyXG4gICAgICAgICAgICBhcHAuY29tcG9uZW50KCdSb3V0ZXJWaWV3JywgUm91dGVyVmlldyk7XHJcbiAgICAgICAgICAgIGFwcC5jb25maWcuZ2xvYmFsUHJvcGVydGllcy4kcm91dGVyID0gcm91dGVyO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLCAnJHJvdXRlJywge1xyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoY3VycmVudFJvdXRlKSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaW5pdGlhbCBuYXZpZ2F0aW9uIGlzIG9ubHkgbmVjZXNzYXJ5IG9uIGNsaWVudCwgb24gc2VydmVyIGl0IGRvZXNuJ3RcclxuICAgICAgICAgICAgLy8gbWFrZSBzZW5zZSBiZWNhdXNlIGl0IHdpbGwgY3JlYXRlIGFuIGV4dHJhIHVubmVjZXNzYXJ5IG5hdmlnYXRpb24gYW5kIGNvdWxkXHJcbiAgICAgICAgICAgIC8vIGxlYWQgdG8gcHJvYmxlbXNcclxuICAgICAgICAgICAgaWYgKGlzQnJvd3NlciAmJlxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBmb3IgdGhlIGluaXRpYWwgbmF2aWdhdGlvbiBjbGllbnQgc2lkZSB0byBhdm9pZCBwdXNoaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSB0aW1lcyB3aGVuIHRoZSByb3V0ZXIgaXMgdXNlZCBpbiBtdWx0aXBsZSBhcHBzXHJcbiAgICAgICAgICAgICAgICAhc3RhcnRlZCAmJlxyXG4gICAgICAgICAgICAgICAgY3VycmVudFJvdXRlLnZhbHVlID09PSBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgYWJvdmVcclxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcHVzaChyb3V0ZXJIaXN0b3J5LmxvY2F0aW9uKS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ1VuZXhwZWN0ZWQgZXJyb3Igd2hlbiBzdGFydGluZyB0aGUgcm91dGVyOicsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByZWFjdGl2ZVJvdXRlID0ge307XHJcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBTVEFSVF9MT0NBVElPTl9OT1JNQUxJWkVEKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiB0aGUga2V5IG1hdGNoZXNcclxuICAgICAgICAgICAgICAgIHJlYWN0aXZlUm91dGVba2V5XSA9IGNvbXB1dGVkKCgpID0+IGN1cnJlbnRSb3V0ZS52YWx1ZVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcHAucHJvdmlkZShyb3V0ZXJLZXksIHJvdXRlcik7XHJcbiAgICAgICAgICAgIGFwcC5wcm92aWRlKHJvdXRlTG9jYXRpb25LZXksIHJlYWN0aXZlKHJlYWN0aXZlUm91dGUpKTtcclxuICAgICAgICAgICAgYXBwLnByb3ZpZGUocm91dGVyVmlld0xvY2F0aW9uS2V5LCBjdXJyZW50Um91dGUpO1xyXG4gICAgICAgICAgICBsZXQgdW5tb3VudEFwcCA9IGFwcC51bm1vdW50O1xyXG4gICAgICAgICAgICBpbnN0YWxsZWRBcHBzLmFkZChhcHApO1xyXG4gICAgICAgICAgICBhcHAudW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbGxlZEFwcHMuZGVsZXRlKGFwcCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkQXBwcy5zaXplIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUhpc3RvcnlMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSb3V0ZS52YWx1ZSA9IFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50QXBwKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykgJiYgaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgICAgICBhZGREZXZ0b29scyhhcHAsIHJvdXRlciwgbWF0Y2hlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIHJldHVybiByb3V0ZXI7XHJcbn1cclxuZnVuY3Rpb24gcnVuR3VhcmRRdWV1ZShndWFyZHMpIHtcclxuICAgIHJldHVybiBndWFyZHMucmVkdWNlKChwcm9taXNlLCBndWFyZCkgPT4gcHJvbWlzZS50aGVuKCgpID0+IGd1YXJkKCkpLCBQcm9taXNlLnJlc29sdmUoKSk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdENoYW5naW5nUmVjb3Jkcyh0bywgZnJvbSkge1xyXG4gICAgY29uc3QgbGVhdmluZ1JlY29yZHMgPSBbXTtcclxuICAgIGNvbnN0IHVwZGF0aW5nUmVjb3JkcyA9IFtdO1xyXG4gICAgY29uc3QgZW50ZXJpbmdSZWNvcmRzID0gW107XHJcbiAgICBjb25zdCBsZW4gPSBNYXRoLm1heChmcm9tLm1hdGNoZWQubGVuZ3RoLCB0by5tYXRjaGVkLmxlbmd0aCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcmVjb3JkRnJvbSA9IGZyb20ubWF0Y2hlZFtpXTtcclxuICAgICAgICBpZiAocmVjb3JkRnJvbSkge1xyXG4gICAgICAgICAgICBpZiAodG8ubWF0Y2hlZC5maW5kKHJlY29yZCA9PiBpc1NhbWVSb3V0ZVJlY29yZChyZWNvcmQsIHJlY29yZEZyb20pKSlcclxuICAgICAgICAgICAgICAgIHVwZGF0aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBsZWF2aW5nUmVjb3Jkcy5wdXNoKHJlY29yZEZyb20pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZWNvcmRUbyA9IHRvLm1hdGNoZWRbaV07XHJcbiAgICAgICAgaWYgKHJlY29yZFRvKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSB0eXBlIGRvZXNuJ3QgbWF0dGVyIGJlY2F1c2Ugd2UgYXJlIGNvbXBhcmluZyBwZXIgcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIGlmICghZnJvbS5tYXRjaGVkLmZpbmQocmVjb3JkID0+IGlzU2FtZVJvdXRlUmVjb3JkKHJlY29yZCwgcmVjb3JkVG8pKSkge1xyXG4gICAgICAgICAgICAgICAgZW50ZXJpbmdSZWNvcmRzLnB1c2gocmVjb3JkVG8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtsZWF2aW5nUmVjb3JkcywgdXBkYXRpbmdSZWNvcmRzLCBlbnRlcmluZ1JlY29yZHNdO1xyXG59XG5cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSByb3V0ZXIgaW5zdGFuY2UuIEVxdWl2YWxlbnQgdG8gdXNpbmcgYCRyb3V0ZXJgIGluc2lkZVxyXG4gKiB0ZW1wbGF0ZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VSb3V0ZXIoKSB7XHJcbiAgICByZXR1cm4gaW5qZWN0KHJvdXRlcktleSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgcm91dGUgbG9jYXRpb24uIEVxdWl2YWxlbnQgdG8gdXNpbmcgYCRyb3V0ZWAgaW5zaWRlXHJcbiAqIHRlbXBsYXRlcy5cclxuICovXHJcbmZ1bmN0aW9uIHVzZVJvdXRlKCkge1xyXG4gICAgcmV0dXJuIGluamVjdChyb3V0ZUxvY2F0aW9uS2V5KTtcclxufVxuXG5leHBvcnQgeyBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUsIFJvdXRlckxpbmssIFJvdXRlclZpZXcsIFNUQVJUX0xPQ0FUSU9OX05PUk1BTElaRUQgYXMgU1RBUlRfTE9DQVRJT04sIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVJvdXRlciwgY3JlYXRlUm91dGVyTWF0Y2hlciwgY3JlYXRlV2ViSGFzaEhpc3RvcnksIGNyZWF0ZVdlYkhpc3RvcnksIGlzTmF2aWdhdGlvbkZhaWx1cmUsIG1hdGNoZWRSb3V0ZUtleSwgb25CZWZvcmVSb3V0ZUxlYXZlLCBvbkJlZm9yZVJvdXRlVXBkYXRlLCBwYXJzZVF1ZXJ5LCByb3V0ZUxvY2F0aW9uS2V5LCByb3V0ZXJLZXksIHJvdXRlclZpZXdMb2NhdGlvbktleSwgc3RyaW5naWZ5UXVlcnksIHVzZUxpbmssIHVzZVJvdXRlLCB1c2VSb3V0ZXIsIHZpZXdEZXB0aEtleSB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldERldnRvb2xzR2xvYmFsSG9vaygpIHtcbiAgICByZXR1cm4gZ2V0VGFyZ2V0KCkuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IHdpbmRvd1xuICAgICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IGdsb2JhbFxuICAgICAgICAgICAgOiB7fTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTE3LTAhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDk3ZjY3NmImbGFuZz1jc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wOTdmNjc2YiZsYW5nPWNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wOTdmNjc2YiZsYW5nPWNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0xNy0wIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0xJmlkPTA5N2Y2NzZiJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxYjBmYmVjYlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MSZpZD0wOTdmNjc2YiZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MSZpZD0wOTdmNjc2YiZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTE3LTAhLi9BUHV6emxlQURheS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01YWMzOTAyYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiODkyZTNkMzJcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3Qvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTE3LTAhLi9BUHV6emxlQURheS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01YWMzOTAyYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FQdXp6bGVBRGF5LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTVhYzM5MDJhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZVwiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKipcbiAqIFRyYW5zbGF0ZXMgdGhlIGxpc3QgZm9ybWF0IHByb2R1Y2VkIGJ5IGNzcy1sb2FkZXIgaW50byBzb21ldGhpbmdcbiAqIGVhc2llciB0byBtYW5pcHVsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKHBhcmVudElkLCBsaXN0KSB7XG4gIHZhciBzdHlsZXMgPSBbXVxuICB2YXIgbmV3U3R5bGVzID0ge31cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldXG4gICAgdmFyIGlkID0gaXRlbVswXVxuICAgIHZhciBjc3MgPSBpdGVtWzFdXG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXVxuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdXG4gICAgdmFyIHBhcnQgPSB7XG4gICAgICBpZDogcGFyZW50SWQgKyAnOicgKyBpLFxuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH1cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7IGlkOiBpZCwgcGFydHM6IFtwYXJ0XSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlc1xufVxuIiwiLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuICBNb2RpZmllZCBieSBFdmFuIFlvdSBAeXl4OTkwODAzXG4qL1xuXG5pbXBvcnQgbGlzdFRvU3R5bGVzIGZyb20gJy4vbGlzdFRvU3R5bGVzJ1xuXG52YXIgaGFzRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG5cbmlmICh0eXBlb2YgREVCVUcgIT09ICd1bmRlZmluZWQnICYmIERFQlVHKSB7XG4gIGlmICghaGFzRG9jdW1lbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3Z1ZS1zdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudC4gJyArXG4gICAgXCJVc2UgeyB0YXJnZXQ6ICdub2RlJyB9IGluIHlvdXIgV2VicGFjayBjb25maWcgdG8gaW5kaWNhdGUgYSBzZXJ2ZXItcmVuZGVyaW5nIGVudmlyb25tZW50LlwiXG4gICkgfVxufVxuXG4vKlxudHlwZSBTdHlsZU9iamVjdCA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgcGFydHM6IEFycmF5PFN0eWxlT2JqZWN0UGFydD5cbn1cblxudHlwZSBTdHlsZU9iamVjdFBhcnQgPSB7XG4gIGNzczogc3RyaW5nO1xuICBtZWRpYTogc3RyaW5nO1xuICBzb3VyY2VNYXA6ID9zdHJpbmdcbn1cbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHsvKlxuICBbaWQ6IG51bWJlcl06IHtcbiAgICBpZDogbnVtYmVyLFxuICAgIHJlZnM6IG51bWJlcixcbiAgICBwYXJ0czogQXJyYXk8KG9iaj86IFN0eWxlT2JqZWN0UGFydCkgPT4gdm9pZD5cbiAgfVxuKi99XG5cbnZhciBoZWFkID0gaGFzRG9jdW1lbnQgJiYgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSlcbnZhciBzaW5nbGV0b25FbGVtZW50ID0gbnVsbFxudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwXG52YXIgaXNQcm9kdWN0aW9uID0gZmFsc2VcbnZhciBub29wID0gZnVuY3Rpb24gKCkge31cbnZhciBvcHRpb25zID0gbnVsbFxudmFyIHNzcklkS2V5ID0gJ2RhdGEtdnVlLXNzci1pZCdcblxuLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4vLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG52YXIgaXNPbGRJRSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9tc2llIFs2LTldXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU3R5bGVzQ2xpZW50IChwYXJlbnRJZCwgbGlzdCwgX2lzUHJvZHVjdGlvbiwgX29wdGlvbnMpIHtcbiAgaXNQcm9kdWN0aW9uID0gX2lzUHJvZHVjdGlvblxuXG4gIG9wdGlvbnMgPSBfb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIGxpc3QpXG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG4gICAgdmFyIG1heVJlbW92ZSA9IFtdXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgICAgZG9tU3R5bGUucmVmcy0tXG4gICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSlcbiAgICB9XG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhwYXJlbnRJZCwgbmV3TGlzdClcbiAgICAgIGFkZFN0eWxlc1RvRG9tKHN0eWxlcylcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzID0gW11cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXVxuICAgICAgaWYgKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKClcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMgLyogQXJyYXk8U3R5bGVPYmplY3Q+ICovKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV1cbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXVxuICAgIGlmIChkb21TdHlsZSkge1xuICAgICAgZG9tU3R5bGUucmVmcysrXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pXG4gICAgICB9XG4gICAgICBmb3IgKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdKSlcbiAgICAgIH1cbiAgICAgIGlmIChkb21TdHlsZS5wYXJ0cy5sZW5ndGggPiBpdGVtLnBhcnRzLmxlbmd0aCkge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5sZW5ndGggPSBpdGVtLnBhcnRzLmxlbmd0aFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHsgaWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0cyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAoKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gIHN0eWxlRWxlbWVudC50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudClcbiAgcmV0dXJuIHN0eWxlRWxlbWVudFxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICB2YXIgdXBkYXRlLCByZW1vdmVcbiAgdmFyIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlWycgKyBzc3JJZEtleSArICd+PVwiJyArIG9iai5pZCArICdcIl0nKVxuXG4gIGlmIChzdHlsZUVsZW1lbnQpIHtcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBhbmQgaW4gcHJvZHVjdGlvbiBtb2RlLlxuICAgICAgLy8gc2ltcGx5IGRvIG5vdGhpbmcuXG4gICAgICByZXR1cm4gbm9vcFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBoYXMgU1NSIHN0eWxlcyBidXQgaW4gZGV2IG1vZGUuXG4gICAgICAvLyBmb3Igc29tZSByZWFzb24gQ2hyb21lIGNhbid0IGhhbmRsZSBzb3VyY2UgbWFwIGluIHNlcnZlci1yZW5kZXJlZFxuICAgICAgLy8gc3R5bGUgdGFncyAtIHNvdXJjZSBtYXBzIGluIDxzdHlsZT4gb25seSB3b3JrcyBpZiB0aGUgc3R5bGUgdGFnIGlzXG4gICAgICAvLyBjcmVhdGVkIGFuZCBpbnNlcnRlZCBkeW5hbWljYWxseS4gU28gd2UgcmVtb3ZlIHRoZSBzZXJ2ZXIgcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlcyBhbmQgaW5qZWN0IG5ldyBvbmVzLlxuICAgICAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc09sZElFKSB7XG4gICAgLy8gdXNlIHNpbmdsZXRvbiBtb2RlIGZvciBJRTkuXG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKytcbiAgICBzdHlsZUVsZW1lbnQgPSBzaW5nbGV0b25FbGVtZW50IHx8IChzaW5nbGV0b25FbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KCkpXG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgZmFsc2UpXG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudCwgc3R5bGVJbmRleCwgdHJ1ZSlcbiAgfSBlbHNlIHtcbiAgICAvLyB1c2UgbXVsdGktc3R5bGUtdGFnIG1vZGUgaW4gYWxsIG90aGVyIGNhc2VzXG4gICAgc3R5bGVFbGVtZW50ID0gY3JlYXRlU3R5bGVFbGVtZW50KClcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGVFbGVtZW50KVxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICB1cGRhdGUob2JqKVxuXG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqIC8qIFN0eWxlT2JqZWN0UGFydCAqLykge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG4gICAgICAgICAgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcbiAgICAgICAgICBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iailcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKClcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnRcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKVxuICB9XG59KSgpXG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlRWxlbWVudCwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5jc3NcblxuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcylcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcylcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlRWxlbWVudC5jaGlsZE5vZGVzXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY3NzTm9kZSlcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGVFbGVtZW50LCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3NcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwXG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSlcbiAgfVxuICBpZiAob3B0aW9ucy5zc3JJZCkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoc3NySWRLZXksIG9iai5pZClcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXApIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAvLyB0aGlzIG1ha2VzIHNvdXJjZSBtYXBzIGluc2lkZSBzdHlsZSB0YWdzIHdvcmsgcHJvcGVybHkgaW4gQ2hyb21lXG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlVVJMPScgKyBzb3VyY2VNYXAuc291cmNlc1swXSArICcgKi8nXG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcbiAgICBjc3MgKz0gJ1xcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyAnICovJ1xuICB9XG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzc1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKVxuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSlcbiAgfVxufVxuIiwiaW1wb3J0IHtjcmVhdGVSb3V0ZXIsIGNyZWF0ZVdlYkhhc2hIaXN0b3J5fSBmcm9tICd2dWUtcm91dGVyJztcbmltcG9ydCBBUHV6emxlQURheSBmcm9tICcuL2EtcHV6emxlLWEtZGF5L0FQdXp6bGVBRGF5LnZ1ZSc7XG5cbmNvbnN0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcih7XG4gICAgaGlzdG9yeTogY3JlYXRlV2ViSGFzaEhpc3RvcnkocHJvY2Vzcy5lbnYuQkFTRV9VUkwpLFxuICAgIHJvdXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwYXRoOiAnLycsXG4gICAgICAgICAgICBjb21wb25lbnQ6IEFQdXp6bGVBRGF5XG4gICAgICAgIH1cbiAgICBdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIiwiaW1wb3J0IHsgZ2V0VGFyZ2V0LCBnZXREZXZ0b29sc0dsb2JhbEhvb2sgfSBmcm9tICcuL2Vudic7XG5pbXBvcnQgeyBIT09LX1NFVFVQIH0gZnJvbSAnLi9jb25zdCc7XG5leHBvcnQgKiBmcm9tICcuL2FwaSc7XG5leHBvcnQgZnVuY3Rpb24gc2V0dXBEZXZ0b29sc1BsdWdpbihwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKSB7XG4gICAgY29uc3QgaG9vayA9IGdldERldnRvb2xzR2xvYmFsSG9vaygpO1xuICAgIGlmIChob29rKSB7XG4gICAgICAgIGhvb2suZW1pdChIT09LX1NFVFVQLCBwbHVnaW5EZXNjcmlwdG9yLCBzZXR1cEZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldCgpO1xuICAgICAgICBjb25zdCBsaXN0ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX1BMVUdJTlNfXyA9IHRhcmdldC5fX1ZVRV9ERVZUT09MU19QTFVHSU5TX18gfHwgW107XG4gICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICBwbHVnaW5EZXNjcmlwdG9yLFxuICAgICAgICAgICAgc2V0dXBGblxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY29uc3QgSE9PS19TRVRVUCA9ICdkZXZ0b29scy1wbHVnaW46c2V0dXAnO1xuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJhLXB1enpsZS1hLWRheVwiPlxuICAgICAgICA8Y2FudmFzIHJlZj1cImNhbnZhc1wiPjwvY2FudmFzPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaW5rXCI+XG4gICAgICAgICAgICBPcmlnaW5hbDogPGEgaHJlZj1cImh0dHBzOi8vd3d3LmRyYWdvbmZqb3JkLmNvbS9wcm9kdWN0L2EtcHV6emxlLWEtZGF5L1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmRyYWdvbmZqb3JkLmNvbS9wcm9kdWN0L2EtcHV6emxlLWEtZGF5LzwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNyYz1cIi4vQVB1enpsZUFEYXkudHNcIj48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuLmEtcHV6emxlLWEtZGF5IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgYmFja2dyb3VuZDogI2YyZjJmMjtcblxuICAgIC5saW5rIHtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgICBsZWZ0OiA4cHg7XG4gICAgICAgIHRvcDogOHB4O1xuICAgICAgICBjb2xvcjogcmdiYSgwLCAwLCAwLCAuNSk7XG4gICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuXG4gICAgICAgIGEge1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgY29sb3I6ICM0MDllZmY7XG4gICAgICAgIH1cbiAgICB9XG59XG48L3N0eWxlPiIsImltcG9ydCBUZXh0dXJlIGZyb20gJy4vVGV4dHVyZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lQnVmZmVyIHtcblxuICAgIGdsRnJhbWVCdWZmZXI/OiBXZWJHTEZyYW1lYnVmZmVyO1xuICAgIHRleHR1cmVzOiBUZXh0dXJlW10gPSBbXTtcbiAgICBkZXB0aFRleHR1cmU/OiBUZXh0dXJlO1xuICAgIHN0ZW5jaWxUZXh0dXJlPzogVGV4dHVyZTtcblxuICAgIGNvbnN0cnVjdG9yKGdsRnJhbWVCdWZmZXI6IFdlYkdMRnJhbWVidWZmZXIpIHtcbiAgICAgICAgdGhpcy5nbEZyYW1lQnVmZmVyID0gZ2xGcmFtZUJ1ZmZlcjtcbiAgICB9XG5cbiAgICBnZXQgdGV4dHVyZSgpOiBUZXh0dXJlIHwgdW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dHVyZXNbMF07XG4gICAgfVxuXG59XG4iLCJjbGFzcyBBdHRyaWJ1dGUge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb21wb25lbnRTaXplOiBudW1iZXI7XG4gICAgdmVydGljZXM6IEZsb2F0MzJBcnJheTtcbiAgICB2Ym8/OiBXZWJHTEJ1ZmZlcjtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgY29tcG9uZW50U2l6ZTogbnVtYmVyLCB2ZXJ0aWNlczogRmxvYXQzMkFycmF5KSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuY29tcG9uZW50U2l6ZSA9IGNvbXBvbmVudFNpemU7XG4gICAgICAgIHRoaXMudmVydGljZXMgPSB2ZXJ0aWNlcztcbiAgICB9XG59XG5cbmVudW0gUHJpbWl0aXZlVHlwZSB7XG4gICAgVFJJQU5HTEVTLCBMSU5FU1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHZW9tZXRyeSB7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgVFlQRV9UUklBTkdMRVMgPSBQcmltaXRpdmVUeXBlLlRSSUFOR0xFUztcbiAgICBzdGF0aWMgcmVhZG9ubHkgVFlQRV9MSU5FUyA9IFByaW1pdGl2ZVR5cGUuTElORVM7XG5cbiAgICB0eXBlOiBQcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVM7XG4gICAgYXR0cmlidXRlczogQXR0cmlidXRlW10gPSBbXTtcbiAgICBpbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIGlibz86IFdlYkdMQnVmZmVyO1xuICAgIHZhbz86IFdlYkdMVmVydGV4QXJyYXlPYmplY3Q7XG5cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBQcmltaXRpdmVUeXBlID0gUHJpbWl0aXZlVHlwZS5UUklBTkdMRVMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB9XG5cbiAgICBzZXRWZXJ0aWNlcyh2ZXJ0aWNlczogeyBbbmFtZTogc3RyaW5nXTogbnVtYmVyW10gfVtdKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlczogeyBbbmFtZTogc3RyaW5nXTogQXR0cmlidXRlIH0gPSB7fTtcbiAgICAgICAgZm9yIChsZXQgYXR0ck5hbWUgaW4gdmVydGljZXNbMF0pIHtcbiAgICAgICAgICAgIGlmICh2ZXJ0aWNlc1swXS5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplID0gdmVydGljZXNbMF1bYXR0ck5hbWVdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2F0dHJOYW1lXSA9IG5ldyBBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgIGF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgICAgICAgICBuZXcgRmxvYXQzMkFycmF5KHNpemUgKiBsZW4pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGF0dHJOYW1lIGluIHZlcnRleCkge1xuICAgICAgICAgICAgICAgIGlmICh2ZXJ0ZXguaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50QXJyID0gdmVydGV4W2F0dHJOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1thdHRyTmFtZV0udmVydGljZXMuc2V0KHBvaW50QXJyLCBwb2ludEFyci5sZW5ndGggKiBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gT2JqZWN0LnZhbHVlcyhhdHRyaWJ1dGVzKTtcbiAgICB9XG5cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmUge1xuICAgIGdsVGV4dHVyZT86IFdlYkdMVGV4dHVyZTtcblxuICAgIGxldmVsOiBHTGludDtcbiAgICBpbnRlcm5hbGZvcm1hdDogR0xpbnQ7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBib3JkZXI6IEdMaW50O1xuICAgIGZvcm1hdDogR0xlbnVtO1xuICAgIHR5cGU6IEdMZW51bTtcblxuICAgIGZsaXBZOiBib29sZWFuID0gZmFsc2U7XG4gICAgaW1hZ2U/OiBIVE1MSW1hZ2VFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoZ2xUZXh0dXJlOiBXZWJHTFRleHR1cmUsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IG51bWJlcixcbiAgICAgICAgICAgICAgICBpbnRlcm5hbGZvcm1hdDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgdHlwZTogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZ2xUZXh0dXJlID0gZ2xUZXh0dXJlO1xuICAgICAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gICAgICAgIHRoaXMuaW50ZXJuYWxmb3JtYXQgPSBpbnRlcm5hbGZvcm1hdDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5ib3JkZXIgPSBib3JkZXI7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IFRleHR1cmUgZnJvbSAnLi9UZXh0dXJlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VW5pZm9ybVNldHRlcihcbiAgICBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc2l6ZTogR0xpbnQsXG4gICAgdHlwZTogR0xlbnVtLFxuICAgIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbixcbiAgICBzYW1wbGVyQ291bnRlcjogeyBjb3VudDogbnVtYmVyIH1cbik6ICh2YWw6IGFueSkgPT4gdm9pZCB7XG4gICAgaWYgKG5hbWUuc3Vic3RyKC0zKSA9PT0gJ1swXScpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGdsLkZMT0FUOlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsOiBGbG9hdDMyTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWZ2KGxvY2F0aW9uLCB2YWwpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIGdsLklOVDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogSW50MzJMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHZhbCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgZ2wuVU5TSUdORURfSU5UOlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsOiBVaW50MzJMaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xdWl2KGxvY2F0aW9uLCB2YWwpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6XG4gICAgICAgICAgICAgICAgY29uc3QgdW5pdHMgPSBuZXcgSW50MzJBcnJheShzaXplKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgc2l6ZTsgKytpaSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0c1tpaV0gPSBzYW1wbGVyQ291bnRlci5jb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRleHR1cmVzOiAoV2ViR0xUZXh0dXJlIHwgVGV4dHVyZSB8IG51bGwgfCB1bmRlZmluZWQpW10pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpdihsb2NhdGlvbiwgdW5pdHMpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgc2l6ZTsgKytpaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRleHR1cmUgPSB0ZXh0dXJlc1tpaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlID0gdGV4dHVyZS5nbFRleHR1cmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdW5pdHNbaWldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUgfHwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaW1wbGVtZW50ZWQgc2V0dGVyIHR5cGUgKHVuaWZvcm06ICR7bmFtZX0sIHR5cGU6ICR7dHlwZX0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgZ2wuRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogR0xmbG9hdCkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfVkVDMjpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsOiBGbG9hdDMyTGlzdCkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0yZnYobG9jYXRpb24sIHZhbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzM6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogRmxvYXQzMkxpc3QpIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KGxvY2F0aW9uLCB2YWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUM0OlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWw6IEZsb2F0MzJMaXN0KSB7XG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdmFsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgZ2wuQk9PTDpcbiAgICAgICAgY2FzZSBnbC5JTlQ6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogR0xpbnQpIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGdsLkJPT0xfVkVDMjpcbiAgICAgICAgY2FzZSBnbC5JTlRfVkVDMjpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsOiBJbnQzMkxpc3QpIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMml2KGxvY2F0aW9uLCB2YWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBnbC5CT09MX1ZFQzM6XG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzM6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogSW50MzJMaXN0KSB7XG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdmFsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgZ2wuQk9PTF9WRUM0OlxuICAgICAgICBjYXNlIGdsLklOVF9WRUM0OlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWw6IEludDMyTGlzdCkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00aXYobG9jYXRpb24sIHZhbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDI6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogRmxvYXQzMkxpc3QpIHtcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdmFsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsOiBGbG9hdDMyTGlzdCkge1xuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXgzZnYobG9jYXRpb24sIGZhbHNlLCB2YWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQ0OlxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWw6IEZsb2F0MzJMaXN0KSB7XG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHZhbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6XG4gICAgICAgICAgICBjb25zdCBpaSA9IHNhbXBsZXJDb3VudGVyLmNvdW50Kys7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbDogV2ViR0xUZXh0dXJlIHwgVGV4dHVyZSB8IG51bGwgfCB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwuZ2xUZXh0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIGlpKTtcbiAgICAgICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgaWkpO1xuICAgICAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHZhbCB8fCBudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaW1wbGVtZW50ZWQgc2V0dGVyIHR5cGUgKHVuaWZvcm06ICR7bmFtZX0sIHR5cGU6ICR7dHlwZX0pYCk7XG4gICAgfVxufVxuIiwiY2xhc3MgQXR0cmlidXRlSW5mbyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHNpemU6IEdMaW50O1xuICAgIHR5cGU6IEdMZW51bTtcbiAgICBsb2NhdGlvbjogR0xpbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNpemU6IEdMaW50LCB0eXBlOiBHTGVudW0sIGxvY2F0aW9uOiBHTGludCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfVxufVxuXG5jbGFzcyBVbmlmb3JtSW5mbyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHNpemU6IEdMaW50O1xuICAgIHR5cGU6IEdMZW51bTtcbiAgICBsb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgc2V0dGVyOiAodmFsOiBhbnkpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHNpemU6IEdMaW50LCB0eXBlOiBHTGVudW0sIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiwgc2V0dGVyOiAodmFsOiBhbnkpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYWRlciB7XG4gICAgdmVydFNoYWRlcj86IFdlYkdMU2hhZGVyO1xuICAgIGZyYWdTaGFkZXI/OiBXZWJHTFNoYWRlcjtcbiAgICBwcm9ncmFtPzogV2ViR0xQcm9ncmFtO1xuXG4gICAgYXR0cmlidXRlczogeyBbbmFtZTogc3RyaW5nXTogQXR0cmlidXRlSW5mbyB9ID0ge307XG4gICAgdW5pZm9ybXM6IHsgW25hbWU6IHN0cmluZ106IFVuaWZvcm1JbmZvIH0gPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHZlcnRTaGFkZXI6IFdlYkdMU2hhZGVyLCBmcmFnU2hhZGVyOiBXZWJHTFNoYWRlciwgcHJvZ3JhbTogV2ViR0xQcm9ncmFtKSB7XG4gICAgICAgIHRoaXMudmVydFNoYWRlciA9IHZlcnRTaGFkZXI7XG4gICAgICAgIHRoaXMuZnJhZ1NoYWRlciA9IGZyYWdTaGFkZXI7XG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IHByb2dyYW07XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJBdHRyaWJ1dGUobmFtZTogc3RyaW5nLCBzaXplOiBHTGludCwgdHlwZTogR0xlbnVtLCBsb2NhdGlvbjogR0xpbnQpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ1dGVzW25hbWVdID0gbmV3IEF0dHJpYnV0ZUluZm8obmFtZSwgc2l6ZSwgdHlwZSwgbG9jYXRpb24pO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyVW5pZm9ybShuYW1lOiBzdHJpbmcsIHNpemU6IEdMaW50LCB0eXBlOiBHTGVudW0sIGxvY2F0aW9uOiBXZWJHTFVuaWZvcm1Mb2NhdGlvbiwgc2V0dGVyOiAodmFsOiBhbnkpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKG5hbWUuZW5kc1dpdGgoJ1swXScpKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMCwgbmFtZS5sZW5ndGggLSAnWzBdJy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5pZm9ybXNbbmFtZV0gPSBuZXcgVW5pZm9ybUluZm8obmFtZSwgc2l6ZSwgdHlwZSwgbG9jYXRpb24sIHNldHRlcik7XG4gICAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgXCIjdmVyc2lvbiAzMDAgZXNcXG5cXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5pbiB2ZWM0IHZfY29sb3I7XFxuXFxub3V0IHZlYzQgb3V0Q29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICBvdXRDb2xvciA9IHZfY29sb3I7XFxufVxcblwiIiwiaW1wb3J0IHtBX0NPTE9SLCBBX1BPU0lUSU9OLCBBX1RFWF9DT09SRCwgVV9URVhUVVJFfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgRnJhbWVCdWZmZXIgZnJvbSAnLi9GcmFtZUJ1ZmZlcic7XG5pbXBvcnQgR2VvbWV0cnkgZnJvbSAnLi9HZW9tZXRyeSc7XG5pbXBvcnQgZ2V0VW5pZm9ybVNldHRlciBmcm9tICcuL2dldC11bmlmb3JtLXNldHRlcic7XG5pbXBvcnQgTGFiZWwgZnJvbSAnLi9MYWJlbCc7XG5pbXBvcnQgU2hhZGVyIGZyb20gJy4vU2hhZGVyJztcbmltcG9ydCBjb2xvcjJkRnJhZyBmcm9tICcuL3NoYWRlcnMvY29sb3ItMmQuZnJhZyc7XG5pbXBvcnQgY29sb3IyZFZlcnQgZnJvbSAnLi9zaGFkZXJzL2NvbG9yLTJkLnZlcnQnO1xuaW1wb3J0IGltYWdlMmRGcmFnIGZyb20gJy4vc2hhZGVycy9pbWFnZS0yZC5mcmFnJztcbmltcG9ydCBpbWFnZTJkVmVydCBmcm9tICcuL3NoYWRlcnMvaW1hZ2UtMmQudmVydCc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL1RleHR1cmUnO1xuXG5lbnVtIFNpZGUge1xuICAgIE5PTkUsIEZST05ULCBCQUNLXG59XG5cbmVudW0gQmF0Y2hUeXBlIHtcbiAgICBNRVNILCBMSU5FU1xufVxuXG5lbnVtIEJsZW5kTW9kZSB7XG4gICAgT1ZFUkxBUCwgTElHSFQsIFBJR01FTlRcbn1cblxuaW50ZXJmYWNlIFJlbmRlcmVyU3RhdGUge1xuICAgIC8qKiBWaWV3cG9ydCB3aWR0aC4gKi9cbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIC8qKiBWaWV3cG9ydCBoZWlnaHQuICovXG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqIDJEIGRyYXcgY29sb3IuICovXG4gICAgY29sb3I6IHsgcjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyIH07XG4gICAgLyoqIDJEIGNhbWVyYSB4LiAqL1xuICAgIGNhbWVyYVg6IG51bWJlcjtcbiAgICAvKiogMkQgY2FtZXJhIHkuICovXG4gICAgY2FtZXJhWTogbnVtYmVyO1xuICAgIC8qKiAyRCBjYW1lcmEgem9vbS4gKi9cbiAgICB6b29tOiBudW1iZXI7XG4gICAgYmxlbmRNb2RlOiBCbGVuZE1vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlcmVyIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9zaGFyZWRJbnN0YW5jZT86IFJlbmRlcmVyO1xuXG4gICAgc3RhdGljIHNoYXJlZEluc3RhbmNlKCk6IFJlbmRlcmVyIHtcbiAgICAgICAgaWYgKCFSZW5kZXJlci5fc2hhcmVkSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIFJlbmRlcmVyLl9zaGFyZWRJbnN0YW5jZSA9IG5ldyBSZW5kZXJlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZW5kZXJlci5fc2hhcmVkSW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmVhZG9ubHkgU0lERV9OT05FID0gU2lkZS5OT05FO1xuICAgIHJlYWRvbmx5IFNJREVfRlJPTlQgPSBTaWRlLkZST05UO1xuICAgIHJlYWRvbmx5IFNJREVfQkFDSyA9IFNpZGUuQkFDSztcblxuICAgIHJlYWRvbmx5IEJMRU5EX01PREVfT1ZFUkxBUCA9IEJsZW5kTW9kZS5PVkVSTEFQO1xuICAgIHJlYWRvbmx5IEJMRU5EX01PREVfTElHSFQgPSBCbGVuZE1vZGUuTElHSFQ7XG4gICAgcmVhZG9ubHkgQkxFTkRfTU9ERV9QSUdNRU5UID0gQmxlbmRNb2RlLlBJR01FTlQ7XG5cbiAgICByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIHJlYWRvbmx5IGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0O1xuICAgIGF0dHJpYkxvY2F0aW9ucz86IHsgW25hbWU6IHN0cmluZ106IG51bWJlciB9O1xuXG4gICAgLyoqIEFuIDF4MSAweGZmZiBwaXhlbC4gKi9cbiAgICByZWFkb25seSBCTEFOS19XSElURTogVGV4dHVyZTtcbiAgICByZWFkb25seSBJTUFHRV8yRF9TSEFERVI6IFNoYWRlcjtcbiAgICByZWFkb25seSBDT0xPUl8yRF9TSEFERVI6IFNoYWRlcjtcblxuICAgIHByaXZhdGUgY3VycmVudFNoYWRlcj86IFNoYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZyYW1lQnVmZmVyU3RhY2s6IEZyYW1lQnVmZmVyW10gPSBbXTtcbiAgICBwcml2YXRlIGN1cnJlbnRGcmFtZUJ1ZmZlcj86IEZyYW1lQnVmZmVyO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXRjaFNpemU6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhdGNoUG9zaXRpb25WZXJ0aWNlczogRmxvYXQzMkFycmF5O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmF0Y2hUZXhDb29yZFZlcnRpY2VzOiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXRjaENvbG9yVmVydGljZXM6IEZsb2F0MzJBcnJheTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhdGNoUG9zaXRpb25CdWZmZXI6IFdlYkdMQnVmZmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYmF0Y2hUZXhDb29yZEJ1ZmZlcjogV2ViR0xCdWZmZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBiYXRjaENvbG9yQnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICBwcml2YXRlIGJhdGNoVHlwZTogQmF0Y2hUeXBlID0gQmF0Y2hUeXBlLk1FU0g7XG4gICAgcHJpdmF0ZSBiYXRjaFRleHR1cmU/OiBUZXh0dXJlO1xuICAgIHByaXZhdGUgYmF0Y2hJbmRleDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIGRyYXdpbmcyRDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHVibGljIHN0YXRlOiBSZW5kZXJlclN0YXRlID0ge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICBjb2xvcjoge3I6IDEsIGc6IDEsIGI6IDEsIGE6IDF9LFxuICAgICAgICBjYW1lcmFYOiAwLFxuICAgICAgICBjYW1lcmFZOiAwLFxuICAgICAgICB6b29tOiAxLFxuICAgICAgICBibGVuZE1vZGU6IEJsZW5kTW9kZS5PVkVSTEFQXG4gICAgfTtcbiAgICBwcml2YXRlIHN0YXRlU3RhY2s6IFJlbmRlcmVyU3RhdGVbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IodGFyZ2V0PzogSFRNTENhbnZhc0VsZW1lbnQgfCBXZWJHTDJSZW5kZXJpbmdDb250ZXh0LCBiYXRjaFNpemU6IG51bWJlciA9IDIwMDApIHtcbiAgICAgICAgbGV0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIGxldCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCB8IG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjYW52YXMgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbnZhcyA9IHRhcmdldC5jYW52YXMgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICAgICAgZ2wgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnbCkge1xuICAgICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGFscGhhOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhbnRpYWxpYXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3RlbmNpbDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKCFnbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBXZWJHTDIgcmVuZGVyaW5nIGNvbnRleHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLnN0YXRlLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICB0aGlzLnN0YXRlLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIHRoaXMuc3RhdGUud2lkdGgsIHRoaXMuc3RhdGUuaGVpZ2h0KTtcbiAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcblxuICAgICAgICB0aGlzLkJMQU5LX1dISVRFID0gdGhpcy5jcmVhdGVUZXh0dXJlRnJvbVJnYmFQaXhlbHMoMSwgMSwgbmV3IFVpbnQ4QXJyYXkoWzB4ZmYsIDB4ZmYsIDB4ZmYsIDB4ZmZdKSk7XG5cbiAgICAgICAgdGhpcy5JTUFHRV8yRF9TSEFERVIgPSB0aGlzLmNyZWF0ZVNoYWRlcihpbWFnZTJkVmVydCwgaW1hZ2UyZEZyYWcpO1xuICAgICAgICB0aGlzLkNPTE9SXzJEX1NIQURFUiA9IHRoaXMuY3JlYXRlU2hhZGVyKGNvbG9yMmRWZXJ0LCBjb2xvcjJkRnJhZyk7XG5cbiAgICAgICAgdGhpcy5iYXRjaFNpemUgPSBiYXRjaFNpemU7XG4gICAgICAgIHRoaXMuYmF0Y2hQb3NpdGlvblZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShiYXRjaFNpemUgKiAzICogMiAqIDIpO1xuICAgICAgICB0aGlzLmJhdGNoUG9zaXRpb25CdWZmZXIgPSB0aGlzLmNyZWF0ZUR5bmFtaWNEcmF3QnVmZmVyKHRoaXMuYmF0Y2hQb3NpdGlvblZlcnRpY2VzKTtcbiAgICAgICAgdGhpcy5iYXRjaFRleENvb3JkVmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KGJhdGNoU2l6ZSAqIDMgKiAyICogMik7XG4gICAgICAgIHRoaXMuYmF0Y2hUZXhDb29yZEJ1ZmZlciA9IHRoaXMuY3JlYXRlRHluYW1pY0RyYXdCdWZmZXIodGhpcy5iYXRjaFRleENvb3JkVmVydGljZXMpO1xuICAgICAgICB0aGlzLmJhdGNoQ29sb3JWZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoYmF0Y2hTaXplICogMyAqIDIgKiA0KTtcbiAgICAgICAgdGhpcy5iYXRjaENvbG9yQnVmZmVyID0gdGhpcy5jcmVhdGVEeW5hbWljRHJhd0J1ZmZlcih0aGlzLmJhdGNoQ29sb3JWZXJ0aWNlcyk7XG4gICAgfVxuXG4gICAgY29weVRvKFxuICAgICAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICAgICAgZHg6IG51bWJlciA9IDAsXG4gICAgICAgIGR5OiBudW1iZXIgPSAwLFxuICAgICAgICBkdzogbnVtYmVyID0gdGhpcy5zdGF0ZS53aWR0aCxcbiAgICAgICAgZGg6IG51bWJlciA9IHRoaXMuc3RhdGUuaGVpZ2h0LFxuICAgICAgICBzeDogbnVtYmVyID0gMCxcbiAgICAgICAgc3k6IG51bWJlciA9IDAsXG4gICAgICAgIHN3OiBudW1iZXIgPSB0aGlzLnN0YXRlLndpZHRoLFxuICAgICAgICBzaDogbnVtYmVyID0gdGhpcy5zdGF0ZS5oZWlnaHRcbiAgICApIHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhcywgc3gsIHN5LCBzdywgc2gsIGR4LCBkeSwgZHcsIGRoKTtcbiAgICB9XG5cbiAgICB2aWV3cG9ydCh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnN0YXRlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuc3RhdGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIHRoaXMuc3RhdGUud2lkdGgsIHRoaXMuc3RhdGUuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICByZXNpemVDYW52YXMod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzLndpZHRoICE9PSB3aWR0aCB8fCB0aGlzLmNhbnZhcy5oZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXdwb3J0KHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGNsZWFyQ29sb3IocjogbnVtYmVyID0gMCwgZzogbnVtYmVyID0gMCwgYjogbnVtYmVyID0gMCwgYTogbnVtYmVyID0gMSkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGdsLmNsZWFyQ29sb3IociwgZywgYiwgYSk7XG4gICAgfVxuXG4gICAgY2xlYXIoY29sb3I6IGJvb2xlYW4sIGRlcHRoOiBib29sZWFuLCBzdGVuY2lsOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuZmx1c2gyRCgpO1xuICAgICAgICB0aGlzLnN3aXRjaEZyYW1lQnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgbGV0IG1hc2sgPSAwO1xuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgIG1hc2sgfD0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVwdGgpIHtcbiAgICAgICAgICAgIG1hc2sgfD0gZ2wuREVQVEhfQlVGRkVSX0JJVDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RlbmNpbCkge1xuICAgICAgICAgICAgbWFzayB8PSBnbC5TVEVOQ0lMX0JVRkZFUl9CSVQ7XG4gICAgICAgIH1cbiAgICAgICAgZ2wuY2xlYXIobWFzayk7XG4gICAgfVxuXG4gICAgZGVwdGhUZXN0KGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgICAgICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVwdGhNYXNrKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5nbC5kZXB0aE1hc2soZW5hYmxlZCk7XG4gICAgfVxuXG4gICAgY3VsbEZhY2Uoc2lkZTogU2lkZSkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHN3aXRjaCAoc2lkZSkge1xuICAgICAgICAgICAgY2FzZSBTaWRlLk5PTkU6XG4gICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTaWRlLkZST05UOlxuICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgIGdsLmN1bGxGYWNlKGdsLkZST05UKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2lkZS5CQUNLOlxuICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xuICAgICAgICAgICAgICAgIGdsLmN1bGxGYWNlKGdsLkJBQ0spO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmxlbmRNb2RlKGJsZW5kTW9kZTogQmxlbmRNb2RlKSB7XG4gICAgICAgIGlmIChibGVuZE1vZGUgPT09IHRoaXMuc3RhdGUuYmxlbmRNb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZS5ibGVuZE1vZGUgPSBibGVuZE1vZGU7XG4gICAgICAgIHRoaXMuZmx1c2gyRCgpO1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIHN3aXRjaCAoYmxlbmRNb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEJsZW5kTW9kZS5PVkVSTEFQOlxuICAgICAgICAgICAgICAgIGdsLmJsZW5kRXF1YXRpb24oZ2wuRlVOQ19BREQpO1xuICAgICAgICAgICAgICAgIGdsLmJsZW5kRnVuYyhnbC5PTkUsIGdsLlpFUk8pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBCbGVuZE1vZGUuTElHSFQ6XG4gICAgICAgICAgICAgICAgZ2wuYmxlbmRFcXVhdGlvbihnbC5GVU5DX0FERCk7XG4gICAgICAgICAgICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQmxlbmRNb2RlLlBJR01FTlQ6IHtcbiAgICAgICAgICAgICAgICBnbC5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoZ2wuRlVOQ19BREQsIGdsLk1BWCk7XG4gICAgICAgICAgICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1c2VTaGFkZXIoc2hhZGVyPzogU2hhZGVyKSB7XG4gICAgICAgIGlmIChzaGFkZXIgIT09IHRoaXMuY3VycmVudFNoYWRlcikge1xuICAgICAgICAgICAgdGhpcy5mbHVzaDJEKCk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTaGFkZXIgPSBzaGFkZXI7XG4gICAgICAgICAgICBpZiAoc2hhZGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICAgICAgICAgIGdsLnVzZVByb2dyYW0oc2hhZGVyLnByb2dyYW0hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVuaWZvcm0obmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGNvbnN0IHNoYWRlciA9IHRoaXMuY3VycmVudFNoYWRlcjtcbiAgICAgICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1bmlmb3JtID0gc2hhZGVyLnVuaWZvcm1zW25hbWVdO1xuICAgICAgICB1bmlmb3JtPy5zZXR0ZXIodmFsdWUpO1xuICAgIH1cblxuICAgIHNhdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2subGVuZ3RoID4gOTk5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YXRlIHN0YWNrIGhhcyByZWFjaCBhIG1heCBzaXplIG9mIDk5OScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBzdGF0ZS5jb2xvcjtcbiAgICAgICAgdGhpcy5zdGF0ZVN0YWNrLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IHN0YXRlLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBzdGF0ZS5oZWlnaHQsXG4gICAgICAgICAgICBjb2xvcjoge3I6IGNvbG9yLnIsIGc6IGNvbG9yLmcsIGI6IGNvbG9yLmIsIGE6IGNvbG9yLmF9LFxuICAgICAgICAgICAgY2FtZXJhWDogc3RhdGUuY2FtZXJhWCxcbiAgICAgICAgICAgIGNhbWVyYVk6IHN0YXRlLmNhbWVyYVksXG4gICAgICAgICAgICB6b29tOiBzdGF0ZS56b29tLFxuICAgICAgICAgICAgYmxlbmRNb2RlOiBzdGF0ZS5ibGVuZE1vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzdG9yZSgpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlU3RhY2sucG9wKCk7XG4gICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RhdGUgc3RhY2sgaXMgZW1wdHknKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlLmNvbG9yLnIgPSBzdGF0ZS5jb2xvci5yO1xuICAgICAgICB0aGlzLnN0YXRlLmNvbG9yLmcgPSBzdGF0ZS5jb2xvci5nO1xuICAgICAgICB0aGlzLnN0YXRlLmNvbG9yLmIgPSBzdGF0ZS5jb2xvci5iO1xuICAgICAgICB0aGlzLnN0YXRlLmNvbG9yLmEgPSBzdGF0ZS5jb2xvci5hO1xuICAgICAgICB0aGlzLnN0YXRlLmNhbWVyYVggPSBzdGF0ZS5jYW1lcmFYO1xuICAgICAgICB0aGlzLnN0YXRlLmNhbWVyYVkgPSBzdGF0ZS5jYW1lcmFZO1xuICAgICAgICB0aGlzLnN0YXRlLnpvb20gPSBzdGF0ZS56b29tO1xuICAgICAgICB0aGlzLnZpZXdwb3J0KHN0YXRlLndpZHRoLCBzdGF0ZS5oZWlnaHQpO1xuICAgICAgICB0aGlzLmJsZW5kTW9kZShzdGF0ZS5ibGVuZE1vZGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlRHluYW1pY0RyYXdCdWZmZXIodmVydGljZXM6IEZsb2F0MzJBcnJheSkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYkdMIGJ1ZmZlcicpO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXMsIGdsLkRZTkFNSUNfRFJBVyk7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZVZCTyh2ZXJ0aWNlczogRmxvYXQzMkFycmF5KSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgY29uc3QgdmJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGlmICghdmJvKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgV2ViR0wgYnVmZmVyJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZibyk7XG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0aWNlcywgZ2wuU1RBVElDX0RSQVcpO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XG4gICAgICAgIHJldHVybiB2Ym87XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhdGVJQk8oaW5kaWNlczogbnVtYmVyW10pIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBjb25zdCBpYm8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgaWYgKCFpYm8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBXZWJHTCBidWZmZXInKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpYm8pO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoaW5kaWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XG4gICAgICAgIHJldHVybiBpYm87XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBiaW5kVmVydGV4QXJyYXlBdHRyaWJ1dGUoXG4gICAgICAgIGxvY2F0aW9uOiBHTGludCxcbiAgICAgICAgYnVmZmVyOiBXZWJHTEJ1ZmZlcixcbiAgICAgICAgY29tcG9uZW50U2l6ZTogR0xpbnQgPSA0LFxuICAgICAgICB0eXBlOiBHTGVudW0gPSB0aGlzLmdsLkZMT0FULFxuICAgICAgICBub3JtYWxpemVkOiBHTGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgc3RyaWRlOiBHTHNpemVpID0gMCxcbiAgICAgICAgb2Zmc2V0OiBHTGludHB0ciA9IDBcbiAgICApIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkobG9jYXRpb24pO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGxvY2F0aW9uLCBjb21wb25lbnRTaXplLCB0eXBlLCBub3JtYWxpemVkLCBzdHJpZGUsIG9mZnNldCk7XG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcbiAgICB9XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09IHRleHR1cmUgPT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgY3JlYXRlRW1wdHlUZXh0dXJlKHdpZHRoOiBudW1iZXIgPSB0aGlzLnN0YXRlLndpZHRoLCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuc3RhdGUuaGVpZ2h0LCBmbGlwWTogYm9vbGVhbiA9IGZhbHNlKTogVGV4dHVyZSB7XG4gICAgICAgIGlmICh3aWR0aCA8IDAgfHwgaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSB3aWR0aC9oZWlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIGlmICghdGV4dHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYkdMIHRleHR1cmUnKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHJldCA9IG5ldyBUZXh0dXJlKHRleHR1cmUsIDAsIGdsLlJHQkEsIHdpZHRoLCBoZWlnaHQsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUpO1xuICAgICAgICByZXQuZmxpcFkgPSBmbGlwWTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVUZXh0dXJlKGltYWdlOiBUZXhJbWFnZVNvdXJjZSk6IFRleHR1cmUge1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy5jcmVhdGVFbXB0eVRleHR1cmUoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCB0ZXh0dXJlLmxldmVsLCB0ZXh0dXJlLmludGVybmFsZm9ybWF0LCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS50eXBlLCBpbWFnZSk7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cblxuICAgIGNyZWF0ZVRleHR1cmVGcm9tSW1hZ2VVcmwodXJsOiBzdHJpbmcpOiBQcm9taXNlPFRleHR1cmU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy5jcmVhdGVUZXh0dXJlKGltYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGV4dHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25hYm9ydCA9IGltYWdlLm9uZXJyb3IgPSAoZTogc3RyaW5nIHwgRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlRGVwdGhUZXh0dXJlKHdpZHRoOiBudW1iZXIgPSB0aGlzLnN0YXRlLndpZHRoLCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuc3RhdGUuaGVpZ2h0KSB7XG4gICAgICAgIGlmICh3aWR0aCA8IDAgfHwgaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSB3aWR0aC9oZWlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIGlmICghdGV4dHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYkdMIHRleHR1cmUnKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5ERVBUSF9DT01QT05FTlQzMkYsIHdpZHRoLCBoZWlnaHQsIDAsIGdsLkRFUFRIX0NPTVBPTkVOVCwgZ2wuRkxPQVQsIG51bGwpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0dXJlKHRleHR1cmUsIDAsIGdsLkRFUFRIX0NPTVBPTkVOVDMyRiwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuREVQVEhfQ09NUE9ORU5ULCBnbC5GTE9BVCk7XG4gICAgfVxuXG4gICAgY3JlYXRlVGV4dHVyZUZyb21SZ2JhUGl4ZWxzKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBwaXhlbHM6IEFycmF5QnVmZmVyVmlldykge1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy5jcmVhdGVFbXB0eVRleHR1cmUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZS5nbFRleHR1cmUhKTtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCB0ZXh0dXJlLmxldmVsLCB0ZXh0dXJlLmludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCB0ZXh0dXJlLmJvcmRlciwgdGV4dHVyZS5mb3JtYXQsIHRleHR1cmUudHlwZSwgcGl4ZWxzKTtcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG4gICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH1cblxuICAgIHNldFRleHR1cmVGcm9tUGl4ZWxzKHRleHR1cmU6IFRleHR1cmUsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBwaXhlbHM6IEFycmF5QnVmZmVyVmlldykge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmICghdGV4dHVyZS5nbFRleHR1cmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dHVyZSBoYXMgYmVlbiBkZWxldGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZS5nbFRleHR1cmUpO1xuICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUubGV2ZWwsIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIHRleHR1cmUuYm9yZGVyLCB0ZXh0dXJlLmZvcm1hdCwgdGV4dHVyZS50eXBlLCBwaXhlbHMpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgdGV4dHVyZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0ZXh0dXJlLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG5cbiAgICBkZWxldGVUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUpIHtcbiAgICAgICAgaWYgKHRleHR1cmUuZ2xUZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZS5nbFRleHR1cmUpO1xuICAgICAgICAgICAgdGV4dHVyZS5nbFRleHR1cmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dHVyZS53aWR0aCA9IDA7XG4gICAgICAgIHRleHR1cmUuaGVpZ2h0ID0gMDtcbiAgICB9XG5cbiAgICByZXNpemVUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUsXG4gICAgICAgICAgICAgICAgICB3aWR0aDogbnVtYmVyID0gdGhpcy5zdGF0ZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgIGhlaWdodDogbnVtYmVyID0gdGhpcy5zdGF0ZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICByZWNyZWF0ZTogYm9vbGVhbiA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIGlmICh3aWR0aCA8IDAgfHwgaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZWdhdGl2ZSB3aWR0aC9oZWlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dHVyZS53aWR0aCA9PT0gd2lkdGggJiYgdGV4dHVyZS5oZWlnaHQgPT09IGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgaWYgKCF0ZXh0dXJlLmdsVGV4dHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0dXJlIGhhcyBiZWVuIGRlbGV0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlLmdsVGV4dHVyZSk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZS5sZXZlbCwgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgdGV4dHVyZS5ib3JkZXIsIHRleHR1cmUuZm9ybWF0LCB0ZXh0dXJlLnR5cGUsIG51bGwpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgdGV4dHVyZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0ZXh0dXJlLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09IHNoYWRlciA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBwcml2YXRlIGNyZWF0ZUdsU2hhZGVyKHNyYzogc3RyaW5nLCB0eXBlOiBHTGVudW0pOiBXZWJHTFNoYWRlciB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgY29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xuICAgICAgICBpZiAoIXNoYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYkdMIHNoYWRlcicpO1xuICAgICAgICB9XG4gICAgICAgIGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNyYyk7XG4gICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcbiAgICAgICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNvbXBpbGUgV2ViR0wgc2hhZGVyOlxcblxcbicgKyBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGFkZXI7XG4gICAgfVxuXG4gICAgY3JlYXRlU2hhZGVyKHZlcnRTcmM6IHN0cmluZywgZnJhZ1NyYzogc3RyaW5nKTogU2hhZGVyIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBjb25zdCB2ZXJ0U2hhZGVyID0gdGhpcy5jcmVhdGVHbFNoYWRlcih2ZXJ0U3JjLCBnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgY29uc3QgZnJhZ1NoYWRlciA9IHRoaXMuY3JlYXRlR2xTaGFkZXIoZnJhZ1NyYywgZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICAgICAgaWYgKCFwcm9ncmFtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgV2ViR0wgcHJvZ3JhbScpO1xuICAgICAgICB9XG4gICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdTaGFkZXIpO1xuICAgICAgICBjb25zdCBhdHRyaWJMb2NhdGlvbnMgPSB0aGlzLmF0dHJpYkxvY2F0aW9ucztcbiAgICAgICAgaWYgKGF0dHJpYkxvY2F0aW9ucykge1xuICAgICAgICAgICAgZm9yIChsZXQgYXR0ck5hbWUgaW4gYXR0cmliTG9jYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYkxvY2F0aW9ucy5oYXNPd25Qcm9wZXJ0eShhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGF0dHJpYkxvY2F0aW9uc1thdHRyTmFtZV0sIGF0dHJOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG4gICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxpbmsgV2ViR0wgcHJvZ3JhbTpcXG5cXG4nICsgZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hhZGVyID0gbmV3IFNoYWRlcih2ZXJ0U2hhZGVyLCBmcmFnU2hhZGVyLCBwcm9ncmFtKTtcblxuICAgICAgICBjb25zdCBudW1PZkF0dHJzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZBdHRyczsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBpbmZvID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xuICAgICAgICAgICAgaWYgKCFpbmZvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IFdlYkdMIGF0dHJpYnV0ZSBpbmZvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGluZm8ubmFtZSk7XG4gICAgICAgICAgICBzaGFkZXIucmVnaXN0ZXJBdHRyaWJ1dGUoaW5mby5uYW1lLCBpbmZvLnNpemUsIGluZm8udHlwZSwgbG9jYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbnVtT2ZVbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTtcbiAgICAgICAgY29uc3Qgc2FtcGxlckNvdW50ZXIgPSB7Y291bnQ6IDB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU9mVW5pZm9ybXM7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XG4gICAgICAgICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgV2ViR0wgdW5pZm9ybSBpbmZvJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBpbmZvLm5hbWUpO1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgdW5pZm9ybSBsb2NhdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2hhZGVyLnJlZ2lzdGVyVW5pZm9ybShcbiAgICAgICAgICAgICAgICBpbmZvLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5mby5zaXplLFxuICAgICAgICAgICAgICAgIGluZm8udHlwZSxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgICAgICBnZXRVbmlmb3JtU2V0dGVyKGdsLCBpbmZvLm5hbWUsIGluZm8uc2l6ZSwgaW5mby50eXBlLCBsb2NhdGlvbiwgc2FtcGxlckNvdW50ZXIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNoYWRlcjtcbiAgICB9XG5cbiAgICBkZWxldGVTaGFkZXIoc2hhZGVyOiBTaGFkZXIpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAoc2hhZGVyLnByb2dyYW0pIHtcbiAgICAgICAgICAgIGdsLmRlbGV0ZVByb2dyYW0oc2hhZGVyLnByb2dyYW0pO1xuICAgICAgICAgICAgc2hhZGVyLnByb2dyYW0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRlci52ZXJ0U2hhZGVyKSB7XG4gICAgICAgICAgICBnbC5kZWxldGVTaGFkZXIoc2hhZGVyLnZlcnRTaGFkZXIpO1xuICAgICAgICAgICAgc2hhZGVyLnZlcnRTaGFkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRlci5mcmFnU2hhZGVyKSB7XG4gICAgICAgICAgICBnbC5kZWxldGVTaGFkZXIoc2hhZGVyLmZyYWdTaGFkZXIpO1xuICAgICAgICAgICAgc2hhZGVyLmZyYWdTaGFkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgc2hhZGVyLnVuaWZvcm1zID0ge307XG4gICAgICAgIHNoYWRlci5hdHRyaWJ1dGVzID0ge307XG4gICAgfVxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PSBmcmFtZSBidWZmZXIgPT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgY3JlYXRlRnJhbWVCdWZmZXIoKTogRnJhbWVCdWZmZXIge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGNvbnN0IGZyYW1lQnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgICAgaWYgKCFmcmFtZUJ1ZmZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFdlYkdMIGZyYW1lIGJ1ZmZlcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRnJhbWVCdWZmZXIoZnJhbWVCdWZmZXIpO1xuICAgIH1cblxuICAgIGF0dGFjaENvbG9yVGV4dHVyZShmcmFtZUJ1ZmZlcjogRnJhbWVCdWZmZXIsIHRleHR1cmU6IFRleHR1cmUgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoQ29sb3JUZXh0dXJlcyhmcmFtZUJ1ZmZlciwgdGV4dHVyZSA/IFt0ZXh0dXJlXSA6IFtdKTtcbiAgICB9XG5cbiAgICBhdHRhY2hDb2xvclRleHR1cmVzKGZyYW1lQnVmZmVyOiBGcmFtZUJ1ZmZlciwgdGV4dHVyZXM6IFRleHR1cmVbXSkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmICghZnJhbWVCdWZmZXIuZ2xGcmFtZUJ1ZmZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGcmFtZSBidWZmZXIgaGFzIGJlZW4gZGVsZXRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVCdWZmZXIuZ2xGcmFtZUJ1ZmZlcik7XG4gICAgICAgIGZyYW1lQnVmZmVyLnRleHR1cmVzLmxlbmd0aCA9IHRleHR1cmVzLmxlbmd0aDtcbiAgICAgICAgdGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGV4dHVyZS5nbFRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RleHR1cmUgaGFzIGJlZW4gZGVsZXRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaW5kZXgsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUuZ2xUZXh0dXJlLCB0ZXh0dXJlLmxldmVsKTtcblxuICAgICAgICAgICAgZnJhbWVCdWZmZXIudGV4dHVyZXNbaW5kZXhdID0gdGV4dHVyZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGdsLmRyYXdCdWZmZXJzKHRleHR1cmVzLm1hcCgodGV4dHVyZSwgaW5kZXgpID0+IChnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGluZGV4KSkpO1xuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICB0aGlzLmN1cnJlbnRGcmFtZUJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBhdHRhY2hEZXB0aFRleHR1cmUoZnJhbWVCdWZmZXI6IEZyYW1lQnVmZmVyLCB0ZXh0dXJlOiBUZXh0dXJlIHwgbnVsbCkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGlmICghZnJhbWVCdWZmZXIuZ2xGcmFtZUJ1ZmZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGcmFtZSBidWZmZXIgaGFzIGJlZW4gZGVsZXRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZnJhbWVCdWZmZXIuZ2xGcmFtZUJ1ZmZlcik7XG4gICAgICAgIGlmICh0ZXh0dXJlKSB7XG4gICAgICAgICAgICBpZiAoIXRleHR1cmUuZ2xUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0dXJlIGhhcyBiZWVuIGRlbGV0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLmdsVGV4dHVyZSwgdGV4dHVyZS5sZXZlbCk7XG4gICAgICAgICAgICBmcmFtZUJ1ZmZlci5kZXB0aFRleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsIGdsLlRFWFRVUkVfMkQsIG51bGwsIDApO1xuICAgICAgICAgICAgZnJhbWVCdWZmZXIuZGVwdGhUZXh0dXJlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lQnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGF0dGFjaFN0ZW5jaWxUZXh0dXJlKGZyYW1lQnVmZmVyOiBGcmFtZUJ1ZmZlciwgdGV4dHVyZTogVGV4dHVyZSB8IG51bGwpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBpZiAoIWZyYW1lQnVmZmVyLmdsRnJhbWVCdWZmZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRnJhbWUgYnVmZmVyIGhhcyBiZWVuIGRlbGV0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGZyYW1lQnVmZmVyLmdsRnJhbWVCdWZmZXIpO1xuICAgICAgICBpZiAodGV4dHVyZSkge1xuICAgICAgICAgICAgaWYgKCF0ZXh0dXJlLmdsVGV4dHVyZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dHVyZSBoYXMgYmVlbiBkZWxldGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlLmdsVGV4dHVyZSwgdGV4dHVyZS5sZXZlbCk7XG4gICAgICAgICAgICBmcmFtZUJ1ZmZlci5zdGVuY2lsVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuU1RFTkNJTF9BVFRBQ0hNRU5ULCBnbC5URVhUVVJFXzJELCBudWxsLCAwKTtcbiAgICAgICAgICAgIGZyYW1lQnVmZmVyLnN0ZW5jaWxUZXh0dXJlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICAgIHRoaXMuY3VycmVudEZyYW1lQnVmZmVyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGRlbGV0ZUZyYW1lQnVmZmVyKGZyYW1lQnVmZmVyOiBGcmFtZUJ1ZmZlciwgZGVsZXRlVGV4dHVyZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGlmIChmcmFtZUJ1ZmZlci5nbEZyYW1lQnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLmdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZyYW1lQnVmZmVyLmdsRnJhbWVCdWZmZXIpO1xuICAgICAgICAgICAgZnJhbWVCdWZmZXIuZ2xGcmFtZUJ1ZmZlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVsZXRlVGV4dHVyZSkge1xuICAgICAgICAgICAgZnJhbWVCdWZmZXIudGV4dHVyZXMuZm9yRWFjaCh0ZXh0dXJlID0+IHRoaXMuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNpemVGcmFtZUJ1ZmZlcihmcmFtZUJ1ZmZlcjogRnJhbWVCdWZmZXIsIHdpZHRoOiBudW1iZXIgPSB0aGlzLnN0YXRlLndpZHRoLCBoZWlnaHQ6IG51bWJlciA9IHRoaXMuc3RhdGUuaGVpZ2h0KSB7XG4gICAgICAgIGZyYW1lQnVmZmVyLnRleHR1cmVzLmZvckVhY2godGV4dHVyZSA9PiB0aGlzLnJlc2l6ZVRleHR1cmUodGV4dHVyZSwgd2lkdGgsIGhlaWdodCkpO1xuICAgICAgICBmcmFtZUJ1ZmZlci5kZXB0aFRleHR1cmUgJiYgdGhpcy5yZXNpemVUZXh0dXJlKGZyYW1lQnVmZmVyLmRlcHRoVGV4dHVyZSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGZyYW1lQnVmZmVyLnN0ZW5jaWxUZXh0dXJlICYmIHRoaXMucmVzaXplVGV4dHVyZShmcmFtZUJ1ZmZlci5zdGVuY2lsVGV4dHVyZSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgc3RhcnRDYXB0dXJlKGZyYW1lQnVmZmVyOiBGcmFtZUJ1ZmZlcikge1xuICAgICAgICB0aGlzLmZsdXNoMkQoKTtcbiAgICAgICAgdGhpcy5mcmFtZUJ1ZmZlclN0YWNrLnB1c2goZnJhbWVCdWZmZXIpO1xuICAgIH1cblxuICAgIGVuZENhcHR1cmUoKSB7XG4gICAgICAgIHRoaXMuZmx1c2gyRCgpO1xuICAgICAgICB0aGlzLmZyYW1lQnVmZmVyU3RhY2sucG9wKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzd2l0Y2hGcmFtZUJ1ZmZlcigpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmZyYW1lQnVmZmVyU3RhY2s7XG4gICAgICAgIGNvbnN0IGZyYW1lQnVmZmVyID0gc3RhY2subGVuZ3RoID8gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChmcmFtZUJ1ZmZlciAhPT0gdGhpcy5jdXJyZW50RnJhbWVCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEZyYW1lQnVmZmVyID0gZnJhbWVCdWZmZXIgfHwgdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBmcmFtZUJ1ZmZlcj8uZ2xGcmFtZUJ1ZmZlciB8fCBudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT0gM2QgLSBnZW9tZXRyeSA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBkaXNwb3NlR2VvbWV0cnkoZ2VvbWV0cnk6IEdlb21ldHJ5KSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcbiAgICAgICAgaWYgKGdlb21ldHJ5LnZhbykge1xuICAgICAgICAgICAgZ2wuZGVsZXRlVmVydGV4QXJyYXkoZ2VvbWV0cnkudmFvKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnZhbyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2VvbWV0cnkuaWJvKSB7XG4gICAgICAgICAgICBnbC5kZWxldGVCdWZmZXIoZ2VvbWV0cnkuaWJvKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LmlibyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBnZW9tZXRyeS5hdHRyaWJ1dGVzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgICAgICBpZiAoYXR0ci52Ym8pIHtcbiAgICAgICAgICAgICAgICBnbC5kZWxldGVCdWZmZXIoYXR0ci52Ym8pO1xuICAgICAgICAgICAgICAgIGF0dHIudmJvID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBkcmF3R2VvbWV0cnkoZ2VvbWV0cnk6IEdlb21ldHJ5KSB7XG4gICAgICAgIGlmICh0aGlzLmRyYXdpbmcyRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXJlci5lbmQyRCBtdXN0IGJlIGNhbGwgYmVmb3JlIGRyYXcgZ2VvbWV0cnknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcblxuICAgICAgICBpZiAoIWdlb21ldHJ5LnZhbykge1xuICAgICAgICAgICAgY29uc3QgdmFvID0gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcbiAgICAgICAgICAgIGlmICghdmFvKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIFZlcnRleCBBcnJheSBPYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdlb21ldHJ5LnZhbyA9IHZhbztcbiAgICAgICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh2YW8pO1xuICAgICAgICAgICAgY29uc3Qgc2hhZGVyID0gdGhpcy5jdXJyZW50U2hhZGVyO1xuICAgICAgICAgICAgaWYgKCFzaGFkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWRlciBub3Qgc2V0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJMb2NhdGlvbnMgPSB0aGlzLmF0dHJpYkxvY2F0aW9ucztcbiAgICAgICAgICAgIGdlb21ldHJ5LmF0dHJpYnV0ZXMuZm9yRWFjaChnZW9BdHRyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWdlb0F0dHIudmJvKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlb0F0dHIudmJvID0gdGhpcy5jcmVhdGVWQk8oZ2VvQXR0ci52ZXJ0aWNlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJMb2NhdGlvbnMgJiYgYXR0cmliTG9jYXRpb25zLmhhc093blByb3BlcnR5KGdlb0F0dHIubmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXlBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJMb2NhdGlvbnNbZ2VvQXR0ci5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb0F0dHIudmJvLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvQXR0ci5jb21wb25lbnRTaXplXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gc2hhZGVyLmF0dHJpYnV0ZXNbZ2VvQXR0ci5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iaW5kVmVydGV4QXJyYXlBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb0F0dHIudmJvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb0F0dHIuY29tcG9uZW50U2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShnZW9tZXRyeS52YW8pO1xuXG4gICAgICAgIGlmICghZ2VvbWV0cnkuaWJvKSB7XG4gICAgICAgICAgICBnZW9tZXRyeS5pYm8gPSB0aGlzLmNyZWF0ZUlCTyhnZW9tZXRyeS5pbmRpY2VzKTtcbiAgICAgICAgfVxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBnZW9tZXRyeS5pYm8pO1xuXG4gICAgICAgIHRoaXMuc3dpdGNoRnJhbWVCdWZmZXIoKTtcbiAgICAgICAgc3dpdGNoIChnZW9tZXRyeS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIEdlb21ldHJ5LlRZUEVfVFJJQU5HTEVTOlxuICAgICAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGdlb21ldHJ5LmluZGljZXMubGVuZ3RoLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEdlb21ldHJ5LlRZUEVfTElORVM6XG4gICAgICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLkxJTkVTLCBnZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCwgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xuICAgIH1cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT0gMkQgLSBpbnN0YW5jZWQgZHJhd2luZyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBiZWdpbjJEKCkge1xuICAgICAgICBpZiAodGhpcy5kcmF3aW5nMkQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVuZGVyZXIuZW5kMkQgbXVzdCBiZSBjYWxsIGJlZm9yZSBiZWdpbicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd2luZzJEID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBlbmQyRCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRyYXdpbmcyRCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXJlci5iZWdpbjJEIG11c3QgYmUgY2FsbCBiZWZvcmUgZW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbHVzaDJEKCk7XG4gICAgICAgIHRoaXMuZHJhd2luZzJEID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0Q2FtZXJhUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5jYW1lcmFYID0geDtcbiAgICAgICAgdGhpcy5zdGF0ZS5jYW1lcmFZID0geTtcbiAgICB9XG5cbiAgICBjZW50ZXJDYW1lcmEoKSB7XG4gICAgICAgIHRoaXMuc2V0Q2FtZXJhUG9zaXRpb24odGhpcy5zdGF0ZS53aWR0aCAvIDIsIHRoaXMuc3RhdGUuaGVpZ2h0IC8gMik7XG4gICAgfVxuXG4gICAgc2V0Wm9vbSh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdGF0ZS56b29tID0gem9vbTtcbiAgICB9XG5cbiAgICBzZXRDb2xvcihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIgPSAxKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuY29sb3IuciA9IHI7XG4gICAgICAgIHRoaXMuc3RhdGUuY29sb3IuZyA9IGc7XG4gICAgICAgIHRoaXMuc3RhdGUuY29sb3IuYiA9IGI7XG4gICAgICAgIHRoaXMuc3RhdGUuY29sb3IuYSA9IGE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmbHVzaDJEKCkge1xuICAgICAgICBpZiAoIXRoaXMuZHJhd2luZzJEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYmF0Y2hJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5iYXRjaFR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQmF0Y2hUeXBlLk1FU0g6XG4gICAgICAgICAgICAgICAgdGhpcy5mbHVzaE1lc2goKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQmF0Y2hUeXBlLkxJTkVTOlxuICAgICAgICAgICAgICAgIHRoaXMuZmx1c2hMaW5lcygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmbHVzaE1lc2goKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLmJhdGNoVGV4dHVyZTtcblxuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmJhdGNoSW5kZXg7XG4gICAgICAgIHRoaXMuYmF0Y2hJbmRleCA9IDA7XG5cbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuICAgICAgICBsZXQgc2hhZGVyID0gdGhpcy5jdXJyZW50U2hhZGVyO1xuICAgICAgICBpZiAoIXNoYWRlcikge1xuICAgICAgICAgICAgc2hhZGVyID0gdGhpcy5JTUFHRV8yRF9TSEFERVI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFkZXIucHJvZ3JhbSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFkZXIgaGFzIGJlZW4gZGVsZXRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGdsLnVzZVByb2dyYW0oc2hhZGVyLnByb2dyYW0pO1xuXG4gICAgICAgIC8vIHBvc2l0aW9uXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJhdGNoUG9zaXRpb25CdWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgdGhpcy5iYXRjaFBvc2l0aW9uVmVydGljZXMpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbkxvY2F0aW9uID0gc2hhZGVyLmF0dHJpYnV0ZXNbQV9QT1NJVElPTl0ubG9jYXRpb247XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAgICAgLy8gdGV4LWNvb3JkXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJhdGNoVGV4Q29vcmRCdWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgdGhpcy5iYXRjaFRleENvb3JkVmVydGljZXMpO1xuICAgICAgICBjb25zdCB0ZXhDb29yZExvY2F0aW9uID0gc2hhZGVyLmF0dHJpYnV0ZXNbQV9URVhfQ09PUkRdLmxvY2F0aW9uO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXhDb29yZExvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcih0ZXhDb29yZExvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgICAgIC8vIGNvbG9yXG4gICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLmJhdGNoQ29sb3JCdWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgdGhpcy5iYXRjaENvbG9yVmVydGljZXMpO1xuICAgICAgICBjb25zdCBjb2xvckxvY2F0aW9uID0gc2hhZGVyLmF0dHJpYnV0ZXNbQV9DT0xPUl0ubG9jYXRpb247XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGNvbG9yTG9jYXRpb24pO1xuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNvbG9yTG9jYXRpb24sIDQsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cbiAgICAgICAgLy8gdGV4dHVyZVxuICAgICAgICBzaGFkZXIudW5pZm9ybXNbVV9URVhUVVJFXT8uc2V0dGVyKHRleHR1cmU/LmdsVGV4dHVyZSk7XG5cbiAgICAgICAgLy8gZHJhd1xuICAgICAgICB0aGlzLnN3aXRjaEZyYW1lQnVmZmVyKCk7XG4gICAgICAgIGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCBsZW4gKiA2KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZsdXNoTGluZXMoKSB7XG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMuYmF0Y2hJbmRleDtcbiAgICAgICAgdGhpcy5iYXRjaEluZGV4ID0gMDtcblxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGxldCBzaGFkZXIgPSB0aGlzLmN1cnJlbnRTaGFkZXI7XG4gICAgICAgIGlmICghc2hhZGVyKSB7XG4gICAgICAgICAgICBzaGFkZXIgPSB0aGlzLkNPTE9SXzJEX1NIQURFUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWRlci5wcm9ncmFtKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWRlciBoYXMgYmVlbiBkZWxldGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZ2wudXNlUHJvZ3JhbShzaGFkZXIucHJvZ3JhbSk7XG5cbiAgICAgICAgLy8gcG9zaXRpb25cbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuYmF0Y2hQb3NpdGlvbkJ1ZmZlcik7XG4gICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLCAwLCB0aGlzLmJhdGNoUG9zaXRpb25WZXJ0aWNlcyk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uTG9jYXRpb24gPSBzaGFkZXIuYXR0cmlidXRlc1tBX1BPU0lUSU9OXS5sb2NhdGlvbjtcbiAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb25Mb2NhdGlvbik7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb25Mb2NhdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuICAgICAgICAvLyBjb2xvclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5iYXRjaENvbG9yQnVmZmVyKTtcbiAgICAgICAgZ2wuYnVmZmVyU3ViRGF0YShnbC5BUlJBWV9CVUZGRVIsIDAsIHRoaXMuYmF0Y2hDb2xvclZlcnRpY2VzKTtcbiAgICAgICAgY29uc3QgY29sb3JMb2NhdGlvbiA9IHNoYWRlci5hdHRyaWJ1dGVzW0FfQ09MT1JdLmxvY2F0aW9uO1xuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjb2xvckxvY2F0aW9uKTtcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihjb2xvckxvY2F0aW9uLCA0LCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG4gICAgICAgIC8vIGRyYXdcbiAgICAgICAgdGhpcy5zd2l0Y2hGcmFtZUJ1ZmZlcigpO1xuICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBsZW4gKiAyKTtcbiAgICB9XG5cbiAgICBkcmF3TGluZSh4MDogbnVtYmVyLCB5MDogbnVtYmVyLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyKSB7XG4gICAgICAgIGlmICghdGhpcy5kcmF3aW5nMkQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVuZGVyZXIuYmVnaW4yRCBtdXN0IGJlIGNhbGwgYmVmb3JlIGRyYXcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmJhdGNoSW5kZXggPj0gdGhpcy5iYXRjaFNpemUgKiAzXG4gICAgICAgICAgICB8fCB0aGlzLmJhdGNoVHlwZSAhPT0gQmF0Y2hUeXBlLkxJTkVTXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5mbHVzaDJEKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXRjaFR5cGUgPSBCYXRjaFR5cGUuTElORVM7XG5cbiAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMuc3RhdGUuem9vbTtcbiAgICAgICAgY29uc3QgaW52VyA9IDIgLyB0aGlzLnN0YXRlLndpZHRoICogem9vbTtcbiAgICAgICAgY29uc3QgaW52SCA9IDIgLyB0aGlzLnN0YXRlLmhlaWdodCAqIHpvb207XG4gICAgICAgIGNvbnN0IGNhbWVyYVggPSB0aGlzLnN0YXRlLmNhbWVyYVg7XG4gICAgICAgIGNvbnN0IGNhbWVyYVkgPSB0aGlzLnN0YXRlLmNhbWVyYVk7XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb25WZXJ0aWNlcyA9IHRoaXMuYmF0Y2hQb3NpdGlvblZlcnRpY2VzO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuYmF0Y2hJbmRleCAqIDIgKiAyO1xuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4XSA9ICh4MCAtIGNhbWVyYVgpICogaW52VztcbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDFdID0gKHkwIC0gY2FtZXJhWSkgKiBpbnZIO1xuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4ICsgMl0gPSAoeDEgLSBjYW1lcmFYKSAqIGludlc7XG4gICAgICAgIHBvc2l0aW9uVmVydGljZXNbaW5kZXggKyAzXSA9ICh5MSAtIGNhbWVyYVkpICogaW52SDtcblxuICAgICAgICBjb25zdCBjb2xvckluZGV4ID0gdGhpcy5iYXRjaEluZGV4ICogMiAqIDQ7XG4gICAgICAgIGNvbnN0IHZlcnRleENvbG9ycyA9IHRoaXMuYmF0Y2hDb2xvclZlcnRpY2VzO1xuICAgICAgICBjb25zdCBjb2xvciA9IHRoaXMuc3RhdGUuY29sb3I7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpICogNDtcbiAgICAgICAgICAgIHZlcnRleENvbG9yc1tjb2xvckluZGV4ICsgb2Zmc2V0XSA9IGNvbG9yLnI7XG4gICAgICAgICAgICB2ZXJ0ZXhDb2xvcnNbY29sb3JJbmRleCArIDEgKyBvZmZzZXRdID0gY29sb3IuZztcbiAgICAgICAgICAgIHZlcnRleENvbG9yc1tjb2xvckluZGV4ICsgMiArIG9mZnNldF0gPSBjb2xvci5iO1xuICAgICAgICAgICAgdmVydGV4Q29sb3JzW2NvbG9ySW5kZXggKyAzICsgb2Zmc2V0XSA9IGNvbG9yLmE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJhdGNoSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHB1c2hDd1F1YWRWZXJ0aWNlcyhcbiAgICAgICAgdGV4dHVyZTogVGV4dHVyZSxcbiAgICAgICAgeDA6IG51bWJlcixcbiAgICAgICAgeTA6IG51bWJlcixcbiAgICAgICAgeDE6IG51bWJlcixcbiAgICAgICAgeTE6IG51bWJlcixcbiAgICAgICAgeDI6IG51bWJlcixcbiAgICAgICAgeTI6IG51bWJlcixcbiAgICAgICAgeDM6IG51bWJlcixcbiAgICAgICAgeTM6IG51bWJlcixcbiAgICAgICAgdGV4WDA6IG51bWJlcixcbiAgICAgICAgdGV4WTA6IG51bWJlcixcbiAgICAgICAgdGV4WDE6IG51bWJlcixcbiAgICAgICAgdGV4WTE6IG51bWJlcixcbiAgICAgICAgdGV4WDI6IG51bWJlcixcbiAgICAgICAgdGV4WTI6IG51bWJlcixcbiAgICAgICAgdGV4WDM6IG51bWJlcixcbiAgICAgICAgdGV4WTM6IG51bWJlclxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuZHJhd2luZzJEKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbmRlcmVyLmJlZ2luMkQgbXVzdCBiZSBjYWxsIGJlZm9yZSBkcmF3Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5iYXRjaEluZGV4ID49IHRoaXMuYmF0Y2hTaXplXG4gICAgICAgICAgICB8fCB0ZXh0dXJlICE9PSB0aGlzLmJhdGNoVGV4dHVyZVxuICAgICAgICAgICAgfHwgdGhpcy5iYXRjaFR5cGUgIT09IEJhdGNoVHlwZS5NRVNIXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5mbHVzaDJEKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYXRjaFR5cGUgPSBCYXRjaFR5cGUuTUVTSDtcblxuICAgICAgICB0aGlzLmJhdGNoVGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5iYXRjaEluZGV4ICogMyAqIDIgKiAyO1xuICAgICAgICBjb25zdCBwb3NpdGlvblZlcnRpY2VzID0gdGhpcy5iYXRjaFBvc2l0aW9uVmVydGljZXM7XG4gICAgICAgIGNvbnN0IHRleENvb3JkVmVydGljZXMgPSB0aGlzLmJhdGNoVGV4Q29vcmRWZXJ0aWNlcztcblxuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4XSA9IHgwO1xuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4ICsgMV0gPSB5MDtcbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDJdID0geDE7XG4gICAgICAgIHBvc2l0aW9uVmVydGljZXNbaW5kZXggKyAzXSA9IHkxO1xuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4ICsgNF0gPSB4MztcbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDVdID0geTM7XG5cbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDZdID0geDE7XG4gICAgICAgIHBvc2l0aW9uVmVydGljZXNbaW5kZXggKyA3XSA9IHkxO1xuICAgICAgICBwb3NpdGlvblZlcnRpY2VzW2luZGV4ICsgOF0gPSB4MjtcbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDldID0geTI7XG4gICAgICAgIHBvc2l0aW9uVmVydGljZXNbaW5kZXggKyAxMF0gPSB4MztcbiAgICAgICAgcG9zaXRpb25WZXJ0aWNlc1tpbmRleCArIDExXSA9IHkzO1xuXG4gICAgICAgIGlmICh0ZXh0dXJlLmZsaXBZKSB7XG4gICAgICAgICAgICBbdGV4WDAsIHRleFkwLCB0ZXhYMywgdGV4WTNdID0gW3RleFgzLCB0ZXhZMywgdGV4WDAsIHRleFkwXTtcbiAgICAgICAgICAgIFt0ZXhYMSwgdGV4WTEsIHRleFgyLCB0ZXhZMl0gPSBbdGV4WDIsIHRleFkyLCB0ZXhYMSwgdGV4WTFdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGV4Q29vcmRWZXJ0aWNlc1tpbmRleF0gPSB0ZXhYMDtcbiAgICAgICAgdGV4Q29vcmRWZXJ0aWNlc1tpbmRleCArIDFdID0gdGV4WTA7XG4gICAgICAgIHRleENvb3JkVmVydGljZXNbaW5kZXggKyAyXSA9IHRleFgxO1xuICAgICAgICB0ZXhDb29yZFZlcnRpY2VzW2luZGV4ICsgM10gPSB0ZXhZMTtcbiAgICAgICAgdGV4Q29vcmRWZXJ0aWNlc1tpbmRleCArIDRdID0gdGV4WDM7XG4gICAgICAgIHRleENvb3JkVmVydGljZXNbaW5kZXggKyA1XSA9IHRleFkzO1xuXG4gICAgICAgIHRleENvb3JkVmVydGljZXNbaW5kZXggKyA2XSA9IHRleFgxO1xuICAgICAgICB0ZXhDb29yZFZlcnRpY2VzW2luZGV4ICsgN10gPSB0ZXhZMTtcbiAgICAgICAgdGV4Q29vcmRWZXJ0aWNlc1tpbmRleCArIDhdID0gdGV4WDI7XG4gICAgICAgIHRleENvb3JkVmVydGljZXNbaW5kZXggKyA5XSA9IHRleFkyO1xuICAgICAgICB0ZXhDb29yZFZlcnRpY2VzW2luZGV4ICsgMTBdID0gdGV4WDM7XG4gICAgICAgIHRleENvb3JkVmVydGljZXNbaW5kZXggKyAxMV0gPSB0ZXhZMztcblxuICAgICAgICBjb25zdCBjb2xvckluZGV4ID0gdGhpcy5iYXRjaEluZGV4ICogMyAqIDIgKiA0O1xuICAgICAgICBjb25zdCB2ZXJ0ZXhDb2xvcnMgPSB0aGlzLmJhdGNoQ29sb3JWZXJ0aWNlcztcbiAgICAgICAgY29uc3QgY29sb3IgPSB0aGlzLnN0YXRlLmNvbG9yO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDIgKiAzOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGkgKiA0O1xuICAgICAgICAgICAgdmVydGV4Q29sb3JzW2NvbG9ySW5kZXggKyBvZmZzZXRdID0gY29sb3IucjtcbiAgICAgICAgICAgIHZlcnRleENvbG9yc1tjb2xvckluZGV4ICsgMSArIG9mZnNldF0gPSBjb2xvci5nO1xuICAgICAgICAgICAgdmVydGV4Q29sb3JzW2NvbG9ySW5kZXggKyAyICsgb2Zmc2V0XSA9IGNvbG9yLmI7XG4gICAgICAgICAgICB2ZXJ0ZXhDb2xvcnNbY29sb3JJbmRleCArIDMgKyBvZmZzZXRdID0gY29sb3IuYTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJhdGNoSW5kZXggKz0gMTtcbiAgICB9XG5cbiAgICBkcmF3Q3dRdWFkKFxuICAgICAgICB0ZXh0dXJlOiBUZXh0dXJlLFxuICAgICAgICB4MDogbnVtYmVyLFxuICAgICAgICB5MDogbnVtYmVyLFxuICAgICAgICB4MTogbnVtYmVyLFxuICAgICAgICB5MTogbnVtYmVyLFxuICAgICAgICB4MjogbnVtYmVyLFxuICAgICAgICB5MjogbnVtYmVyLFxuICAgICAgICB4MzogbnVtYmVyLFxuICAgICAgICB5MzogbnVtYmVyLFxuICAgICAgICB0ZXhYMDogbnVtYmVyID0gMCxcbiAgICAgICAgdGV4WTA6IG51bWJlciA9IHRleHR1cmUuaGVpZ2h0LFxuICAgICAgICB0ZXhYMTogbnVtYmVyID0gdGV4dHVyZS53aWR0aCxcbiAgICAgICAgdGV4WTE6IG51bWJlciA9IHRleHR1cmUuaGVpZ2h0LFxuICAgICAgICB0ZXhYMjogbnVtYmVyID0gdGV4dHVyZS53aWR0aCxcbiAgICAgICAgdGV4WTI6IG51bWJlciA9IDAsXG4gICAgICAgIHRleFgzOiBudW1iZXIgPSAwLFxuICAgICAgICB0ZXhZMzogbnVtYmVyID0gMFxuICAgICkge1xuICAgICAgICBjb25zdCB6b29tID0gdGhpcy5zdGF0ZS56b29tO1xuICAgICAgICBjb25zdCBpbnZXID0gMiAvIHRoaXMuc3RhdGUud2lkdGggKiB6b29tO1xuICAgICAgICBjb25zdCBpbnZIID0gMiAvIHRoaXMuc3RhdGUuaGVpZ2h0ICogem9vbTtcbiAgICAgICAgY29uc3QgaW52U1cgPSAxIC8gdGV4dHVyZS53aWR0aDtcbiAgICAgICAgY29uc3QgaW52U0ggPSAxIC8gdGV4dHVyZS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNhbWVyYVggPSB0aGlzLnN0YXRlLmNhbWVyYVg7XG4gICAgICAgIGNvbnN0IGNhbWVyYVkgPSB0aGlzLnN0YXRlLmNhbWVyYVk7XG4gICAgICAgIHRoaXMucHVzaEN3UXVhZFZlcnRpY2VzKFxuICAgICAgICAgICAgdGV4dHVyZSxcbiAgICAgICAgICAgICh4MCAtIGNhbWVyYVgpICogaW52VyxcbiAgICAgICAgICAgICh5MCAtIGNhbWVyYVkpICogaW52SCxcbiAgICAgICAgICAgICh4MSAtIGNhbWVyYVgpICogaW52VyxcbiAgICAgICAgICAgICh5MSAtIGNhbWVyYVkpICogaW52SCxcbiAgICAgICAgICAgICh4MiAtIGNhbWVyYVgpICogaW52VyxcbiAgICAgICAgICAgICh5MiAtIGNhbWVyYVkpICogaW52SCxcbiAgICAgICAgICAgICh4MyAtIGNhbWVyYVgpICogaW52VyxcbiAgICAgICAgICAgICh5MyAtIGNhbWVyYVkpICogaW52SCxcbiAgICAgICAgICAgIHRleFgwICogaW52U1csXG4gICAgICAgICAgICB0ZXhZMCAqIGludlNILFxuICAgICAgICAgICAgdGV4WDEgKiBpbnZTVyxcbiAgICAgICAgICAgIHRleFkxICogaW52U0gsXG4gICAgICAgICAgICB0ZXhYMiAqIGludlNXLFxuICAgICAgICAgICAgdGV4WTIgKiBpbnZTSCxcbiAgICAgICAgICAgIHRleFgzICogaW52U1csXG4gICAgICAgICAgICB0ZXhZMyAqIGludlNIXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZHJhd1JlY3QoXG4gICAgICAgIHRleHR1cmU6IFRleHR1cmUsXG4gICAgICAgIGR4OiBudW1iZXIgPSAwLFxuICAgICAgICBkeTogbnVtYmVyID0gMCxcbiAgICAgICAgZHc6IG51bWJlciA9IHRleHR1cmUud2lkdGgsXG4gICAgICAgIGRoOiBudW1iZXIgPSB0ZXh0dXJlLmhlaWdodCxcbiAgICAgICAgZmxpcFg6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgZmxpcFk6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgc3g6IG51bWJlciA9IDAsXG4gICAgICAgIHN5OiBudW1iZXIgPSAwLFxuICAgICAgICBzdzogbnVtYmVyID0gdGV4dHVyZS53aWR0aCxcbiAgICAgICAgc2g6IG51bWJlciA9IHRleHR1cmUuaGVpZ2h0XG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGRzdExlZnQgPSBkeDtcbiAgICAgICAgY29uc3QgZHN0UmlnaHQgPSBkeCArIGR3O1xuICAgICAgICBjb25zdCBkc3RUb3AgPSBkeSArIGRoO1xuICAgICAgICBjb25zdCBkc3RCb3R0b20gPSBkeTtcbiAgICAgICAgbGV0IHRleExlZnQgPSBzeDtcbiAgICAgICAgbGV0IHRleFJpZ2h0ID0gc3ggKyBzdztcbiAgICAgICAgbGV0IHRleFRvcCA9IHN5O1xuICAgICAgICBsZXQgdGV4Qm90dG9tID0gc3kgKyBzaDtcbiAgICAgICAgaWYgKGZsaXBYKSB7XG4gICAgICAgICAgICBbdGV4TGVmdCwgdGV4UmlnaHRdID0gW3RleFJpZ2h0LCB0ZXhMZWZ0XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmxpcFkpIHtcbiAgICAgICAgICAgIFt0ZXhUb3AsIHRleEJvdHRvbV0gPSBbdGV4Qm90dG9tLCB0ZXhUb3BdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0N3UXVhZChcbiAgICAgICAgICAgIHRleHR1cmUsXG4gICAgICAgICAgICBkc3RMZWZ0LFxuICAgICAgICAgICAgZHN0Qm90dG9tLFxuICAgICAgICAgICAgZHN0UmlnaHQsXG4gICAgICAgICAgICBkc3RCb3R0b20sXG4gICAgICAgICAgICBkc3RSaWdodCxcbiAgICAgICAgICAgIGRzdFRvcCxcbiAgICAgICAgICAgIGRzdExlZnQsXG4gICAgICAgICAgICBkc3RUb3AsXG4gICAgICAgICAgICB0ZXhMZWZ0LFxuICAgICAgICAgICAgdGV4Qm90dG9tLFxuICAgICAgICAgICAgdGV4UmlnaHQsXG4gICAgICAgICAgICB0ZXhCb3R0b20sXG4gICAgICAgICAgICB0ZXhSaWdodCxcbiAgICAgICAgICAgIHRleFRvcCxcbiAgICAgICAgICAgIHRleExlZnQsXG4gICAgICAgICAgICB0ZXhUb3BcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkcmF3KFxuICAgICAgICB0ZXh0dXJlOiBUZXh0dXJlLFxuICAgICAgICBkc3RYOiBudW1iZXIgPSAwLFxuICAgICAgICBkc3RZOiBudW1iZXIgPSAwLFxuICAgICAgICBkc3RXOiBudW1iZXIgPSB0ZXh0dXJlLndpZHRoLFxuICAgICAgICBkc3RIOiBudW1iZXIgPSB0ZXh0dXJlLmhlaWdodCxcbiAgICAgICAgZmxpcFg6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgZmxpcFk6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgc3JjWDogbnVtYmVyID0gMCxcbiAgICAgICAgc3JjWTogbnVtYmVyID0gMCxcbiAgICAgICAgc3JjVzogbnVtYmVyID0gdGV4dHVyZS53aWR0aCxcbiAgICAgICAgc3JjSDogbnVtYmVyID0gdGV4dHVyZS5oZWlnaHQsXG4gICAgICAgIGR4OiBudW1iZXIgPSAwLFxuICAgICAgICBkeTogbnVtYmVyID0gMCxcbiAgICAgICAgb3g6IG51bWJlciA9IDAsXG4gICAgICAgIG95OiBudW1iZXIgPSAwLFxuICAgICAgICByb3RhdGlvbjogbnVtYmVyID0gMCxcbiAgICAgICAgc3g6IG51bWJlciA9IDEsXG4gICAgICAgIHN5OiBudW1iZXIgPSAxXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBkc3RYO1xuICAgICAgICBjb25zdCByaWdodCA9IGRzdFggKyBkc3RXO1xuICAgICAgICBjb25zdCB0b3AgPSBkc3RZICsgZHN0SDtcbiAgICAgICAgY29uc3QgYm90dG9tID0gZHN0WTtcblxuICAgICAgICBjb25zdCBjb3NSID0gTWF0aC5jb3Mocm90YXRpb24pO1xuICAgICAgICBjb25zdCBzaW5SID0gTWF0aC5zaW4ocm90YXRpb24pO1xuXG4gICAgICAgIGNvbnN0IG0xMSA9IGNvc1IgKiBzeDtcbiAgICAgICAgY29uc3QgbTEyID0gLXNpblIgKiBzeTtcbiAgICAgICAgY29uc3QgbTEzID0gLWNvc1IgKiBveCAqIHN4ICsgZHggKyBveCArIG95ICogc2luUiAqIHN5O1xuICAgICAgICBjb25zdCBtMjEgPSBzaW5SICogc3g7XG4gICAgICAgIGNvbnN0IG0yMiA9IGNvc1IgKiBzeTtcbiAgICAgICAgY29uc3QgbTIzID0gLWNvc1IgKiBveSAqIHN5ICsgZHkgLSBveCAqIHNpblIgKiBzeCArIG95O1xuXG4gICAgICAgIGNvbnN0IHYweCA9IGxlZnQ7XG4gICAgICAgIGNvbnN0IHYweSA9IGJvdHRvbTtcbiAgICAgICAgY29uc3QgdjF4ID0gcmlnaHQ7XG4gICAgICAgIGNvbnN0IHYxeSA9IGJvdHRvbTtcbiAgICAgICAgY29uc3QgdjJ4ID0gcmlnaHQ7XG4gICAgICAgIGNvbnN0IHYyeSA9IHRvcDtcbiAgICAgICAgY29uc3QgdjN4ID0gbGVmdDtcbiAgICAgICAgY29uc3QgdjN5ID0gdG9wO1xuXG4gICAgICAgIGxldCB0ZXhMZWZ0ID0gc3JjWDtcbiAgICAgICAgbGV0IHRleFJpZ2h0ID0gc3JjWCArIHNyY1c7XG4gICAgICAgIGxldCB0ZXhUb3AgPSBzcmNZO1xuICAgICAgICBsZXQgdGV4Qm90dG9tID0gc3JjWSArIHNyY0g7XG4gICAgICAgIGlmIChmbGlwWCkge1xuICAgICAgICAgICAgW3RleExlZnQsIHRleFJpZ2h0XSA9IFt0ZXhSaWdodCwgdGV4TGVmdF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsaXBZKSB7XG4gICAgICAgICAgICBbdGV4VG9wLCB0ZXhCb3R0b21dID0gW3RleEJvdHRvbSwgdGV4VG9wXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJhd0N3UXVhZChcbiAgICAgICAgICAgIHRleHR1cmUsXG4gICAgICAgICAgICBtMTEgKiB2MHggKyBtMTIgKiB2MHkgKyBtMTMsXG4gICAgICAgICAgICBtMjEgKiB2MHggKyBtMjIgKiB2MHkgKyBtMjMsXG4gICAgICAgICAgICBtMTEgKiB2MXggKyBtMTIgKiB2MXkgKyBtMTMsXG4gICAgICAgICAgICBtMjEgKiB2MXggKyBtMjIgKiB2MXkgKyBtMjMsXG4gICAgICAgICAgICBtMTEgKiB2MnggKyBtMTIgKiB2MnkgKyBtMTMsXG4gICAgICAgICAgICBtMjEgKiB2MnggKyBtMjIgKiB2MnkgKyBtMjMsXG4gICAgICAgICAgICBtMTEgKiB2M3ggKyBtMTIgKiB2M3kgKyBtMTMsXG4gICAgICAgICAgICBtMjEgKiB2M3ggKyBtMjIgKiB2M3kgKyBtMjMsXG4gICAgICAgICAgICB0ZXhMZWZ0LFxuICAgICAgICAgICAgdGV4Qm90dG9tLFxuICAgICAgICAgICAgdGV4UmlnaHQsXG4gICAgICAgICAgICB0ZXhCb3R0b20sXG4gICAgICAgICAgICB0ZXhSaWdodCxcbiAgICAgICAgICAgIHRleFRvcCxcbiAgICAgICAgICAgIHRleExlZnQsXG4gICAgICAgICAgICB0ZXhUb3BcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBkcmF3TGFiZWwoXG4gICAgICAgIGxhYmVsOiBMYWJlbCxcbiAgICAgICAgZHN0WDogbnVtYmVyID0gMCxcbiAgICAgICAgZHN0WTogbnVtYmVyID0gMCxcbiAgICAgICAgZHN0VzogbnVtYmVyID0gbGFiZWwud2lkdGgsXG4gICAgICAgIGRzdEg6IG51bWJlciA9IGxhYmVsLmhlaWdodCxcbiAgICAgICAgZmxpcFg6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgZmxpcFk6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgc3JjWDogbnVtYmVyID0gMCxcbiAgICAgICAgc3JjWTogbnVtYmVyID0gMCxcbiAgICAgICAgc3JjVzogbnVtYmVyID0gbGFiZWwud2lkdGgsXG4gICAgICAgIHNyY0g6IG51bWJlciA9IGxhYmVsLmhlaWdodCxcbiAgICAgICAgZHg6IG51bWJlciA9IDAsXG4gICAgICAgIGR5OiBudW1iZXIgPSAwLFxuICAgICAgICBveDogbnVtYmVyID0gMCxcbiAgICAgICAgb3k6IG51bWJlciA9IDAsXG4gICAgICAgIHJvdGF0aW9uOiBudW1iZXIgPSAwLFxuICAgICAgICBzeDogbnVtYmVyID0gMSxcbiAgICAgICAgc3k6IG51bWJlciA9IDFcbiAgICApIHtcbiAgICAgICAgdGhpcy5kcmF3KFxuICAgICAgICAgICAgbGFiZWwudGV4dHVyZSh0aGlzKSxcbiAgICAgICAgICAgIGRzdFgsXG4gICAgICAgICAgICBkc3RZLFxuICAgICAgICAgICAgZHN0VyxcbiAgICAgICAgICAgIGRzdEgsXG4gICAgICAgICAgICBmbGlwWCxcbiAgICAgICAgICAgIGZsaXBZLFxuICAgICAgICAgICAgc3JjWCxcbiAgICAgICAgICAgIHNyY1ksXG4gICAgICAgICAgICBzcmNXLFxuICAgICAgICAgICAgc3JjSCxcbiAgICAgICAgICAgIGR4LFxuICAgICAgICAgICAgZHksXG4gICAgICAgICAgICBveCxcbiAgICAgICAgICAgIG95LFxuICAgICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgICBzeCxcbiAgICAgICAgICAgIHN5XG4gICAgICAgICk7XG4gICAgfVxuXG59XG4iLCJleHBvcnQgZGVmYXVsdCBcIiN2ZXJzaW9uIDMwMCBlc1xcblxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbmluIHZlYzQgYV9wb3NpdGlvbjtcXG5pbiB2ZWMyIGFfdGV4Q29vcmQ7XFxuaW4gdmVjNCBhX2NvbG9yO1xcblxcbm91dCB2ZWMyIHZfdGV4Q29vcmQ7XFxub3V0IHZlYzQgdl9jb2xvcjtcXG5cXG52b2lkIG1haW4oKSB7XFxuICAgIHZfdGV4Q29vcmQgPSBhX3RleENvb3JkO1xcbiAgICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gICAgZ2xfUG9zaXRpb24gPSBhX3Bvc2l0aW9uO1xcbn1cXG5cIiIsImV4cG9ydCBkZWZhdWx0IFwiI3ZlcnNpb24gMzAwIGVzXFxuXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxuaW4gdmVjMiB2X3RleENvb3JkO1xcbmluIHZlYzQgdl9jb2xvcjtcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1X3RleHR1cmU7XFxuXFxub3V0IHZlYzQgb3V0Q29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICBvdXRDb2xvciA9IHRleHR1cmUodV90ZXh0dXJlLCB2X3RleENvb3JkKSAqIHZfY29sb3I7XFxufVxcblwiIiwiZXhwb3J0IGRlZmF1bHQgXCIjdmVyc2lvbiAzMDAgZXNcXG5cXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5pbiB2ZWM0IGFfcG9zaXRpb247XFxuaW4gdmVjNCBhX2NvbG9yO1xcblxcbm91dCB2ZWM0IHZfY29sb3I7XFxuXFxudm9pZCBtYWluKCkge1xcbiAgICB2X2NvbG9yID0gYV9jb2xvcjtcXG4gICAgZ2xfUG9zaXRpb24gPSBhX3Bvc2l0aW9uO1xcbn1cXG5cIiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlckxvb3Age1xuXG4gICAgcHJpdmF0ZSBydW5uaW5nOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBrZWVwTG9vcDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgbGFzdFRpbWVzdGFtcDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uVXBkYXRlOiAoZGV0U2VjczogbnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3Iob25VcGRhdGU6IChkZXRTZWNzOiBudW1iZXIpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5vblVwZGF0ZSA9IG9uVXBkYXRlO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5rZWVwTG9vcCA9IHRydWU7XG4gICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5sb29wKCkpO1xuICAgIH1cblxuICAgIHN0b3AoKSB7XG4gICAgICAgIHRoaXMua2VlcExvb3AgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvb3AoKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5vblVwZGF0ZShNYXRoLm1heCgobm93IC0gdGhpcy5sYXN0VGltZXN0YW1wKSwgMSkgLyAxMDAwKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmtlZXBMb29wID0gZmFsc2U7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IG5vdztcbiAgICAgICAgaWYgKHRoaXMua2VlcExvb3ApIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLmxvb3AoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5wdXQge1xuXG4gICAgbW91c2VPdmVyOiBib29sZWFuID0gZmFsc2U7XG4gICAgbW91c2VYOiBudW1iZXIgPSAwO1xuICAgIG1vdXNlWTogbnVtYmVyID0gMDtcbiAgICBtb3VzZUxlZnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBtb3VzZUxlZnREb3duVGhpc0ZyYW1lOiBib29sZWFuID0gZmFsc2U7XG4gICAgbW91c2VSaWdodDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIG1vdXNlUmlnaHREb3duVGhpc0ZyYW1lOiBib29sZWFuID0gZmFsc2U7XG4gICAgbW91c2VNaWRkbGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBtb3VzZU1pZGRsZURvd25UaGlzRnJhbWU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBkYmxDbGlja1RoaXNGcmFtZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHdoZWVsRGV0WDogbnVtYmVyID0gMDtcbiAgICB3aGVlbERldFk6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uQ29udGV4dG1lbnU6IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Nb3VzZU1vdmU6IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Nb3VzZURvd246IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Nb3VzZVVwOiAoZTogTW91c2VFdmVudCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uRGJsQ2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Nb3VzZUxlYXZlOiAoKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgb25Nb3VzZU91dDogKGU6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvbldoZWVsOiAoZTogV2hlZWxFdmVudCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uS2V5RG93bjogKGU6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvbktleVVwOiAoZTogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9uQmx1cjogKCkgPT4gdm9pZDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkga2V5TWFwOiBNYXA8c3RyaW5nLCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuXG4gICAgcHJpdmF0ZSB0aW1lc3RhbXA6IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5vbkNvbnRleHRtZW51ID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTW92ZSA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlT3ZlciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1vdXNlWCA9IGUub2Zmc2V0WDtcbiAgICAgICAgICAgIHRoaXMubW91c2VZID0gZS5vZmZzZXRZO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uTW91c2VEb3duID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoZS5idXR0b24pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duVGhpc0ZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZURvd25UaGlzRnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VSaWdodCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VSaWdodERvd25UaGlzRnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlVXAgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChlLmJ1dHRvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZUxlZnREb3duVGhpc0ZyYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3VzZU1pZGRsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlTWlkZGxlRG93blRoaXNGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW91c2VSaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdXNlTGVmdERvd25UaGlzRnJhbWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25EYmxDbGljayA9IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRibENsaWNrVGhpc0ZyYW1lID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbk1vdXNlTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlT3ZlciA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uTW91c2VPdXQgPSAoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUuY2xpZW50WSA8PSAwIHx8IGUuY2xpZW50WCA8PSAwIHx8IChlLmNsaWVudFggPj0gd2luZG93LmlubmVyV2lkdGggfHwgZS5jbGllbnRZID49IHdpbmRvdy5pbm5lckhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlTGVmdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0RG93blRoaXNGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMubW91c2VSaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMubW91c2VMZWZ0RG93blRoaXNGcmFtZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uV2hlZWwgPSAoZTogV2hlZWxFdmVudCkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy53aGVlbERldFggKz0gZS5kZWx0YVggLyAxMDA7XG4gICAgICAgICAgICB0aGlzLndoZWVsRGV0WSArPSBlLmRlbHRhWSAvIDEwMDtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbktleURvd24gPSAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ICYmICd0YWdOYW1lJyBpbiB0YXJnZXQgJiYgKHRhcmdldCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSA9PT0gJ0lOUFVUJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmtleU1hcC5zZXQoZS5rZXksIHRoaXMudGltZXN0YW1wKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbktleVVwID0gKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHRhcmdldCAmJiAndGFnTmFtZScgaW4gdGFyZ2V0ICYmICh0YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRhZ05hbWUgPT09ICdJTlBVVCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmtleU1hcC5kZWxldGUoZS5rZXkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm9uQmx1ciA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMua2V5TWFwLmNsZWFyKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc2V0dXAoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMub25Db250ZXh0bWVudSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLm9uRGJsQ2xpY2spO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5vbk1vdXNlT3V0KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25XaGVlbCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLm9uS2V5VXApO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25CbHVyKTtcbiAgICB9XG5cbiAgICB1bmxvYWQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIHRoaXMub25Db250ZXh0bWVudSk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCB0aGlzLm9uRGJsQ2xpY2spO1xuICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCB0aGlzLm9uTW91c2VMZWF2ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5vbk1vdXNlT3V0KTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMub25XaGVlbCk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLm9uS2V5VXApO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMub25CbHVyKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMubW91c2VMZWZ0RG93blRoaXNGcmFtZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm1vdXNlUmlnaHREb3duVGhpc0ZyYW1lID0gZmFsc2U7XG4gICAgICAgIHRoaXMubW91c2VNaWRkbGVEb3duVGhpc0ZyYW1lID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2hlZWxEZXRYID0gMDtcbiAgICAgICAgdGhpcy53aGVlbERldFkgPSAwO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcCArPSAxO1xuICAgICAgICB0aGlzLmRibENsaWNrVGhpc0ZyYW1lID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaXNLZXlQcmVzc2VkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleU1hcC5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICBpc0tleVByZXNzZWRUaGlzRnJhbWUoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5TWFwLmdldChrZXkpID09PSB0aGlzLnRpbWVzdGFtcDtcbiAgICB9XG5cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXJlZENhbnZhczJEIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZT86IFNoYXJlZENhbnZhczJEO1xuXG4gICAgc3RhdGljIGluc3RhbmNlKCk6IFNoYXJlZENhbnZhczJEIHtcbiAgICAgICAgaWYgKCFTaGFyZWRDYW52YXMyRC5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgIFNoYXJlZENhbnZhczJELl9pbnN0YW5jZSA9IG5ldyBTaGFyZWRDYW52YXMyRCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTaGFyZWRDYW52YXMyRC5faW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICByZWFkb25seSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGNhbnZhcyAyZCBjb250ZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XG4gICAgfVxuXG4gICAgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh3aWR0aCAhPT0gdGhpcy5jYW52YXMud2lkdGggfHwgaGVpZ2h0ICE9PSB0aGlzLmNhbnZhcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaXRTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh3aWR0aCA+IHRoaXMuY2FudmFzLndpZHRoIHx8IGhlaWdodCA+IHRoaXMuY2FudmFzLmhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSBNYXRoLm1heCh3aWR0aCwgdGhpcy5jYW52YXMud2lkdGgpO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0LCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCBSZW5kZXJlciBmcm9tICcuL1JlbmRlcmVyJztcbmltcG9ydCBTaGFyZWRDYW52YXMyRCBmcm9tICcuL1NoYXJlZENhbnZhczJEJztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4vVGV4dHVyZSc7XG5cbmNvbnN0IENfQSA9ICdBJy5jaGFyQ29kZUF0KDApO1xuY29uc3QgQ19aID0gJ1onLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBDX2EgPSAnYScuY2hhckNvZGVBdCgwKTtcbmNvbnN0IENfeiA9ICd6Jy5jaGFyQ29kZUF0KDApO1xuY29uc3QgQ18wID0gJzAnLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBDXzkgPSAnOScuY2hhckNvZGVBdCgwKTtcblxuZnVuY3Rpb24gYnJlYWtJbnRvV29yZHModGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgbGVuID0gdGV4dC5sZW5ndGg7XG4gICAgY29uc3Qgd29yZHM6IHN0cmluZ1tdID0gW107XG4gICAgbGV0IHdvcmRTdGFydCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKCEoXG4gICAgICAgICAgICBjaGFyQ29kZSA+PSBDX0EgJiYgY2hhckNvZGUgPD0gQ19aXG4gICAgICAgICAgICB8fCBjaGFyQ29kZSA+PSBDX2EgJiYgY2hhckNvZGUgPD0gQ196XG4gICAgICAgICAgICB8fCBjaGFyQ29kZSA+PSBDXzAgJiYgY2hhckNvZGUgPD0gQ185XG4gICAgICAgICkpIHtcbiAgICAgICAgICAgIHdvcmRzLnB1c2godGV4dC5zdWJzdHJpbmcod29yZFN0YXJ0LCBpKSk7XG4gICAgICAgICAgICB3b3JkU3RhcnQgPSBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3b3JkU3RhcnQgPD0gbGVuIC0gMSkge1xuICAgICAgICB3b3Jkcy5wdXNoKHRleHQuc3Vic3RyaW5nKHdvcmRTdGFydCwgbGVuKSk7XG4gICAgfVxuICAgIHJldHVybiB3b3Jkcztcbn1cblxuZnVuY3Rpb24gd3JhcFRleHQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHRleHQ6IHN0cmluZywgbWF4V2lkdGg6IG51bWJlcikge1xuICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXVtdID0gW107XG4gICAgY29uc3Qgd29yZHMgPSBicmVha0ludG9Xb3Jkcyh0ZXh0KTtcbiAgICBsZXQgbGluZTogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgbGluZVdpZHRoID0gMDtcbiAgICBsZXQgYWN0dWFsTWF4V2lkdGggPSAwO1xuICAgIHdvcmRzLmZvckVhY2god29yZCA9PiB7XG4gICAgICAgIGlmICh3b3JkID09PSAnXFxuJykge1xuICAgICAgICAgICAgbGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICAgIGFjdHVhbE1heFdpZHRoID0gTWF0aC5tYXgobGluZVdpZHRoLCBhY3R1YWxNYXhXaWR0aCk7XG4gICAgICAgICAgICBsaW5lID0gW107XG4gICAgICAgICAgICBsaW5lV2lkdGggPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdvcmRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh3b3JkKS53aWR0aDtcbiAgICAgICAgaWYgKGxpbmVXaWR0aCArIHdvcmRXaWR0aCA8PSBtYXhXaWR0aCkge1xuICAgICAgICAgICAgbGluZVdpZHRoICs9IHdvcmRXaWR0aDtcbiAgICAgICAgICAgIGxpbmUucHVzaCh3b3JkKTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goW3dvcmRdKTtcbiAgICAgICAgICAgIGFjdHVhbE1heFdpZHRoID0gTWF0aC5tYXgod29yZFdpZHRoLCBhY3R1YWxNYXhXaWR0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgICAgICAgYWN0dWFsTWF4V2lkdGggPSBNYXRoLm1heChsaW5lV2lkdGgsIGFjdHVhbE1heFdpZHRoKTtcbiAgICAgICAgICAgIGxpbmVXaWR0aCA9IHdvcmRXaWR0aDtcbiAgICAgICAgICAgIGxpbmUgPSBbd29yZF07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAobGluZS5sZW5ndGgpIHtcbiAgICAgICAgbGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgYWN0dWFsTWF4V2lkdGggPSBNYXRoLm1heChsaW5lV2lkdGgsIGFjdHVhbE1heFdpZHRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHtsaW5lczogbGluZXMubWFwKGxpbmUgPT4gbGluZS5qb2luKCcnKS50cmltKCkpLCBhY3R1YWxNYXhXaWR0aH07XG59XG5cbnR5cGUgRm9udFN0eWxlID0gJ25vcm1hbCcgfCAnaXRhbGljJyB8ICdvYmxpcXVlJztcbnR5cGUgRm9udFZhcmlhbnQgPSAnbm9ybWFsJyB8ICdzbWFsbC1jYXBzJztcbnR5cGUgRm9udFdlaWdodCA9ICdub3JtYWwnIHwgJ2JvbGQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJlbCB7XG5cbiAgICBwcml2YXRlIF90ZXh0Pzogc3RyaW5nO1xuICAgIHByaXZhdGUgX211bHRpbGluZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgX3RleHRCYXNlbGluZTogQ2FudmFzVGV4dEJhc2VsaW5lID0gJ2FscGhhYmV0aWMnO1xuICAgIHByaXZhdGUgX2ZvbnRTdHlsZTogRm9udFN0eWxlID0gJ25vcm1hbCc7XG4gICAgcHJpdmF0ZSBfZm9udFZhcmlhbnQ6IEZvbnRWYXJpYW50ID0gJ25vcm1hbCc7XG4gICAgcHJpdmF0ZSBfZm9udFdlaWdodDogRm9udFdlaWdodCA9ICdub3JtYWwnO1xuICAgIHByaXZhdGUgX2ZvbnRTaXplOiBudW1iZXIgPSAxMjtcbiAgICBwcml2YXRlIF9mb250RmFtaWx5OiBzdHJpbmcgPSAnc2Fucy1zZXJpZic7XG4gICAgcHJpdmF0ZSBfbGluZVNwYWNpbmc6IG51bWJlciA9IDI7XG4gICAgcHJpdmF0ZSBfbWF4V2lkdGg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfY29sb3I6IHN0cmluZyA9ICcjZmZmZmZmJztcblxuICAgIHByaXZhdGUgbmVlZHNVcGRhdGVJbWFnZURhdGE6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgbmVlZHNVcGRhdGVUZXh0dXJlOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHByaXZhdGUgX2ltYWdlRGF0YT86IEltYWdlRGF0YTtcbiAgICBwcml2YXRlIF90ZXh0dXJlPzogVGV4dHVyZTtcblxuICAgIGdldCB0ZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0IHx8ICcnO1xuICAgIH1cblxuICAgIHNldCB0ZXh0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHQgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGV4dCA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZVRleHR1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCBtdWx0aWxpbmUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tdWx0aWxpbmU7XG4gICAgfVxuXG4gICAgc2V0IG11bHRpbGluZSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fbXVsdGlsaW5lID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX211bHRpbGluZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZVRleHR1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCB0ZXh0QmFzZWxpbmUoKTogQ2FudmFzVGV4dEJhc2VsaW5lIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRCYXNlbGluZTtcbiAgICB9XG5cbiAgICBzZXQgdGV4dEJhc2VsaW5lKHZhbHVlOiBDYW52YXNUZXh0QmFzZWxpbmUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHRCYXNlbGluZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXh0QmFzZWxpbmUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZUltYWdlRGF0YSA9IHRydWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVUZXh0dXJlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgZm9udFN0eWxlKCk6IEZvbnRTdHlsZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb250U3R5bGU7XG4gICAgfVxuXG4gICAgc2V0IGZvbnRTdHlsZSh2YWx1ZTogRm9udFN0eWxlKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb250U3R5bGUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZm9udFN0eWxlID0gdmFsdWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVJbWFnZURhdGEgPSB0cnVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IGZvbnRWYXJpYW50KCk6IEZvbnRWYXJpYW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRWYXJpYW50O1xuICAgIH1cblxuICAgIHNldCBmb250VmFyaWFudCh2YWx1ZTogRm9udFZhcmlhbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRWYXJpYW50ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZvbnRWYXJpYW50ID0gdmFsdWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVJbWFnZURhdGEgPSB0cnVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IGZvbnRXZWlnaHQoKTogRm9udFdlaWdodCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb250V2VpZ2h0O1xuICAgIH1cblxuICAgIHNldCBmb250V2VpZ2h0KHZhbHVlOiBGb250V2VpZ2h0KSB7XG4gICAgICAgIGlmICh0aGlzLl9mb250V2VpZ2h0ID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZvbnRXZWlnaHQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZUltYWdlRGF0YSA9IHRydWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVUZXh0dXJlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgZm9udFNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRTaXplO1xuICAgIH1cblxuICAgIHNldCBmb250U2l6ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb250U2l6ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mb250U2l6ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZVRleHR1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCBmb250RmFtaWx5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb250RmFtaWx5O1xuICAgIH1cblxuICAgIHNldCBmb250RmFtaWx5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZvbnRGYW1pbHkgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZm9udEZhbWlseSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZVRleHR1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCBsaW5lU3BhY2luZygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGluZVNwYWNpbmc7XG4gICAgfVxuXG4gICAgc2V0IGxpbmVTcGFjaW5nKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVTcGFjaW5nID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xpbmVTcGFjaW5nID0gdmFsdWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVJbWFnZURhdGEgPSB0cnVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZ2V0IG1heFdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhXaWR0aDtcbiAgICB9XG5cbiAgICBzZXQgbWF4V2lkdGgodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5fbWF4V2lkdGggPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF4V2lkdGggPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZUltYWdlRGF0YSA9IHRydWU7XG4gICAgICAgIHRoaXMubmVlZHNVcGRhdGVUZXh0dXJlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgY29sb3IoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICAgIH1cblxuICAgIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb2xvciA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb2xvciA9IHZhbHVlO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5uZWVkc1VwZGF0ZVRleHR1cmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5uZWVkc1VwZGF0ZUltYWdlRGF0YSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVJbWFnZURhdGEoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VEYXRhPy53aWR0aCB8fCAwO1xuICAgIH1cblxuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNVcGRhdGVJbWFnZURhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW1hZ2VEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ltYWdlRGF0YT8uaGVpZ2h0IHx8IDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVJbWFnZURhdGEoKSB7XG4gICAgICAgIGNvbnN0IGMyZCA9IFNoYXJlZENhbnZhczJELmluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHQgfHwgJyc7XG4gICAgICAgIGNvbnN0IGZvbnQgPSBgJHt0aGlzLmZvbnRTdHlsZX0gJHt0aGlzLmZvbnRWYXJpYW50fSAke3RoaXMuZm9udFdlaWdodH0gJHt0aGlzLmZvbnRTaXplfXB4ICR7dGhpcy5mb250RmFtaWx5fWA7XG4gICAgICAgIGNvbnN0IGN0eCA9IGMyZC5jdHg7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSB0aGlzLnRleHRCYXNlbGluZTtcbiAgICAgICAgY3R4LmZvbnQgPSBmb250O1xuICAgICAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KHRleHQpO1xuICAgICAgICBjb25zdCBhc2NlbnQgPSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgICAgICBjb25zdCBkZXNjZW50ID0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ7XG4gICAgICAgIGxldCBsaW5lczogc3RyaW5nW107XG4gICAgICAgIGxldCBhY3R1YWxNYXhXaWR0aDogbnVtYmVyO1xuICAgICAgICBpZiAodGhpcy5tdWx0aWxpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHdyYXBUZXh0KGN0eCwgdGV4dCwgdGhpcy5tYXhXaWR0aCA+IDAgPyB0aGlzLm1heFdpZHRoIDogSW5maW5pdHkpO1xuICAgICAgICAgICAgbGluZXMgPSByZXN1bHQubGluZXM7XG4gICAgICAgICAgICBhY3R1YWxNYXhXaWR0aCA9IHJlc3VsdC5hY3R1YWxNYXhXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzID0gW3RleHRdO1xuICAgICAgICAgICAgYWN0dWFsTWF4V2lkdGggPSBtZXRyaWNzLndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKGFjdHVhbE1heFdpZHRoKTtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5jZWlsKChhc2NlbnQgKyBkZXNjZW50KSAqIGxpbmVzLmxlbmd0aCArIE1hdGgubWF4KDAsIGxpbmVzLmxlbmd0aCAtIDEpICogdGhpcy5saW5lU3BhY2luZyk7XG4gICAgICAgIGMyZC5maXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjMmQuY2xlYXIoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSB0aGlzLnRleHRCYXNlbGluZTtcbiAgICAgICAgY3R4LmZvbnQgPSBmb250O1xuICAgICAgICBsZXQgeSA9IGFzY2VudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobGluZXNbaV0sIDAsIHkpO1xuICAgICAgICAgICAgeSArPSBhc2NlbnQgKyBkZXNjZW50ICsgdGhpcy5saW5lU3BhY2luZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLm5lZWRzVXBkYXRlSW1hZ2VEYXRhID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGV4dHVyZShyZW5kZXJlcjogUmVuZGVyZXIpOiBUZXh0dXJlIHtcbiAgICAgICAgaWYgKHRoaXMubmVlZHNVcGRhdGVJbWFnZURhdGEpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSW1hZ2VEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl90ZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gcmVuZGVyZXIuY3JlYXRlRW1wdHlUZXh0dXJlKDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0VGV4dHVyZUZyb21QaXhlbHModGhpcy5fdGV4dHVyZSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMuX2ltYWdlRGF0YSEuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLm5lZWRzVXBkYXRlVGV4dHVyZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlO1xuICAgIH1cblxuICAgIGRpc3Bvc2UocmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXh0dXJlKSB7XG4gICAgICAgICAgICByZW5kZXJlci5kZWxldGVUZXh0dXJlKHRoaXMuX3RleHR1cmUpO1xuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiZXhwb3J0IGNvbnN0IEdSSURfU0laRSA9IDQyO1xuZXhwb3J0IGNvbnN0IEZPTlRfU0laRSA9IDEyO1xuXG5leHBvcnQgY29uc3QgTU9OVEhTID0gWydKQU4nLCAnRkVCJywgJ01BUicsICdBUFInLCAnTUFZJywgJ0pVTicsICdKVUwnLCAnQVVHJywgJ1NFUCcsICdPQ1QnLCAnTk9WJywgJ0RFQyddO1xuXG5leHBvcnQgY29uc3QgQk9BUkQ6IHN0cmluZ1tdW10gPSBbXG4gICAgWydKQU4nLCAnRkVCJywgJ01BUicsICdBUFInLCAnTUFZJywgJ0pVTiddLFxuICAgIFsnSlVMJywgJ0FVRycsICdTRVAnLCAnT0NUJywgJ05PVicsICdERUMnXSxcbiAgICBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnXSxcbiAgICBbJzgnLCAnOScsICcxMCcsICcxMScsICcxMicsICcxMycsICcxNCddLFxuICAgIFsnMTUnLCAnMTYnLCAnMTcnLCAnMTgnLCAnMTknLCAnMjAnLCAnMjEnXSxcbiAgICBbJzIyJywgJzIzJywgJzI0JywgJzI1JywgJzI2JywgJzI3JywgJzI4J10sXG4gICAgWycyOScsICczMCcsICczMSddXG5dO1xuXG5leHBvcnQgdHlwZSBQaWVjZURlZiA9IHtcbiAgICBjb2xvcjogW251bWJlciwgbnVtYmVyLCBudW1iZXJdLFxuICAgIG1hc2s6IG51bWJlcltdW11cbn07XG5cbmV4cG9ydCBjb25zdCBQSUVDRVM6IFBpZWNlRGVmW10gPSBbXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4ZmYgLyAweGZmLCAweDI5IC8gMHhmZiwgMHgyOSAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMSwgMV0sXG4gICAgICAgICAgICBbMSwgMCwgMF0sXG4gICAgICAgICAgICBbMSwgMCwgMF1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4ZmYgLyAweGZmLCAweDdhIC8gMHhmZiwgMHgyOSAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMCwgMV0sXG4gICAgICAgICAgICBbMSwgMSwgMV1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4ZmEgLyAweGZmLCAweGQwIC8gMHhmZiwgMHgyZSAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMCwgMCwgMV0sXG4gICAgICAgICAgICBbMSwgMSwgMV0sXG4gICAgICAgICAgICBbMSwgMCwgMF1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4YmYgLyAweGZmLCAweDdmIC8gMHhmZiwgMHgzNSAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMCwgMCwgMSwgMV0sXG4gICAgICAgICAgICBbMSwgMSwgMSwgMF1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4MzYgLyAweGZmLCAweGQ4IC8gMHhmZiwgMHhiNyAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgICBbMSwgMV0sXG4gICAgICAgICAgICBbMSwgMF0sXG4gICAgICAgICAgICBbMSwgMF1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4M2IgLyAweGZmLCAweDhhIC8gMHhmZiwgMHhmZiAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMV0sXG4gICAgICAgICAgICBbMCwgMV0sXG4gICAgICAgICAgICBbMCwgMV0sXG4gICAgICAgICAgICBbMCwgMV1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4OTkgLyAweGZmLCAweDFlIC8gMHhmZiwgMHhmOSAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMSwgMF0sXG4gICAgICAgICAgICBbMSwgMSwgMV1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBjb2xvcjogWzB4ZmYgLyAweGZmLCAweDVkIC8gMHhmZiwgMHhjZCAvIDB4ZmZdLFxuICAgICAgICBtYXNrOiBbXG4gICAgICAgICAgICBbMSwgMSwgMV0sXG4gICAgICAgICAgICBbMSwgMSwgMV1cbiAgICAgICAgXVxuICAgIH1cbl07XG5cbmV4cG9ydCBjb25zdCBST1dTID0gQk9BUkQubGVuZ3RoO1xuZXhwb3J0IGNvbnN0IENPTFMgPSBCT0FSRC5yZWR1Y2UoKG1heCwgcm93KSA9PiBNYXRoLm1heChtYXgsIHJvdy5sZW5ndGgpLCAwKTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRpb25UYXNrIHtcblxuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGVwOiAoZHQ6IG51bWJlcikgPT4gYm9vbGVhbjtcbiAgICBmaW5pc2hlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGNhbmNlbGVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgZmluaXNoZWRDYWxsYmFja3M6ICgoKSA9PiB2b2lkKVtdO1xuICAgIGNhbmNlbGVkQ2FsbGJhY2tzOiAoKCkgPT4gdm9pZClbXTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIC0gQ2FuIGJlIGR1cGxpY2F0ZWQuXG4gICAgICogQHBhcmFtIHN0ZXAgLSBBIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIGV2ZXJ5IGZyYW1lIGFuZCByZXR1cm4gdHJ1ZSB3aGVuIGFuaW1hdGlvbiBlbmRzLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgc3RlcDogKGR0OiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zdGVwID0gc3RlcDtcbiAgICAgICAgdGhpcy5maW5pc2hlZENhbGxiYWNrcyA9IFtdO1xuICAgICAgICB0aGlzLmNhbmNlbGVkQ2FsbGJhY2tzID0gW107XG4gICAgfVxuXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGVwKGR0KSkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRmluaXNoZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYW5jZWxlZENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgIH1cblxuICAgIHRyaWdnZXJGaW5pc2hlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZmluaXNoZWQgfHwgdGhpcy5jYW5jZWxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmZpbmlzaGVkQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XG4gICAgfVxuXG4gICAgb25GaW5pc2hlZChjYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmZpbmlzaGVkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBvbkNhbmNlbGVkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uRmluaXNoZWRPckNhbmNlbGVkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMuZmluaXNoZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHRoaXMuY2FuY2VsZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxufVxuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ3JlLzE2NTAyOTRcblxuLy8gbm8gZWFzaW5nLCBubyBhY2NlbGVyYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXIodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRcbn1cblxuLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuZXhwb3J0IGZ1bmN0aW9uIGVhc2VJblF1YWQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHQgKiB0XG59XG5cbi8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5leHBvcnQgZnVuY3Rpb24gZWFzZU91dFF1YWQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHQgKiAoMiAtIHQpXG59XG5cbi8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuZXhwb3J0IGZ1bmN0aW9uIGVhc2VJbk91dFF1YWQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHQgPCAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0XG59XG5cbi8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5DdWJpYyh0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0XG59XG5cbi8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG5leHBvcnQgZnVuY3Rpb24gZWFzZU91dEN1YmljKHQ6IG51bWJlcikge1xuICAgIHJldHVybiAoLS10KSAqIHQgKiB0ICsgMVxufVxuXG4vLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5PdXRDdWJpYyh0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdCA8IC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMVxufVxuXG4vLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG5leHBvcnQgZnVuY3Rpb24gZWFzZUluUXVhcnQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdCAqIHRcbn1cblxuLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbmV4cG9ydCBmdW5jdGlvbiBlYXNlT3V0UXVhcnQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIDEgLSAoLS10KSAqIHQgKiB0ICogdFxufVxuXG4vLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCh0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdCA8IC41ID8gOCAqIHQgKiB0ICogdCAqIHQgOiAxIC0gOCAqICgtLXQpICogdCAqIHQgKiB0XG59XG5cbi8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcbmV4cG9ydCBmdW5jdGlvbiBlYXNlSW5RdWludCh0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0ICogdCAqIHRcbn1cblxuLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbmV4cG9ydCBmdW5jdGlvbiBlYXNlT3V0UXVpbnQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIDEgKyAoLS10KSAqIHQgKiB0ICogdCAqIHRcbn1cblxuLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG5leHBvcnQgZnVuY3Rpb24gZWFzZUluT3V0UXVpbnQodDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHQgPCAuNSA/IDE2ICogdCAqIHQgKiB0ICogdCAqIHQgOiAxICsgMTYgKiAoLS10KSAqIHQgKiB0ICogdCAqIHRcbn1cbiIsImltcG9ydCB7bGluZWFyfSBmcm9tICcuL2Vhc2luZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zaXRpb25WYWx1ZSB7XG5cbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIGZyb206IG51bWJlcjtcbiAgICB0bzogbnVtYmVyO1xuICAgIGVhc2luZ0Z1bmN0aW9uOiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGVsYXBzZWQ6IG51bWJlciA9IDA7XG4gICAgZmluaXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBkdXJhdGlvbjogbnVtYmVyLFxuICAgICAgICBmcm9tOiBudW1iZXIsXG4gICAgICAgIHRvOiBudW1iZXIsXG4gICAgICAgIGVhc2luZ0Z1bmN0aW9uOiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gbnVtYmVyID0gbGluZWFyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLmVhc2luZ0Z1bmN0aW9uID0gZWFzaW5nRnVuY3Rpb247XG4gICAgfVxuXG4gICAgc3RlcChkdDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuZHVyYXRpb24gPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxhcHNlZCArPSBkdDtcbiAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbih0aGlzLmVsYXBzZWQgLyB0aGlzLmR1cmF0aW9uLCAxKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHByb2dyZXNzID09PSAxO1xuICAgICAgICByZXR1cm4gdGhpcy5lYXNpbmdGdW5jdGlvbihwcm9ncmVzcykgKiAodGhpcy50byAtIHRoaXMuZnJvbSkgKyB0aGlzLmZyb207XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgQW5pbWF0aW9uVGFzayBmcm9tICcuL0FuaW1hdGlvblRhc2snO1xuaW1wb3J0IFRyYW5zaXRpb25WYWx1ZSBmcm9tICcuL1RyYW5zaXRpb25WYWx1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdGlvblRhc2tEaXNwYXRjaGVyIHtcblxuICAgIHByaXZhdGUgYW5pbWF0aW9uczogQW5pbWF0aW9uVGFza1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChhbmltYXRpb24gPT4gYW5pbWF0aW9uLnVwZGF0ZShkdCkpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnMuZmlsdGVyKGFuaW1hdGlvbiA9PiAhKGFuaW1hdGlvbi5maW5pc2hlZCB8fCBhbmltYXRpb24uY2FuY2VsZWQpKTtcbiAgICB9XG5cbiAgICBpc1BsYXlpbmcobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbnMuZmluZEluZGV4KGFuaW1hdGlvbiA9PiBhbmltYXRpb24ubmFtZSA9PT0gbmFtZSAmJiAhKGFuaW1hdGlvbi5maW5pc2hlZCB8fCBhbmltYXRpb24uY2FuY2VsZWQpKSA+PSAwO1xuICAgIH1cblxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBjYW5jZWwobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9ucy5mb3JFYWNoKGFuaW1hdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGUobmFtZTogc3RyaW5nLCBzdGVwOiAoZHQ6IG51bWJlcikgPT4gYm9vbGVhbikge1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uVGFzayhuYW1lLCBzdGVwKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYW5pbWF0aW9uIHRoYXQgZW5kcyB3aGVuIGFsbCBjaGlsZHJlbiBhbmltYXRpb25zIGVuZHMuXG4gICAgICovXG4gICAgc3luYyhuYW1lOiBzdHJpbmcsIC4uLmFuaW1hdGlvbnM6IEFuaW1hdGlvblRhc2tbXSkge1xuICAgICAgICBjb25zdCBjb21iaW5lZCA9IG5ldyBBbmltYXRpb25UYXNrKG5hbWUsICgpID0+IGZhbHNlKTtcbiAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2goY29tYmluZWQpO1xuXG4gICAgICAgIGxldCB1bmZpbmlzaGVkID0gYW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgICAgIGFuaW1hdGlvbnMuZm9yRWFjaChhbmltYXRpb24gPT4ge1xuICAgICAgICAgICAgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgLm9uRmluaXNoZWRPckNhbmNlbGVkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdW5maW5pc2hlZCAtPSAxO1xuICAgICAgICAgICAgICAgICAgICBpZiAodW5maW5pc2hlZCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZWQudHJpZ2dlckZpbmlzaGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbWJpbmVkLm9uQ2FuY2VsZWQoKCkgPT4ge1xuICAgICAgICAgICAgYW5pbWF0aW9ucy5mb3JFYWNoKGFuaW1hdGlvbiA9PiBhbmltYXRpb24uY2FuY2VsKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBhbmltYXRpb24gdGhhdCBlbmRzIGFmdGVyIGEgc3BlY2lmaWVkIHRpbWUuXG4gICAgICovXG4gICAgZGVsYXkobmFtZTogc3RyaW5nLCB0aW1lOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IG5ldyBUcmFuc2l0aW9uVmFsdWUodGltZSwgMCwgMSk7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShuYW1lLCAoZHQpID0+IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb24uc3RlcChkdCk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbi5maW5pc2hlZDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggPCAxO1xuICAgIH1cblxufVxuIiwiaW1wb3J0IEFuaW1hdGlvblRhc2tEaXNwYXRjaGVyIGZyb20gJy4uL2NvbW1vbi9hbmltYXRpb24vQW5pbWF0aW9uVGFza0Rpc3BhdGNoZXInO1xuaW1wb3J0IHtlYXNlSW5PdXRDdWJpYywgZWFzZU91dEN1YmljfSBmcm9tICcuLi9jb21tb24vYW5pbWF0aW9uL2Vhc2luZyc7XG5pbXBvcnQgVHJhbnNpdGlvblZhbHVlIGZyb20gJy4uL2NvbW1vbi9hbmltYXRpb24vVHJhbnNpdGlvblZhbHVlJztcbmltcG9ydCBSZW5kZXJlciBmcm9tICcuLi9jb21tb24vcmVuZGVyL1JlbmRlcmVyJztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4uL2NvbW1vbi9yZW5kZXIvVGV4dHVyZSc7XG5pbXBvcnQge0dSSURfU0laRSwgUGllY2VEZWZ9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGNsYXNzIFBpZWNlIHtcblxuICAgIHggPSAwO1xuICAgIHkgPSAwO1xuICAgIGJvdHRvbUxlZnRYID0gMDtcbiAgICBib3R0b21MZWZ0WSA9IDA7XG4gICAgcm90YXRlT3JpZ2luWCA9IDA7XG4gICAgcm90YXRlT3JpZ2luWSA9IDA7XG4gICAgcm90YXRpb24gPSAwO1xuICAgIG1hc2s6IG51bWJlcltdW107XG4gICAgZ3JpZFdpZHRoOiBudW1iZXI7XG4gICAgZ3JpZEhlaWdodDogbnVtYmVyO1xuICAgIHRleFdpZHRoOiBudW1iZXI7XG4gICAgdGV4SGVpZ2h0OiBudW1iZXI7XG4gICAgdGV4dHVyZT86IFRleHR1cmU7XG4gICAgY29sb3I6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBob3ZlciA9IGZhbHNlO1xuICAgIHJvdGF0aW9uOTAgPSAwO1xuICAgIGZsaXBYID0gZmFsc2U7XG4gICAgc2NhbGVYID0gMTtcbiAgICBhbmltYXRpb24gPSBuZXcgQW5pbWF0aW9uVGFza0Rpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0cnVjdG9yKGRlZjogUGllY2VEZWYpIHtcbiAgICAgICAgdGhpcy5tYXNrID0gZGVmLm1hc2subWFwKHJvdyA9PiByb3cuc2xpY2UoKSk7XG4gICAgICAgIHRoaXMuZ3JpZFdpZHRoID0gZGVmLm1hc2tbMF0ubGVuZ3RoO1xuICAgICAgICB0aGlzLmdyaWRIZWlnaHQgPSBkZWYubWFzay5sZW5ndGg7XG4gICAgICAgIHRoaXMudGV4V2lkdGggPSB0aGlzLmdyaWRXaWR0aCAqIEdSSURfU0laRTtcbiAgICAgICAgdGhpcy50ZXhIZWlnaHQgPSB0aGlzLmdyaWRIZWlnaHQgKiBHUklEX1NJWkU7XG4gICAgICAgIHRoaXMuY29sb3IgPSBkZWYuY29sb3I7XG4gICAgfVxuXG4gICAgaW5pdChyZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLmdyaWRXaWR0aDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5ncmlkSGVpZ2h0O1xuICAgICAgICBjb25zdCB0ZXhXaWR0aCA9IHdpZHRoICogR1JJRF9TSVpFO1xuICAgICAgICBjb25zdCB0ZXhIZWlnaHQgPSBoZWlnaHQgKiBHUklEX1NJWkU7XG4gICAgICAgIGNvbnN0IG1hc2sgPSB0aGlzLm1hc2s7XG5cbiAgICAgICAgY29uc3QgcGl4ZWxzID0gbmV3IFVpbnQ4QXJyYXkodGV4V2lkdGggKiB0ZXhIZWlnaHQgKiA0KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRleFdpZHRoICogdGV4SGVpZ2h0OyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKGkgLyB0ZXhXaWR0aCk7XG4gICAgICAgICAgICBjb25zdCB4ID0gaSAtIHkgKiB0ZXhXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHlpID0gTWF0aC5mbG9vcih5IC8gR1JJRF9TSVpFKTtcbiAgICAgICAgICAgIGNvbnN0IHhpID0gTWF0aC5mbG9vcih4IC8gR1JJRF9TSVpFKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IG1hc2tbeWldW3hpXSAqIDB4ZmY7XG4gICAgICAgICAgICBwaXhlbHNbaSAqIDRdID0gdmFsO1xuICAgICAgICAgICAgcGl4ZWxzW2kgKiA0ICsgMV0gPSB2YWw7XG4gICAgICAgICAgICBwaXhlbHNbaSAqIDQgKyAyXSA9IHZhbDtcbiAgICAgICAgICAgIHBpeGVsc1tpICogNCArIDNdID0gdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50ZXh0dXJlID0gcmVuZGVyZXIuY3JlYXRlVGV4dHVyZUZyb21SZ2JhUGl4ZWxzKFxuICAgICAgICAgICAgdGV4V2lkdGgsXG4gICAgICAgICAgICB0ZXhIZWlnaHQsXG4gICAgICAgICAgICBwaXhlbHNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbi51cGRhdGUoZHQpO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICAgIGxldCBib3R0b21MZWZ0WCA9IHRoaXMueDtcbiAgICAgICAgbGV0IGJvdHRvbUxlZnRZID0gdGhpcy55O1xuICAgICAgICBzd2l0Y2ggKHRoaXMucm90YXRpb245MCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGJvdHRvbUxlZnRZICs9IHRoaXMudGV4SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGJvdHRvbUxlZnRYICs9IHRoaXMudGV4V2lkdGg7XG4gICAgICAgICAgICAgICAgYm90dG9tTGVmdFkgKz0gdGhpcy50ZXhIZWlnaHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgYm90dG9tTGVmdFggKz0gdGhpcy50ZXhXaWR0aDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBib3R0b21MZWZ0WCAtPSB0aGlzLnJvdGF0ZU9yaWdpblggKyB0aGlzLng7XG4gICAgICAgIGJvdHRvbUxlZnRZIC09IHRoaXMucm90YXRlT3JpZ2luWSArIHRoaXMueTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSB0aGlzLnJvdGF0aW9uOTAgKiA5MCAvIDE4MCAqIE1hdGguUEk7XG4gICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBbYm90dG9tTGVmdFgsIGJvdHRvbUxlZnRZXSA9IFtcbiAgICAgICAgICAgIGNvcyAqIGJvdHRvbUxlZnRYIC0gc2luICogYm90dG9tTGVmdFksXG4gICAgICAgICAgICBzaW4gKiBib3R0b21MZWZ0WCArIGNvcyAqIGJvdHRvbUxlZnRZXG4gICAgICAgIF07XG4gICAgICAgIGJvdHRvbUxlZnRYICs9IHRoaXMucm90YXRlT3JpZ2luWCArIHRoaXMueDtcbiAgICAgICAgYm90dG9tTGVmdFkgKz0gdGhpcy5yb3RhdGVPcmlnaW5ZICsgdGhpcy55O1xuICAgICAgICB0aGlzLmJvdHRvbUxlZnRYID0gYm90dG9tTGVmdFg7XG4gICAgICAgIHRoaXMuYm90dG9tTGVmdFkgPSBib3R0b21MZWZ0WTtcbiAgICB9XG5cbiAgICBpc01vdXNlT3Zlcihtb3VzZVg6IG51bWJlciwgbW91c2VZOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYm90dG9tTGVmdFggPSB0aGlzLmJvdHRvbUxlZnRYO1xuICAgICAgICBjb25zdCBib3R0b21MZWZ0WSA9IHRoaXMuYm90dG9tTGVmdFk7XG4gICAgICAgIGlmIChtb3VzZVggPCBib3R0b21MZWZ0WCB8fCBtb3VzZVggPiBib3R0b21MZWZ0WCArIHRoaXMuZ3JpZFdpZHRoICogR1JJRF9TSVpFXG4gICAgICAgICAgICB8fCBtb3VzZVkgPCBib3R0b21MZWZ0WSB8fCBtb3VzZVkgPiBib3R0b21MZWZ0WSArIHRoaXMuZ3JpZEhlaWdodCAqIEdSSURfU0laRVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXNrID0gdGhpcy5tYXNrO1xuICAgICAgICBmb3IgKGxldCB5aSA9IDAsIHJvd3MgPSBtYXNrLmxlbmd0aDsgeWkgPCByb3dzOyArK3lpKSB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBtYXNrW3lpXTtcbiAgICAgICAgICAgIGZvciAobGV0IHhpID0gMCwgY29scyA9IHJvdy5sZW5ndGg7IHhpIDwgY29sczsgKyt4aSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHJvd1t4aV07XG4gICAgICAgICAgICAgICAgaWYgKCF2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGdyaWRCb3R0b21MZWZ0WCA9IGJvdHRvbUxlZnRYICsgeGkgKiBHUklEX1NJWkU7XG4gICAgICAgICAgICAgICAgY29uc3QgZ3JpZEJvdHRvbUxlZnRZID0gYm90dG9tTGVmdFkgKyAocm93cyAtIDEgLSB5aSkgKiBHUklEX1NJWkU7XG4gICAgICAgICAgICAgICAgaWYgKG1vdXNlWCA+PSBncmlkQm90dG9tTGVmdFhcbiAgICAgICAgICAgICAgICAgICAgJiYgbW91c2VYIDw9IGdyaWRCb3R0b21MZWZ0WCArIEdSSURfU0laRVxuICAgICAgICAgICAgICAgICAgICAmJiBtb3VzZVkgPj0gZ3JpZEJvdHRvbUxlZnRZXG4gICAgICAgICAgICAgICAgICAgICYmIG1vdXNlWSA8PSBncmlkQm90dG9tTGVmdFkgKyBHUklEX1NJWkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByb3RhdGU5MChtb3VzZVg6IG51bWJlciwgbW91c2VZOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZ3JpZFdpZHRoID0gdGhpcy5ncmlkV2lkdGg7XG4gICAgICAgIGNvbnN0IGdyaWRIZWlnaHQgPSB0aGlzLmdyaWRIZWlnaHQ7XG4gICAgICAgIGNvbnN0IG1hc2sgPSB0aGlzLm1hc2s7XG4gICAgICAgIGNvbnN0IG5ld01hc2s6IG51bWJlcltdW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgeWkxID0gMCwgcm93cyA9IG1hc2subGVuZ3RoOyB5aTEgPCByb3dzOyArK3lpMSkge1xuICAgICAgICAgICAgY29uc3Qgcm93ID0gbWFza1t5aTFdO1xuICAgICAgICAgICAgZm9yIChsZXQgeGkxID0gMCwgY29scyA9IHJvdy5sZW5ndGg7IHhpMSA8IGNvbHM7ICsreGkxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gcm93W3hpMV07XG4gICAgICAgICAgICAgICAgY29uc3QgeGkyID0geWkxO1xuICAgICAgICAgICAgICAgIGNvbnN0IHlpMiA9IGdyaWRXaWR0aCAtIDEgLSB4aTE7XG4gICAgICAgICAgICAgICAgbmV3TWFza1t5aTJdID0gbmV3TWFza1t5aTJdIHx8IFtdO1xuICAgICAgICAgICAgICAgIG5ld01hc2tbeWkyXVt4aTJdID0gdmFsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubWFzayA9IG5ld01hc2s7XG4gICAgICAgIFt0aGlzLmdyaWRXaWR0aCwgdGhpcy5ncmlkSGVpZ2h0XSA9IFtncmlkSGVpZ2h0LCBncmlkV2lkdGhdO1xuXG4gICAgICAgIGxldCB4MCA9IC10aGlzLnJvdGF0ZU9yaWdpblg7XG4gICAgICAgIGxldCB5MCA9IC10aGlzLnJvdGF0ZU9yaWdpblk7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5yb3RhdGlvbjkwICogOTAgLyAxODAgKiBNYXRoLlBJO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgW3gwLCB5MF0gPSBbXG4gICAgICAgICAgICB4MCAqIGNvcyAtIHkwICogc2luLFxuICAgICAgICAgICAgeDAgKiBzaW4gKyB5MCAqIGNvc1xuICAgICAgICBdO1xuICAgICAgICB4MCArPSB0aGlzLnJvdGF0ZU9yaWdpblg7XG4gICAgICAgIHkwICs9IHRoaXMucm90YXRlT3JpZ2luWTtcbiAgICAgICAgeDAgKz0gdGhpcy54O1xuICAgICAgICB5MCArPSB0aGlzLnk7XG5cbiAgICAgICAgeDAgLT0gbW91c2VYO1xuICAgICAgICB5MCAtPSBtb3VzZVk7XG4gICAgICAgIFt4MCwgeTBdID0gW1xuICAgICAgICAgICAgeDAgKiBjb3MgLSB5MCAqICgtc2luKSxcbiAgICAgICAgICAgIHgwICogKC1zaW4pICsgeTAgKiBjb3NcbiAgICAgICAgXTtcbiAgICAgICAgeDAgKz0gbW91c2VYO1xuICAgICAgICB5MCArPSBtb3VzZVk7XG4gICAgICAgIHRoaXMueCA9IHgwO1xuICAgICAgICB0aGlzLnkgPSB5MDtcblxuICAgICAgICB0aGlzLnJvdGF0aW9uOTAgPSAodGhpcy5yb3RhdGlvbjkwICsgMSkgJSA0O1xuICAgICAgICBsZXQgY3ggPSBtb3VzZVggLSB0aGlzLng7XG4gICAgICAgIGxldCBjeSA9IG1vdXNlWSAtIHRoaXMueTtcbiAgICAgICAgdGhpcy5yb3RhdGVPcmlnaW5YID0gY3g7XG4gICAgICAgIHRoaXMucm90YXRlT3JpZ2luWSA9IGN5O1xuXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSBuZXcgVHJhbnNpdGlvblZhbHVlKFxuICAgICAgICAgICAgLjMsXG4gICAgICAgICAgICAodGhpcy5yb3RhdGlvbjkwIC0gMSkgKiA5MCAvIDE4MCAqIE1hdGguUEksXG4gICAgICAgICAgICB0aGlzLnJvdGF0aW9uOTAgKiA5MCAvIDE4MCAqIE1hdGguUEksXG4gICAgICAgICAgICBlYXNlT3V0Q3ViaWNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uXG4gICAgICAgICAgICAuY2FuY2VsKCdyb3RhdGlvbicpXG4gICAgICAgICAgICAuY3JlYXRlKCdyb3RhdGlvbicsIGR0ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0aW9uID0gdHJhbnNpdGlvbi5zdGVwKGR0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbi5maW5pc2hlZDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldEJvdHRvbUxlZnRQb3NpdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCB4MCA9IHRoaXMueDtcbiAgICAgICAgY29uc3QgeTAgPSB0aGlzLnk7XG4gICAgICAgIHggLT0gdGhpcy5yb3RhdGVPcmlnaW5YICsgdGhpcy54O1xuICAgICAgICB5IC09IHRoaXMucm90YXRlT3JpZ2luWSArIHRoaXMueTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSAtdGhpcy5yb3RhdGlvbjkwICogOTAgLyAxODAgKiBNYXRoLlBJO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgW3gsIHldID0gW1xuICAgICAgICAgICAgeCAqIGNvcyAtIHkgKiBzaW4sXG4gICAgICAgICAgICB4ICogc2luICsgeSAqIGNvc1xuICAgICAgICBdO1xuICAgICAgICB4ICs9IHRoaXMucm90YXRlT3JpZ2luWCArIHRoaXMueDtcbiAgICAgICAgeSArPSB0aGlzLnJvdGF0ZU9yaWdpblkgKyB0aGlzLnk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5yb3RhdGlvbjkwKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgeSAtPSB0aGlzLnRleEhlaWdodDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB4IC09IHRoaXMudGV4V2lkdGg7XG4gICAgICAgICAgICAgICAgeSAtPSB0aGlzLnRleEhlaWdodDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICB4IC09IHRoaXMudGV4V2lkdGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgY29uc3QgZGV0WCA9IHggLSB4MDtcbiAgICAgICAgY29uc3QgZGV0WSA9IHkgLSB5MDtcbiAgICAgICAgdGhpcy5yb3RhdGVPcmlnaW5YIC09IGRldFg7XG4gICAgICAgIHRoaXMucm90YXRlT3JpZ2luWSAtPSBkZXRZO1xuICAgIH1cblxuICAgIGZsaXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJvdGF0aW9uOTAgJSAyKSB7XG4gICAgICAgICAgICB0aGlzLm1hc2sucmV2ZXJzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tYXNrLmZvckVhY2gocm93ID0+IHJvdy5yZXZlcnNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZsaXBYID0gdGhpcy5mbGlwWDtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbiA9IG5ldyBUcmFuc2l0aW9uVmFsdWUoXG4gICAgICAgICAgICAuMyxcbiAgICAgICAgICAgIC0xLFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIGVhc2VJbk91dEN1YmljXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvblxuICAgICAgICAgICAgLmNhbmNlbCgnc2NhbGVYJylcbiAgICAgICAgICAgIC5jcmVhdGUoJ3NjYWxlWCcsIGR0ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdHJhbnNpdGlvbi5zdGVwKGR0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlWCA9IE1hdGguYWJzKHQpO1xuICAgICAgICAgICAgICAgIGlmICh0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZsaXBYID0gIWZsaXBYO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNpdGlvbi5maW5pc2hlZDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxufSIsImltcG9ydCBMYWJlbCBmcm9tICcuLi9jb21tb24vcmVuZGVyL0xhYmVsJztcbmltcG9ydCBSZW5kZXJlciBmcm9tICcuLi9jb21tb24vcmVuZGVyL1JlbmRlcmVyJztcbmltcG9ydCB7Qk9BUkQsIENPTFMsIEZPTlRfU0laRSwgR1JJRF9TSVpFLCBNT05USFMsIFBJRUNFUywgUk9XU30gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IElucHV0IGZyb20gJy4vSW5wdXQnO1xuaW1wb3J0IHtQaWVjZX0gZnJvbSAnLi9QaWVjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1enpsZSB7XG5cbiAgICB0aXBzOiBMYWJlbDtcbiAgICBncmlkczogTGFiZWxbXVtdID0gQk9BUkQubWFwKHJvdyA9PiByb3cubWFwKHRleHQgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbCA9IG5ldyBMYWJlbCgpO1xuICAgICAgICBsYWJlbC50ZXh0ID0gdGV4dDtcbiAgICAgICAgbGFiZWwuY29sb3IgPSAnYmxhY2snO1xuICAgICAgICBsYWJlbC5mb250U2l6ZSA9IEZPTlRfU0laRTtcbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH0pKTtcbiAgICBwaWVjZXM6IFBpZWNlW10gPSBQSUVDRVMubWFwKGRlZiA9PiBuZXcgUGllY2UoZGVmKSk7XG5cbiAgICBkcmFnZ2luZ1BpZWNlSW5kZXggPSAtMTtcbiAgICBkcmFnU3RhcnRNb3VzZVggPSAwO1xuICAgIGRyYWdTdGFydE1vdXNlWSA9IDA7XG4gICAgZHJhZ1N0YXJ0RHggPSAwO1xuICAgIGRyYWdTdGFydER5ID0gMDtcblxuICAgIHRvZGF5TW9udGg6IHN0cmluZztcbiAgICB0b2RheURheTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSB0aXBzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBjb25zdCB0aXBzID0gdGhpcy50aXBzID0gbmV3IExhYmVsKCk7XG4gICAgICAgIHRpcHMubXVsdGlsaW5lID0gdHJ1ZTtcbiAgICAgICAgdGlwcy50ZXh0ID0gJ1JpZ2h0IENsaWNrOiBSb3RhdGVcXG5cXHREb3VibGUgQ2xpY2s6IEZsaXAnO1xuICAgICAgICB0aXBzLmNvbG9yID0gJ3JnYmEoMCwwLDAsLjUpJztcbiAgICAgICAgdGlwcy5mb250U2l6ZSA9IDEyO1xuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSB0b2RheSA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBtb250aCA9IHRoaXMudG9kYXlNb250aCA9IE1PTlRIU1t0b2RheS5nZXRNb250aCgpXTtcbiAgICAgICAgY29uc3QgZGF5ID0gdGhpcy50b2RheURheSA9IHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLmdyaWRzLmZvckVhY2gocm93ID0+IHJvdy5mb3JFYWNoKGxhYmVsID0+IHtcbiAgICAgICAgICAgIGlmIChsYWJlbC50ZXh0ID09PSBtb250aCB8fCBsYWJlbC50ZXh0ID09PSBkYXkpIHtcbiAgICAgICAgICAgICAgICBsYWJlbC5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuICAgICAgICAgICAgICAgIGxhYmVsLmNvbG9yID0gJ2JsYWNrJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWwuY29sb3IgPSAncmdiYSgwLDAsMCwuNSknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IGFycmFuZ2UgcGllY2VzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBjb25zdCB3aWR0aCA9IFJPV1MgKiBHUklEX1NJWkU7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IENPTFMgKiBHUklEX1NJWkU7XG4gICAgICAgIGxldCBobCA9IDA7XG4gICAgICAgIGxldCBociA9IDA7XG4gICAgICAgIGNvbnN0IG1hcmdpblkgPSAuNTtcbiAgICAgICAgdGhpcy5waWVjZXMuZm9yRWFjaCgocGllY2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPCBQSUVDRVMubGVuZ3RoIC8gMikge1xuICAgICAgICAgICAgICAgIHBpZWNlLnggPSAtR1JJRF9TSVpFIC0gcGllY2UuZ3JpZFdpZHRoICogR1JJRF9TSVpFO1xuICAgICAgICAgICAgICAgIGhsICs9IHBpZWNlLmdyaWRIZWlnaHQgKyBtYXJnaW5ZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaWVjZS54ID0gd2lkdGggKyBHUklEX1NJWkU7XG4gICAgICAgICAgICAgICAgaHIgKz0gcGllY2UuZ3JpZEhlaWdodCArIG1hcmdpblk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBobCAtPSBtYXJnaW5ZO1xuICAgICAgICBociAtPSBtYXJnaW5ZO1xuICAgICAgICBjb25zdCBkeWwgPSAoaGVpZ2h0IC0gaGwgKiBHUklEX1NJWkUpIC8gMjtcbiAgICAgICAgY29uc3QgZHlyID0gKGhlaWdodCAtIGhyICogR1JJRF9TSVpFKSAvIDI7XG4gICAgICAgIGxldCB5bCA9IDA7XG4gICAgICAgIGxldCB5cmkgPSAwO1xuICAgICAgICB0aGlzLnBpZWNlcy5mb3JFYWNoKChwaWVjZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA8IFBJRUNFUy5sZW5ndGggLyAyKSB7XG4gICAgICAgICAgICAgICAgcGllY2UueSA9IHlsICogR1JJRF9TSVpFICsgZHlsO1xuICAgICAgICAgICAgICAgIHlsICs9IHBpZWNlLmdyaWRIZWlnaHQgKyBtYXJnaW5ZO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwaWVjZS55ID0geXJpICogR1JJRF9TSVpFICsgZHlyO1xuICAgICAgICAgICAgICAgIHlyaSArPSBwaWVjZS5ncmlkSGVpZ2h0ICsgbWFyZ2luWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdChyZW5kZXJlcjogUmVuZGVyZXIpIHtcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IGNyZWF0ZSB0ZXh0dXJlID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICB0aGlzLnBpZWNlcy5mb3JFYWNoKHBpZWNlID0+IHBpZWNlLmluaXQocmVuZGVyZXIpKTtcbiAgICB9XG5cbiAgICB1cGRhdGUocmVuZGVyZXI6IFJlbmRlcmVyLCBpbnB1dDogSW5wdXQsIGR0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYm9hcmRXaWR0aCA9IFJPV1MgKiBHUklEX1NJWkU7XG4gICAgICAgIGNvbnN0IGJvYXJkSGVpZ2h0ID0gQ09MUyAqIEdSSURfU0laRTtcbiAgICAgICAgY29uc3QgYm9hcmRYID0gKHJlbmRlcmVyLnN0YXRlLndpZHRoIC0gYm9hcmRXaWR0aCkgLyAyO1xuICAgICAgICBjb25zdCBib2FyZFkgPSAocmVuZGVyZXIuc3RhdGUuaGVpZ2h0IC0gYm9hcmRIZWlnaHQpIC8gMjtcbiAgICAgICAgY29uc3QgYm9hcmRSZWxhdGVkTW91c2VYID0gaW5wdXQubW91c2VYIC0gYm9hcmRYO1xuICAgICAgICBjb25zdCBib2FyZFJlbGF0ZWRNb3VzZVkgPSByZW5kZXJlci5zdGF0ZS5oZWlnaHQgLSBpbnB1dC5tb3VzZVkgLSBib2FyZFk7XG4gICAgICAgIGNvbnN0IHBpZWNlcyA9IHRoaXMucGllY2VzO1xuXG4gICAgICAgIGxldCBob3ZlclBpZWNlSW5kZXggPSAtMTtcblxuICAgICAgICBpZiAodGhpcy5kcmFnZ2luZ1BpZWNlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgZHJhZ2dpbmdQaWVjZSA9IHBpZWNlc1t0aGlzLmRyYWdnaW5nUGllY2VJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChpbnB1dC5tb3VzZUxlZnQpIHtcbiAgICAgICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gZHJhZ2dpbmcgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICAgICAgaG92ZXJQaWVjZUluZGV4ID0gdGhpcy5kcmFnZ2luZ1BpZWNlSW5kZXg7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmdQaWVjZS54ID0gdGhpcy5kcmFnU3RhcnREeCArIGJvYXJkUmVsYXRlZE1vdXNlWCAtIHRoaXMuZHJhZ1N0YXJ0TW91c2VYO1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nUGllY2UueSA9IHRoaXMuZHJhZ1N0YXJ0RHkgKyBib2FyZFJlbGF0ZWRNb3VzZVkgLSB0aGlzLmRyYWdTdGFydE1vdXNlWTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IGRyYWcgZW5kID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ2dpbmdQaWVjZUluZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgdGhpcy5zbmFwVG9HcmlkKGRyYWdnaW5nUGllY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gZmxpcCA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgICAgIGlmIChpbnB1dC5kYmxDbGlja1RoaXNGcmFtZSkge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nUGllY2UuZmxpcCgpLm9uRmluaXNoZWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNuYXBUb0dyaWQoZHJhZ2dpbmdQaWVjZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gaG92ZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGllY2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGhvdmVyUGllY2VJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLmhvdmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGllY2UuaG92ZXIgPSBwaWVjZS5pc01vdXNlT3Zlcihib2FyZFJlbGF0ZWRNb3VzZVgsIGJvYXJkUmVsYXRlZE1vdXNlWSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZS5ob3Zlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJQaWVjZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IGRyYWcgc3RhcnQgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICBpZiAoaG92ZXJQaWVjZUluZGV4ID49IDAgJiYgaW5wdXQubW91c2VMZWZ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnZ2luZ1BpZWNlSW5kZXggPSBob3ZlclBpZWNlSW5kZXg7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRNb3VzZVggPSBib2FyZFJlbGF0ZWRNb3VzZVg7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRNb3VzZVkgPSBib2FyZFJlbGF0ZWRNb3VzZVk7XG4gICAgICAgICAgICAgICAgY29uc3QgZHJhZ2dpbmdQaWVjZSA9IHBpZWNlc1tob3ZlclBpZWNlSW5kZXhdO1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXJ0RHggPSBkcmFnZ2luZ1BpZWNlLng7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnREeSA9IGRyYWdnaW5nUGllY2UueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSByb3RhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIGlmIChob3ZlclBpZWNlSW5kZXggPj0gMCAmJiBpbnB1dC5tb3VzZVJpZ2h0RG93blRoaXNGcmFtZSkge1xuICAgICAgICAgICAgY29uc3QgcGllY2UgPSBwaWVjZXNbaG92ZXJQaWVjZUluZGV4XTtcbiAgICAgICAgICAgIHBpZWNlLnJvdGF0ZTkwKGJvYXJkUmVsYXRlZE1vdXNlWCwgYm9hcmRSZWxhdGVkTW91c2VZKVxuICAgICAgICAgICAgICAgIC5vbkZpbmlzaGVkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zbmFwVG9HcmlkKHBpZWNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSB1cGRhdGUgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwaWVjZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IHBpZWNlID0gcGllY2VzW2ldO1xuICAgICAgICAgICAgcGllY2UudXBkYXRlKGR0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSByZW5kZXIgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIHJlbmRlcmVyLmNlbnRlckNhbWVyYSgpO1xuICAgICAgICByZW5kZXJlci5jbGVhckNvbG9yKDEsIDEsIDEsIDEpO1xuICAgICAgICByZW5kZXJlci5jbGVhcih0cnVlLCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgIHJlbmRlcmVyLmJlZ2luMkQoKTtcblxuICAgICAgICByZW5kZXJlci5ibGVuZE1vZGUocmVuZGVyZXIuQkxFTkRfTU9ERV9QSUdNRU5UKTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gdGlwcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgcmVuZGVyZXIuc2V0Q29sb3IoMSwgMSwgMSwgMSk7XG4gICAgICAgIHJlbmRlcmVyLmRyYXdMYWJlbChcbiAgICAgICAgICAgIHRoaXMudGlwcyxcbiAgICAgICAgICAgIGJvYXJkWCxcbiAgICAgICAgICAgIGJvYXJkWSArIGJvYXJkSGVpZ2h0ICsgNFxuICAgICAgICApO1xuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBib2FyZCBncmlkcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgcmVuZGVyZXIuc2V0Q29sb3IoMHhmMiAvIDB4ZmYsIDB4ZjIgLyAweGZmLCAweGYyIC8gMHhmZiwgMSk7XG4gICAgICAgIGNvbnN0IGdyaWRzID0gdGhpcy5ncmlkcztcbiAgICAgICAgZm9yIChsZXQgeWkgPSAwOyB5aSA8IFJPV1M7ICsreWkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGdyaWRzW3lpXTtcbiAgICAgICAgICAgIGZvciAobGV0IHhpID0gMCwgY29scyA9IHJvdy5sZW5ndGg7IHhpIDwgY29sczsgKyt4aSkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLmRyYXdSZWN0KFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5CTEFOS19XSElURSxcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRYICsgeGkgKiBHUklEX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkWSArIGJvYXJkSGVpZ2h0IC0gKHlpICsgMSkgKiBHUklEX1NJWkUsXG4gICAgICAgICAgICAgICAgICAgIEdSSURfU0laRSxcbiAgICAgICAgICAgICAgICAgICAgR1JJRF9TSVpFXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PSBib2FyZCB0ZXh0ID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICByZW5kZXJlci5zZXRDb2xvcigxLCAxLCAxLCAxKTtcbiAgICAgICAgZm9yIChsZXQgeWkgPSAwOyB5aSA8IFJPV1M7ICsreWkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGdyaWRzW3lpXTtcbiAgICAgICAgICAgIGZvciAobGV0IHhpID0gMCwgY29scyA9IHJvdy5sZW5ndGg7IHhpIDwgY29sczsgKyt4aSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gcm93W3hpXTtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5kcmF3TGFiZWwoXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFggKyB4aSAqIEdSSURfU0laRSArIChHUklEX1NJWkUgLSBsYWJlbC53aWR0aCkgLyAyLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFkgKyBib2FyZEhlaWdodCAtICh5aSArIDEpICogR1JJRF9TSVpFICsgKEdSSURfU0laRSAtIGxhYmVsLmhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gcGllY2VzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcGllY2VzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBwaWVjZSA9IHBpZWNlc1tpXTtcbiAgICAgICAgICAgIGlmIChwaWVjZS50ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuc2V0Q29sb3IocGllY2UuY29sb3JbMF0sIHBpZWNlLmNvbG9yWzFdLCBwaWVjZS5jb2xvclsyXSwgcGllY2UuaG92ZXIgPyAuNzUgOiAuNSk7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuZHJhdyhcbiAgICAgICAgICAgICAgICAgICAgcGllY2UudGV4dHVyZSxcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRYICsgcGllY2UueCxcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRZICsgcGllY2UueSxcbiAgICAgICAgICAgICAgICAgICAgcGllY2UudGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgcGllY2UudGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLmZsaXBYLFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgcGllY2UudGV4dHVyZS53aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgcGllY2UudGV4dHVyZS5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkWCArIHBpZWNlLnggKyBwaWVjZS5yb3RhdGVPcmlnaW5YLFxuICAgICAgICAgICAgICAgICAgICBib2FyZFkgKyBwaWVjZS55ICsgcGllY2Uucm90YXRlT3JpZ2luWSxcbiAgICAgICAgICAgICAgICAgICAgcGllY2Uucm90YXRpb24sXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLnNjYWxlWCxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5lbmQyRCgpO1xuICAgIH1cblxuICAgIHNuYXBUb0dyaWQocGllY2U6IFBpZWNlKSB7XG4gICAgICAgIGNvbnN0IHhpID0gTWF0aC5yb3VuZChwaWVjZS5ib3R0b21MZWZ0WCAvIEdSSURfU0laRSk7XG4gICAgICAgIGNvbnN0IHlpID0gTWF0aC5yb3VuZChwaWVjZS5ib3R0b21MZWZ0WSAvIEdSSURfU0laRSk7XG4gICAgICAgIGlmICh4aSA+PSAwICYmIHhpICsgcGllY2UuZ3JpZFdpZHRoIDw9IENPTFNcbiAgICAgICAgICAgICYmIHlpID49IDAgJiYgeWkgKyBwaWVjZS5ncmlkSGVpZ2h0IDw9IFJPV1NcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBwaWVjZS5zZXRCb3R0b21MZWZ0UG9zaXRpb24oeGkgKiBHUklEX1NJWkUsIHlpICogR1JJRF9TSVpFKTtcbiAgICAgICAgfVxuICAgIH1cblxufSIsImltcG9ydCB7ZGVmaW5lQ29tcG9uZW50LCBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCByZWZ9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgUmVuZGVyZXIgZnJvbSAnLi4vY29tbW9uL3JlbmRlci9SZW5kZXJlcic7XG5pbXBvcnQgUmVuZGVyTG9vcCBmcm9tICcuLi9jb21tb24vdXRpbHMvUmVuZGVyTG9vcCc7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi9JbnB1dCc7XG5pbXBvcnQgUHV6emxlIGZyb20gJy4vUHV6emxlJztcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3QgY2FudmFzID0gcmVmPEhUTUxDYW52YXNFbGVtZW50PigpO1xuXG4gICAgICAgIGNvbnN0IGlucHV0ID0gbmV3IElucHV0KCk7XG4gICAgICAgIGNvbnN0IHJlbmRlckxvb3AgPSBuZXcgUmVuZGVyTG9vcCh1cGRhdGUpO1xuICAgICAgICBsZXQgcmVuZGVyZXI6IFJlbmRlcmVyO1xuICAgICAgICBjb25zdCBwdXp6bGUgPSBuZXcgUHV6emxlKCk7XG5cbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09IG1vdW50ZWQgPT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgIG9uTW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNhbnZhcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvY3VtZW50LnRpdGxlID0gJ0EgUHV6emxlIEEgRGF5JztcbiAgICAgICAgICAgIGlucHV0LnNldHVwKGNhbnZhcy52YWx1ZSk7XG4gICAgICAgICAgICByZW5kZXJlciA9IG5ldyBSZW5kZXJlcihjYW52YXMudmFsdWUpO1xuICAgICAgICAgICAgYXV0b1Jlc2l6ZUNhbnZhcygpO1xuICAgICAgICAgICAgcHV6emxlLmluaXQocmVuZGVyZXIpO1xuICAgICAgICAgICAgcmVuZGVyTG9vcC5zdGFydCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gdW5tb3VudGVkID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBvblVubW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZW5kZXJMb29wLnN0b3AoKTtcbiAgICAgICAgICAgIGlucHV0LnVubG9hZChyZW5kZXJlci5jYW52YXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gYXV0byByZXNpemUgY2FudmFzID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBmdW5jdGlvbiBhdXRvUmVzaXplQ2FudmFzKCkge1xuICAgICAgICAgICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIucmVzaXplQ2FudmFzKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGF1dG9SZXNpemVDYW52YXNUaWQgPSBzZXRJbnRlcnZhbChhdXRvUmVzaXplQ2FudmFzLCAxMDApO1xuICAgICAgICBvblVubW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9SZXNpemVDYW52YXNUaWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0gdXBkYXRlID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGUoZHQ6IG51bWJlcikge1xuICAgICAgICAgICAgcHV6emxlLnVwZGF0ZShyZW5kZXJlciwgaW5wdXQsIGR0KTtcbiAgICAgICAgICAgIGlucHV0LnVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtjYW52YXN9O1xuICAgIH1cbn0pOyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0FQdXp6bGVBRGF5LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YWMzOTAyYSZzY29wZWQ9dHJ1ZVwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FQdXp6bGVBRGF5LnRzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FQdXp6bGVBRGF5LnRzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcblxuaW1wb3J0IFwiLi9BUHV6emxlQURheS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01YWMzOTAyYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuc2NyaXB0LnJlbmRlciA9IHJlbmRlclxuc2NyaXB0Ll9fc2NvcGVJZCA9IFwiZGF0YS12LTVhYzM5MDJhXCJcblxuZXhwb3J0IGRlZmF1bHQgc2NyaXB0IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9yZWYtLTE3LTAhLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDk3ZjY3NmImbGFuZz1jc3NcIiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG5odG1sIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuYm9keSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG1hcmdpbjogMDtcXG59XFxuI2FwcCB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgIHdpZHRoOiA4cHg7XFxuICAgIGhlaWdodDogOHB4O1xcbn1cXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXItY29ybmVyIHtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC4xKTtcXG59XFxuOjotd2Via2l0LXNjcm9sbGJhci10aHVtYjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjIpO1xcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3JlZi0tMTctMCEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MSZpZD0wOTdmNjc2YiZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIiIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjYXBwPi5kaWFsb2ctbWFza1tkYXRhLXYtMDk3ZjY3NmJde2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDo5OTk5O2xlZnQ6MDt0b3A6MDtyaWdodDowO2JvdHRvbTowfSNhcHA+LmRpYWxvZy1tYXNrIC5kaWFsb2dbZGF0YS12LTA5N2Y2NzZiXXttYXJnaW46YXV0bztwYWRkaW5nOjEycHg7YmFja2dyb3VuZDojNjY2O2JvcmRlcjpzb2xpZCAxcHggIzQ0NDtib3gtc2hhZG93OjAgMCA1cHggcmdiYSgwLDAsMCwwLjIpO2NvbG9yOiNmZmZ9I2FwcD4uZGlhbG9nLW1hc2sgLmRpYWxvZyB0ZXh0YXJlYVtkYXRhLXYtMDk3ZjY3NmJde3dpZHRoOjQ4MHB4O2hlaWdodDoyNjBweDtvdXRsaW5lOm5vbmU7cmVzaXplOm5vbmU7Ym9yZGVyOm5vbmU7YmFja2dyb3VuZDojNDQ0O2NvbG9yOiNmZmZ9I2FwcD4uZGlhbG9nLW1hc2sgLmRpYWxvZyBidXR0b25bZGF0YS12LTA5N2Y2NzZiXXtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzo0cHggMTJweDtib3JkZXI6bm9uZTtiYWNrZ3JvdW5kOiM0NDQ7Y29sb3I6I2ZmZjtmb250LXNpemU6MTRweDtvdXRsaW5lOm5vbmU7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zc30jYXBwPi5kaWFsb2ctbWFzayAuZGlhbG9nIGJ1dHRvbltkYXRhLXYtMDk3ZjY3NmJdOmhvdmVye2JhY2tncm91bmQtY29sb3I6IzU1NX0jYXBwPi5kaWFsb2ctbWFzayAuZGlhbG9nIGJ1dHRvbltkYXRhLXYtMDk3ZjY3NmJdOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiMyMjJ9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9pbmRleC5qcz8/cmVmLS0xNy0wIS4vQVB1enpsZUFEYXkudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NWFjMzkwMmEmbGFuZz1zY3NzJnNjb3BlZD10cnVlXCIiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmEtcHV6emxlLWEtZGF5W2RhdGEtdi01YWMzOTAyYV17d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOiNmMmYyZjJ9LmEtcHV6emxlLWEtZGF5IC5saW5rW2RhdGEtdi01YWMzOTAyYV17cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxO2xlZnQ6OHB4O3RvcDo4cHg7Y29sb3I6cmdiYSgwLDAsMCwwLjUpO3VzZXItc2VsZWN0Om5vbmV9LmEtcHV6emxlLWEtZGF5IC5saW5rIGFbZGF0YS12LTVhYzM5MDJhXXt0ZXh0LWRlY29yYXRpb246bm9uZTtjb2xvcjojNDA5ZWZmfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCI8dGVtcGxhdGU+XG4gICAgPHJvdXRlci12aWV3Lz5cbiAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLW1hc2tcIiB2LWlmPVwiZXJyb3JNZXNzYWdlV2luZG93VmlzaWJsZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nXCI+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwibWFyZ2luLWJvdHRvbTogLjI1ZW1cIj5BbiBlcnJvciBvY2N1cnJlZC48L2Rpdj5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSByZWFkb25seT57e2Vycm9yTWVzc2FnZX19PC90ZXh0YXJlYT5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiByaWdodDtcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cImVycm9yTWVzc2FnZVdpbmRvd1Zpc2libGUgPSBmYWxzZVwiPkNsb3NlPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IGxhbmc9XCJ0c1wiIHNyYz1cIi4vQXBwLnRzXCI+PC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwiY3NzXCI+XG5odG1sIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbmJvZHkge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBtYXJnaW46IDA7XG59XG5cbiNhcHAge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBmb250LXNpemU6IDE0cHg7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgIHdpZHRoOiA4cHg7XG4gICAgaGVpZ2h0OiA4cHg7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG5cbjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgLjEpO1xufVxuXG46Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIC4yKTtcbn1cbjwvc3R5bGU+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbiNhcHAgPiAuZGlhbG9nLW1hc2sge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgei1pbmRleDogOTk5OTtcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG5cbiAgICAuZGlhbG9nIHtcbiAgICAgICAgbWFyZ2luOiBhdXRvO1xuICAgICAgICBwYWRkaW5nOiAxMnB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAjNjY2O1xuICAgICAgICBib3JkZXI6IHNvbGlkIDFweCAjNDQ0O1xuICAgICAgICBib3gtc2hhZG93OiAwIDAgNXB4IHJnYmEoMCwgMCwgMCwgLjIpO1xuICAgICAgICBjb2xvcjogI2ZmZjtcblxuICAgICAgICB0ZXh0YXJlYSB7XG4gICAgICAgICAgICB3aWR0aDogNDgwcHg7XG4gICAgICAgICAgICBoZWlnaHQ6IDI2MHB4O1xuICAgICAgICAgICAgb3V0bGluZTogbm9uZTtcbiAgICAgICAgICAgIHJlc2l6ZTogbm9uZTtcbiAgICAgICAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICM0NDQ7XG4gICAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgICAgcGFkZGluZzogNHB4IDEycHg7XG4gICAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNDQ0O1xuICAgICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgICAgICBvdXRsaW5lOiBub25lO1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuM3M7XG5cbiAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1NTU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuPC9zdHlsZT5cbiIsImltcG9ydCB7ZGVmaW5lQ29tcG9uZW50LCBpbmplY3QsIG9uVW5tb3VudGVkLCByZWZ9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgU2lnbmFsIGZyb20gJy4vY29tbW9uL3V0aWxzL1NpZ25hbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgIGNvbnN0IGVycm9yU2lnbmFsID0gaW5qZWN0KCdlcnJvclNpZ25hbCcpIGFzIFNpZ25hbDx1bmtub3duPjtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gcmVmKCcnKTtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlV2luZG93VmlzaWJsZSA9IHJlZihmYWxzZSk7XG5cbiAgICAgICAgY29uc3Qgc2hvd0Vycm9yTWVzc2FnZVdpbmRvdyA9IChlcnJvcjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZS52YWx1ZSA9IGVycm9yLnN0YWNrICsgJyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZS52YWx1ZSA9IGVycm9yICsgJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VXaW5kb3dWaXNpYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25FcnJvciA9IChlOiBFcnJvckV2ZW50KSA9PiB7XG4gICAgICAgICAgICBzaG93RXJyb3JNZXNzYWdlV2luZG93KGUuZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBvblVuaGFuZGxlZFJlamVjdGlvbiA9IChlOiBQcm9taXNlUmVqZWN0aW9uRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHNob3dFcnJvck1lc3NhZ2VXaW5kb3coZS5yZWFzb24pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVycm9yU2lnbmFsLmFkZExpc3RlbmVyKHNob3dFcnJvck1lc3NhZ2VXaW5kb3cpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIG9uVW5oYW5kbGVkUmVqZWN0aW9uKTtcbiAgICAgICAgb25Vbm1vdW50ZWQoKCkgPT4ge1xuICAgICAgICAgICAgZXJyb3JTaWduYWwucmVtb3ZlTGlzdGVuZXIoc2hvd0Vycm9yTWVzc2FnZVdpbmRvdyk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCBvblVuaGFuZGxlZFJlamVjdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VXaW5kb3dWaXNpYmxlLFxuICAgICAgICB9O1xuICAgIH1cbn0pOyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDk3ZjY3NmImc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudHM/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnRzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzXCJcblxuaW1wb3J0IFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MDk3ZjY3NmImbGFuZz1jc3NcIlxuaW1wb3J0IFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTEmaWQ9MDk3ZjY3NmImbGFuZz1zY3NzJnNjb3BlZD10cnVlXCJcbnNjcmlwdC5yZW5kZXIgPSByZW5kZXJcbnNjcmlwdC5fX3Njb3BlSWQgPSBcImRhdGEtdi0wOTdmNjc2YlwiXG5cbmV4cG9ydCBkZWZhdWx0IHNjcmlwdCIsImltcG9ydCB7Y3JlYXRlQXBwfSBmcm9tICd2dWUnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC52dWUnO1xuaW1wb3J0IFNpZ25hbCBmcm9tICcuL2NvbW1vbi91dGlscy9TaWduYWwnO1xuaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlcic7XG5cbmNvbnN0IGFwcCA9IGNyZWF0ZUFwcChBcHApO1xuY29uc3QgZXJyb3JTaWduYWwgPSBuZXcgU2lnbmFsKCk7XG5hcHAuY29uZmlnLmVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChlcnIsIGluc3RhbmNlLCBpbmZvKSB7XG4gICAgZXJyb3JTaWduYWwuZGlzcGF0Y2goZXJyKTtcbn07XG5hcHAucHJvdmlkZSgnZXJyb3JTaWduYWwnLCBlcnJvclNpZ25hbCk7XG5hcHAudXNlKHJvdXRlcikubW91bnQoJyNhcHAnKTsiLCJpbnRlcmZhY2UgTGlzdGVuZXI8VD4ge1xuICAgIChvYmo6IFQpOiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaWduYWw8VD4ge1xuXG4gICAgcHJpdmF0ZSBsaXN0ZW5lcnM6IExpc3RlbmVyPFQ+W10gPSBbXTtcblxuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyOiBMaXN0ZW5lcjxUPikge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcjogTGlzdGVuZXI8VD4pIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmxpc3RlbmVycy5maW5kSW5kZXgoY3VyciA9PiBjdXJyID09PSBsaXN0ZW5lcik7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzcGF0Y2gob2JqOiBUKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIob2JqKSk7XG4gICAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9